
Aero_Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  0000215c  000021f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000215c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000be  008001b6  008001b6  000022a6  2**0
                  ALLOC
  3 .debug_aranges 00000750  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001106  00000000  00000000  000029f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000783e  00000000  00000000  00003afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001c4c  00000000  00000000  0000b33a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004af1  00000000  00000000  0000cf86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cb0  00000000  00000000  00011a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002146  00000000  00000000  00012728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004421  00000000  00000000  0001486e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006a0  00000000  00000000  00018c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		return 1;
	} else {
		/* No data */
		return 0;
	}
}
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    SPCR |= _BV(DORD);
  } else {
    SPCR &= ~(_BV(DORD));
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
	cePin = 8;
	csnPin = 7;
	channel = 1;
	payload = 16;
	spi = NULL;
}
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__vector_16>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_18>
      4c:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_19>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <pstr_inf>:
      c2:	49 4e 46                                            INF

000000c5 <pstr_inity>:
      c5:	49 4e 49 54 59                                      INITY

000000ca <pstr_nan>:
      ca:	4e 41 4e                                            NAN

000000cd <pwr_m10>:
      cd:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      dd:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000e5 <pwr_p10>:
      e5:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      f5:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000fe <__ctors_start>:
      fe:	48 03       	fmul	r20, r16
     100:	79 05       	cpc	r23, r9
     102:	25 0a       	sbc	r2, r21

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d8 e0       	ldi	r29, 0x08	; 8
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	11 e0       	ldi	r17, 0x01	; 1
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	ec e5       	ldi	r30, 0x5C	; 92
     118:	f1 e2       	ldi	r31, 0x21	; 33
     11a:	02 c0       	rjmp	.+4      	; 0x120 <.do_copy_data_start>

0000011c <.do_copy_data_loop>:
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0

00000120 <.do_copy_data_start>:
     120:	a6 3b       	cpi	r26, 0xB6	; 182
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <.do_copy_data_loop>

00000126 <__do_clear_bss>:
     126:	12 e0       	ldi	r17, 0x02	; 2
     128:	a6 eb       	ldi	r26, 0xB6	; 182
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a4 37       	cpi	r26, 0x74	; 116
     132:	b1 07       	cpc	r27, r17
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>

00000136 <__do_global_ctors>:
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	c4 e0       	ldi	r28, 0x04	; 4
     13a:	d1 e0       	ldi	r29, 0x01	; 1
     13c:	04 c0       	rjmp	.+8      	; 0x146 <.do_global_ctors_start>

0000013e <.do_global_ctors_loop>:
     13e:	22 97       	sbiw	r28, 0x02	; 2
     140:	fe 01       	movw	r30, r28
     142:	0e 94 66 10 	call	0x20cc	; 0x20cc <__tablejump__>

00000146 <.do_global_ctors_start>:
     146:	ce 3f       	cpi	r28, 0xFE	; 254
     148:	d1 07       	cpc	r29, r17
     14a:	c9 f7       	brne	.-14     	; 0x13e <.do_global_ctors_loop>
     14c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <main>
     150:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <atof>:
     158:	66 27       	eor	r22, r22
     15a:	77 27       	eor	r23, r23
     15c:	0c 94 b0 00 	jmp	0x160	; 0x160 <strtod>

00000160 <strtod>:
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	e6 eb       	ldi	r30, 0xB6	; 182
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__prologue_saves__+0xc>
     16c:	ec 01       	movw	r28, r24
     16e:	5b 01       	movw	r10, r22
     170:	61 15       	cp	r22, r1
     172:	71 05       	cpc	r23, r1
     174:	19 f0       	breq	.+6      	; 0x17c <strtod+0x1c>
     176:	fb 01       	movw	r30, r22
     178:	91 83       	std	Z+1, r25	; 0x01
     17a:	80 83       	st	Z, r24
     17c:	f9 90       	ld	r15, Y+
     17e:	8f 2d       	mov	r24, r15
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <isspace>
     186:	89 2b       	or	r24, r25
     188:	c9 f7       	brne	.-14     	; 0x17c <strtod+0x1c>
     18a:	fd e2       	ldi	r31, 0x2D	; 45
     18c:	ff 16       	cp	r15, r31
     18e:	21 f4       	brne	.+8      	; 0x198 <strtod+0x38>
     190:	f9 90       	ld	r15, Y+
     192:	ee 24       	eor	r14, r14
     194:	e3 94       	inc	r14
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <strtod+0x42>
     198:	2b e2       	ldi	r18, 0x2B	; 43
     19a:	f2 16       	cp	r15, r18
     19c:	09 f4       	brne	.+2      	; 0x1a0 <strtod+0x40>
     19e:	f9 90       	ld	r15, Y+
     1a0:	ee 24       	eor	r14, r14
     1a2:	8e 01       	movw	r16, r28
     1a4:	01 50       	subi	r16, 0x01	; 1
     1a6:	10 40       	sbci	r17, 0x00	; 0
     1a8:	c8 01       	movw	r24, r16
     1aa:	62 ec       	ldi	r22, 0xC2	; 194
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	43 e0       	ldi	r20, 0x03	; 3
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	0e 94 10 02 	call	0x420	; 0x420 <strncasecmp_P>
     1b6:	89 2b       	or	r24, r25
     1b8:	01 f5       	brne	.+64     	; 0x1fa <strtod+0x9a>
     1ba:	8e 01       	movw	r16, r28
     1bc:	0e 5f       	subi	r16, 0xFE	; 254
     1be:	1f 4f       	sbci	r17, 0xFF	; 255
     1c0:	c8 01       	movw	r24, r16
     1c2:	65 ec       	ldi	r22, 0xC5	; 197
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	45 e0       	ldi	r20, 0x05	; 5
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	0e 94 10 02 	call	0x420	; 0x420 <strncasecmp_P>
     1ce:	89 2b       	or	r24, r25
     1d0:	19 f4       	brne	.+6      	; 0x1d8 <strtod+0x78>
     1d2:	8e 01       	movw	r16, r28
     1d4:	09 5f       	subi	r16, 0xF9	; 249
     1d6:	1f 4f       	sbci	r17, 0xFF	; 255
     1d8:	a1 14       	cp	r10, r1
     1da:	b1 04       	cpc	r11, r1
     1dc:	19 f0       	breq	.+6      	; 0x1e4 <strtod+0x84>
     1de:	f5 01       	movw	r30, r10
     1e0:	11 83       	std	Z+1, r17	; 0x01
     1e2:	00 83       	st	Z, r16
     1e4:	e0 fc       	sbrc	r14, 0
     1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <strtod+0x90>
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	14 c0       	rjmp	.+40     	; 0x218 <strtod+0xb8>
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	6f ef       	ldi	r22, 0xFF	; 255
     1f8:	08 c1       	rjmp	.+528    	; 0x40a <strtod+0x2aa>
     1fa:	c8 01       	movw	r24, r16
     1fc:	6a ec       	ldi	r22, 0xCA	; 202
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	43 e0       	ldi	r20, 0x03	; 3
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	0e 94 10 02 	call	0x420	; 0x420 <strncasecmp_P>
     208:	89 2b       	or	r24, r25
     20a:	69 f4       	brne	.+26     	; 0x226 <strtod+0xc6>
     20c:	a1 14       	cp	r10, r1
     20e:	b1 04       	cpc	r11, r1
     210:	29 f4       	brne	.+10     	; 0x21c <strtod+0xbc>
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	80 ec       	ldi	r24, 0xC0	; 192
     218:	6f e7       	ldi	r22, 0x7F	; 127
     21a:	f7 c0       	rjmp	.+494    	; 0x40a <strtod+0x2aa>
     21c:	22 96       	adiw	r28, 0x02	; 2
     21e:	f5 01       	movw	r30, r10
     220:	d1 83       	std	Z+1, r29	; 0x01
     222:	c0 83       	st	Z, r28
     224:	f6 cf       	rjmp	.-20     	; 0x212 <strtod+0xb2>
     226:	88 24       	eor	r8, r8
     228:	99 24       	eor	r9, r9
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	ef 2d       	mov	r30, r15
     234:	e0 53       	subi	r30, 0x30	; 48
     236:	ea 30       	cpi	r30, 0x0A	; 10
     238:	a0 f5       	brcc	.+104    	; 0x2a2 <strtod+0x142>
     23a:	f2 e0       	ldi	r31, 0x02	; 2
     23c:	ef 2a       	or	r14, r31
     23e:	8e 2d       	mov	r24, r14
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	9c 01       	movw	r18, r24
     244:	28 70       	andi	r18, 0x08	; 8
     246:	30 70       	andi	r19, 0x00	; 0
     248:	e2 fe       	sbrs	r14, 2
     24a:	06 c0       	rjmp	.+12     	; 0x258 <strtod+0xf8>
     24c:	23 2b       	or	r18, r19
     24e:	79 f5       	brne	.+94     	; 0x2ae <strtod+0x14e>
     250:	08 94       	sec
     252:	81 1c       	adc	r8, r1
     254:	91 1c       	adc	r9, r1
     256:	2b c0       	rjmp	.+86     	; 0x2ae <strtod+0x14e>
     258:	23 2b       	or	r18, r19
     25a:	19 f0       	breq	.+6      	; 0x262 <strtod+0x102>
     25c:	08 94       	sec
     25e:	81 08       	sbc	r8, r1
     260:	91 08       	sbc	r9, r1
     262:	db 01       	movw	r26, r22
     264:	ca 01       	movw	r24, r20
     266:	12 e0       	ldi	r17, 0x02	; 2
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	aa 1f       	adc	r26, r26
     26e:	bb 1f       	adc	r27, r27
     270:	1a 95       	dec	r17
     272:	d1 f7       	brne	.-12     	; 0x268 <strtod+0x108>
     274:	48 0f       	add	r20, r24
     276:	59 1f       	adc	r21, r25
     278:	6a 1f       	adc	r22, r26
     27a:	7b 1f       	adc	r23, r27
     27c:	44 0f       	add	r20, r20
     27e:	55 1f       	adc	r21, r21
     280:	66 1f       	adc	r22, r22
     282:	77 1f       	adc	r23, r23
     284:	4e 0f       	add	r20, r30
     286:	51 1d       	adc	r21, r1
     288:	61 1d       	adc	r22, r1
     28a:	71 1d       	adc	r23, r1
     28c:	48 39       	cpi	r20, 0x98	; 152
     28e:	29 e9       	ldi	r18, 0x99	; 153
     290:	52 07       	cpc	r21, r18
     292:	29 e9       	ldi	r18, 0x99	; 153
     294:	62 07       	cpc	r22, r18
     296:	29 e1       	ldi	r18, 0x19	; 25
     298:	72 07       	cpc	r23, r18
     29a:	48 f0       	brcs	.+18     	; 0x2ae <strtod+0x14e>
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	e8 2a       	or	r14, r24
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <strtod+0x14e>
     2a2:	ee 3f       	cpi	r30, 0xFE	; 254
     2a4:	31 f4       	brne	.+12     	; 0x2b2 <strtod+0x152>
     2a6:	e3 fc       	sbrc	r14, 3
     2a8:	39 c0       	rjmp	.+114    	; 0x31c <strtod+0x1bc>
     2aa:	98 e0       	ldi	r25, 0x08	; 8
     2ac:	e9 2a       	or	r14, r25
     2ae:	f9 90       	ld	r15, Y+
     2b0:	c0 cf       	rjmp	.-128    	; 0x232 <strtod+0xd2>
     2b2:	e5 33       	cpi	r30, 0x35	; 53
     2b4:	11 f0       	breq	.+4      	; 0x2ba <strtod+0x15a>
     2b6:	e5 31       	cpi	r30, 0x15	; 21
     2b8:	89 f5       	brne	.+98     	; 0x31c <strtod+0x1bc>
     2ba:	29 91       	ld	r18, Y+
     2bc:	2d 32       	cpi	r18, 0x2D	; 45
     2be:	19 f4       	brne	.+6      	; 0x2c6 <strtod+0x166>
     2c0:	e0 e1       	ldi	r30, 0x10	; 16
     2c2:	ee 2a       	or	r14, r30
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <strtod+0x170>
     2c6:	2b 32       	cpi	r18, 0x2B	; 43
     2c8:	19 f0       	breq	.+6      	; 0x2d0 <strtod+0x170>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <strtod+0x176>
     2d0:	29 91       	ld	r18, Y+
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	e2 2f       	mov	r30, r18
     2d8:	e0 53       	subi	r30, 0x30	; 48
     2da:	ea 30       	cpi	r30, 0x0A	; 10
     2dc:	18 f0       	brcs	.+6      	; 0x2e4 <strtod+0x184>
     2de:	c8 1b       	sub	r28, r24
     2e0:	d9 0b       	sbc	r29, r25
     2e2:	1c c0       	rjmp	.+56     	; 0x31c <strtod+0x1bc>
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	fc e0       	ldi	r31, 0x0C	; 12
     2ea:	20 38       	cpi	r18, 0x80	; 128
     2ec:	3f 07       	cpc	r19, r31
     2ee:	5c f4       	brge	.+22     	; 0x306 <strtod+0x1a6>
     2f0:	c9 01       	movw	r24, r18
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	28 0f       	add	r18, r24
     2fc:	39 1f       	adc	r19, r25
     2fe:	22 0f       	add	r18, r18
     300:	33 1f       	adc	r19, r19
     302:	2e 0f       	add	r18, r30
     304:	31 1d       	adc	r19, r1
     306:	e9 91       	ld	r30, Y+
     308:	e0 53       	subi	r30, 0x30	; 48
     30a:	ea 30       	cpi	r30, 0x0A	; 10
     30c:	68 f3       	brcs	.-38     	; 0x2e8 <strtod+0x188>
     30e:	e4 fe       	sbrs	r14, 4
     310:	03 c0       	rjmp	.+6      	; 0x318 <strtod+0x1b8>
     312:	30 95       	com	r19
     314:	21 95       	neg	r18
     316:	3f 4f       	sbci	r19, 0xFF	; 255
     318:	82 0e       	add	r8, r18
     31a:	93 1e       	adc	r9, r19
     31c:	ce 2c       	mov	r12, r14
     31e:	dd 24       	eor	r13, r13
     320:	e1 fe       	sbrs	r14, 1
     322:	07 c0       	rjmp	.+14     	; 0x332 <strtod+0x1d2>
     324:	a1 14       	cp	r10, r1
     326:	b1 04       	cpc	r11, r1
     328:	21 f0       	breq	.+8      	; 0x332 <strtod+0x1d2>
     32a:	21 97       	sbiw	r28, 0x01	; 1
     32c:	f5 01       	movw	r30, r10
     32e:	d1 83       	std	Z+1, r29	; 0x01
     330:	c0 83       	st	Z, r28
     332:	cb 01       	movw	r24, r22
     334:	ba 01       	movw	r22, r20
     336:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__floatunsisf>
     33a:	7b 01       	movw	r14, r22
     33c:	8c 01       	movw	r16, r24
     33e:	f3 e0       	ldi	r31, 0x03	; 3
     340:	cf 22       	and	r12, r31
     342:	dd 24       	eor	r13, r13
     344:	23 e0       	ldi	r18, 0x03	; 3
     346:	c2 16       	cp	r12, r18
     348:	d1 04       	cpc	r13, r1
     34a:	21 f4       	brne	.+8      	; 0x354 <strtod+0x1f4>
     34c:	17 fb       	bst	r17, 7
     34e:	10 95       	com	r17
     350:	17 f9       	bld	r17, 7
     352:	10 95       	com	r17
     354:	57 01       	movw	r10, r14
     356:	68 01       	movw	r12, r16
     358:	c8 01       	movw	r24, r16
     35a:	b7 01       	movw	r22, r14
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__cmpsf2>
     368:	88 23       	and	r24, r24
     36a:	09 f4       	brne	.+2      	; 0x36e <strtod+0x20e>
     36c:	4a c0       	rjmp	.+148    	; 0x402 <strtod+0x2a2>
     36e:	97 fe       	sbrs	r9, 7
     370:	0d c0       	rjmp	.+26     	; 0x38c <strtod+0x22c>
     372:	21 ee       	ldi	r18, 0xE1	; 225
     374:	e2 2e       	mov	r14, r18
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	f2 2e       	mov	r15, r18
     37a:	90 94       	com	r9
     37c:	81 94       	neg	r8
     37e:	91 08       	sbc	r9, r1
     380:	93 94       	inc	r9
     382:	c0 e2       	ldi	r28, 0x20	; 32
     384:	d0 e0       	ldi	r29, 0x00	; 0
     386:	00 e0       	ldi	r16, 0x00	; 0
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	12 c0       	rjmp	.+36     	; 0x3b0 <strtod+0x250>
     38c:	99 ef       	ldi	r25, 0xF9	; 249
     38e:	e9 2e       	mov	r14, r25
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	f9 2e       	mov	r15, r25
     394:	f6 cf       	rjmp	.-20     	; 0x382 <strtod+0x222>
     396:	f7 01       	movw	r30, r14
     398:	25 91       	lpm	r18, Z+
     39a:	35 91       	lpm	r19, Z+
     39c:	45 91       	lpm	r20, Z+
     39e:	54 91       	lpm	r21, Z+
     3a0:	c6 01       	movw	r24, r12
     3a2:	b5 01       	movw	r22, r10
     3a4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulsf3>
     3a8:	5b 01       	movw	r10, r22
     3aa:	6c 01       	movw	r12, r24
     3ac:	8c 1a       	sub	r8, r28
     3ae:	9d 0a       	sbc	r9, r29
     3b0:	8c 16       	cp	r8, r28
     3b2:	9d 06       	cpc	r9, r29
     3b4:	84 f7       	brge	.-32     	; 0x396 <strtod+0x236>
     3b6:	d5 95       	asr	r29
     3b8:	c7 95       	ror	r28
     3ba:	0f 5f       	subi	r16, 0xFF	; 255
     3bc:	1f 4f       	sbci	r17, 0xFF	; 255
     3be:	06 30       	cpi	r16, 0x06	; 6
     3c0:	11 05       	cpc	r17, r1
     3c2:	29 f0       	breq	.+10     	; 0x3ce <strtod+0x26e>
     3c4:	8c ef       	ldi	r24, 0xFC	; 252
     3c6:	9f ef       	ldi	r25, 0xFF	; 255
     3c8:	e8 0e       	add	r14, r24
     3ca:	f9 1e       	adc	r15, r25
     3cc:	f1 cf       	rjmp	.-30     	; 0x3b0 <strtod+0x250>
     3ce:	c5 01       	movw	r24, r10
     3d0:	d6 01       	movw	r26, r12
     3d2:	7c 01       	movw	r14, r24
     3d4:	8d 01       	movw	r16, r26
     3d6:	8c 2d       	mov	r24, r12
     3d8:	88 0f       	add	r24, r24
     3da:	8d 2d       	mov	r24, r13
     3dc:	88 1f       	adc	r24, r24
     3de:	8f 3f       	cpi	r24, 0xFF	; 255
     3e0:	51 f0       	breq	.+20     	; 0x3f6 <strtod+0x296>
     3e2:	c6 01       	movw	r24, r12
     3e4:	b5 01       	movw	r22, r10
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__cmpsf2>
     3f2:	88 23       	and	r24, r24
     3f4:	31 f4       	brne	.+12     	; 0x402 <strtod+0x2a2>
     3f6:	82 e2       	ldi	r24, 0x22	; 34
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	90 93 73 02 	sts	0x0273, r25
     3fe:	80 93 72 02 	sts	0x0272, r24
     402:	7e 2d       	mov	r23, r14
     404:	9f 2d       	mov	r25, r15
     406:	80 2f       	mov	r24, r16
     408:	61 2f       	mov	r22, r17
     40a:	27 2f       	mov	r18, r23
     40c:	39 2f       	mov	r19, r25
     40e:	48 2f       	mov	r20, r24
     410:	56 2f       	mov	r21, r22
     412:	b9 01       	movw	r22, r18
     414:	ca 01       	movw	r24, r20
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	ec e0       	ldi	r30, 0x0C	; 12
     41c:	0c 94 97 10 	jmp	0x212e	; 0x212e <__epilogue_restores__+0xc>

00000420 <strncasecmp_P>:
     420:	fb 01       	movw	r30, r22
     422:	dc 01       	movw	r26, r24
     424:	41 50       	subi	r20, 0x01	; 1
     426:	50 40       	sbci	r21, 0x00	; 0
     428:	88 f0       	brcs	.+34     	; 0x44c <strncasecmp_P+0x2c>
     42a:	8d 91       	ld	r24, X+
     42c:	81 34       	cpi	r24, 0x41	; 65
     42e:	1c f0       	brlt	.+6      	; 0x436 <strncasecmp_P+0x16>
     430:	8b 35       	cpi	r24, 0x5B	; 91
     432:	0c f4       	brge	.+2      	; 0x436 <strncasecmp_P+0x16>
     434:	80 5e       	subi	r24, 0xE0	; 224
     436:	65 91       	lpm	r22, Z+
     438:	61 34       	cpi	r22, 0x41	; 65
     43a:	1c f0       	brlt	.+6      	; 0x442 <strncasecmp_P+0x22>
     43c:	6b 35       	cpi	r22, 0x5B	; 91
     43e:	0c f4       	brge	.+2      	; 0x442 <strncasecmp_P+0x22>
     440:	60 5e       	subi	r22, 0xE0	; 224
     442:	86 1b       	sub	r24, r22
     444:	61 11       	cpse	r22, r1
     446:	71 f3       	breq	.-36     	; 0x424 <strncasecmp_P+0x4>
     448:	99 0b       	sbc	r25, r25
     44a:	08 95       	ret
     44c:	88 1b       	sub	r24, r24
     44e:	fc cf       	rjmp	.-8      	; 0x448 <strncasecmp_P+0x28>

00000450 <_Z10radio_recvjP12radio_packet>:

/**
 * Waits to receive data over a given timeout period.
 * Data put into packet structure give via pointer.
 */
int radio_recv(unsigned int timeout, radio_packet * packet) {
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	8c 01       	movw	r16, r24
     466:	eb 01       	movw	r28, r22
	unsigned long time = millis();
     468:	0e 94 c9 0c 	call	0x1992	; 0x1992 <millis>
     46c:	5b 01       	movw	r10, r22
     46e:	6c 01       	movw	r12, r24
	while(!Mirf.dataReady()){
		//Serial.println("Waiting");
		if ( ( millis() - time ) > timeout ) {
     470:	78 01       	movw	r14, r16
     472:	00 e0       	ldi	r16, 0x00	; 0
     474:	10 e0       	ldi	r17, 0x00	; 0
     476:	0e c0       	rjmp	.+28     	; 0x494 <_Z10radio_recvjP12radio_packet+0x44>
     478:	0e 94 c9 0c 	call	0x1992	; 0x1992 <millis>
     47c:	6a 19       	sub	r22, r10
     47e:	7b 09       	sbc	r23, r11
     480:	8c 09       	sbc	r24, r12
     482:	9d 09       	sbc	r25, r13
     484:	e6 16       	cp	r14, r22
     486:	f7 06       	cpc	r15, r23
     488:	08 07       	cpc	r16, r24
     48a:	19 07       	cpc	r17, r25
     48c:	18 f4       	brcc	.+6      	; 0x494 <_Z10radio_recvjP12radio_packet+0x44>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	0d c0       	rjmp	.+26     	; 0x4ae <_Z10radio_recvjP12radio_packet+0x5e>
 * Waits to receive data over a given timeout period.
 * Data put into packet structure give via pointer.
 */
int radio_recv(unsigned int timeout, radio_packet * packet) {
	unsigned long time = millis();
	while(!Mirf.dataReady()){
     494:	86 eb       	ldi	r24, 0xB6	; 182
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6Nrf24l9dataReadyEv>
     49c:	88 23       	and	r24, r24
     49e:	61 f3       	breq	.-40     	; 0x478 <_Z10radio_recvjP12radio_packet+0x28>
		if ( ( millis() - time ) > timeout ) {
			return 0;
		}
	}

	Mirf.getData(packet->data);
     4a0:	86 eb       	ldi	r24, 0xB6	; 182
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	be 01       	movw	r22, r28
     4a6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_ZN6Nrf24l7getDataEPh>
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
}
     4ae:	c9 01       	movw	r24, r18
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	af 90       	pop	r10
     4c4:	08 95       	ret

000004c6 <_Z15radio_send_waitP12radio_packetPc>:

/**
 * Sends a radio_packet to receiver at address addr and waits
 * for send to finish.
 */
void radio_send_wait(radio_packet * packet, char * addr) {
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	8c 01       	movw	r16, r24

	Mirf.setTADDR((byte *)addr);
     4cc:	86 eb       	ldi	r24, 0xB6	; 182
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN6Nrf24l8setTADDREPh>

	Mirf.send(packet->data);
     4d4:	86 eb       	ldi	r24, 0xB6	; 182
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	b8 01       	movw	r22, r16
     4da:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN6Nrf24l4sendEPh>

	while(Mirf.isSending()){
     4de:	86 eb       	ldi	r24, 0xB6	; 182
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN6Nrf24l9isSendingEv>
     4e6:	88 23       	and	r24, r24
     4e8:	d1 f7       	brne	.-12     	; 0x4de <_Z15radio_send_waitP12radio_packetPc+0x18>
	}

	delay(20);
     4ea:	64 e1       	ldi	r22, 0x14	; 20
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay>
}
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <_Z10radio_initPcii>:
 */

/**
 * Initializes nRF24L01 Radio
 */
void radio_init(char * addr, int channel, int payload) {
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	7c 01       	movw	r14, r24
     50a:	c6 2e       	mov	r12, r22
     50c:	d4 2e       	mov	r13, r20

	// Reset Radio in case it is in a bad state
	pinMode(4, OUTPUT);
     50e:	84 e0       	ldi	r24, 0x04	; 4
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <pinMode>
	digitalWrite(4, LOW);
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
	delay(25);
     51e:	69 e1       	ldi	r22, 0x19	; 25
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay>
	digitalWrite(4, HIGH);
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
	delay(25);
     532:	69 e1       	ldi	r22, 0x19	; 25
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay>

	/*
	 * Setup pins / SPI.
	 */
	Mirf.cePin = 8;
     53e:	88 e0       	ldi	r24, 0x08	; 8
     540:	80 93 b7 01 	sts	0x01B7, r24
	Mirf.csnPin = 9;
     544:	89 e0       	ldi	r24, 0x09	; 9
     546:	80 93 b8 01 	sts	0x01B8, r24

	Mirf.spi = &MirfHardwareSpi;
     54a:	8e eb       	ldi	r24, 0xBE	; 190
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	90 93 bd 01 	sts	0x01BD, r25
     552:	80 93 bc 01 	sts	0x01BC, r24
	Mirf.init();
     556:	06 eb       	ldi	r16, 0xB6	; 182
     558:	11 e0       	ldi	r17, 0x01	; 1
     55a:	c8 01       	movw	r24, r16
     55c:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN6Nrf24l4initEv>

	/*
	 * Configure reciving address.
	 */
	Mirf.setRADDR((byte *)addr);
     560:	c8 01       	movw	r24, r16
     562:	b7 01       	movw	r22, r14
     564:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN6Nrf24l8setRADDREPh>
	 * Set the payload length to sizeof(unsigned long) the
	 * return type of millis().
	 *
	 * NB: payload on client and server must be the same.
	 */
	Mirf.payload = payload;
     568:	d0 92 bb 01 	sts	0x01BB, r13
	 *
	 * Mirf.channel = 10;
	 *
	 * NB: Make sure channel is legal in your area.
	 */
	Mirf.channel = channel;
     56c:	c0 92 ba 01 	sts	0x01BA, r12

	Mirf.config();
     570:	c8 01       	movw	r24, r16
     572:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN6Nrf24l6configEv>
}
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	08 95       	ret

00000584 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
     584:	9c b5       	in	r25, 0x2c	; 44
     586:	93 7f       	andi	r25, 0xF3	; 243
     588:	98 2b       	or	r25, r24
     58a:	9c bd       	out	0x2c, r25	; 44
}
     58c:	08 95       	ret

0000058e <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     58e:	2c b5       	in	r18, 0x2c	; 44
     590:	38 2f       	mov	r19, r24
     592:	33 70       	andi	r19, 0x03	; 3
     594:	2c 7f       	andi	r18, 0xFC	; 252
     596:	32 2b       	or	r19, r18
     598:	3c bd       	out	0x2c, r19	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
     59a:	2d b5       	in	r18, 0x2d	; 45
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	95 95       	asr	r25
     5a0:	87 95       	ror	r24
     5a2:	95 95       	asr	r25
     5a4:	87 95       	ror	r24
     5a6:	81 70       	andi	r24, 0x01	; 1
     5a8:	2e 7f       	andi	r18, 0xFE	; 254
     5aa:	82 2b       	or	r24, r18
     5ac:	8d bd       	out	0x2d, r24	; 45
}
     5ae:	08 95       	ret

000005b0 <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  pinMode(SCK, OUTPUT);
     5b0:	8d e0       	ldi	r24, 0x0D	; 13
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <pinMode>
  pinMode(MOSI, OUTPUT);
     5b8:	8b e0       	ldi	r24, 0x0B	; 11
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <pinMode>
  pinMode(SS, OUTPUT);
     5c0:	8a e0       	ldi	r24, 0x0A	; 10
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <pinMode>
  
  digitalWrite(SCK, LOW);
     5c8:	8d e0       	ldi	r24, 0x0D	; 13
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
  digitalWrite(MOSI, LOW);
     5d0:	8b e0       	ldi	r24, 0x0B	; 11
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
  digitalWrite(SS, HIGH);
     5d8:	8a e0       	ldi	r24, 0x0A	; 10
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     5e0:	8c b5       	in	r24, 0x2c	; 44
     5e2:	80 61       	ori	r24, 0x10	; 16
     5e4:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     5e6:	8c b5       	in	r24, 0x2c	; 44
     5e8:	80 64       	ori	r24, 0x40	; 64
     5ea:	8c bd       	out	0x2c, r24	; 44
}
     5ec:	08 95       	ret

000005ee <_ZN6Nrf24l12transferSyncEPhS0_h>:

void Nrf24l::transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len){
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	6c 01       	movw	r12, r24
     602:	7a 01       	movw	r14, r20
     604:	b2 2e       	mov	r11, r18
     606:	8b 01       	movw	r16, r22
     608:	c0 e0       	ldi	r28, 0x00	; 0
     60a:	d0 e0       	ldi	r29, 0x00	; 0
     60c:	13 c0       	rjmp	.+38     	; 0x634 <_ZN6Nrf24l12transferSyncEPhS0_h+0x46>
	uint8_t i;
	for(i = 0;i < len;i++){
		datain[i] = spi->transfer(dataout[i]);
     60e:	f6 01       	movw	r30, r12
     610:	a6 81       	ldd	r26, Z+6	; 0x06
     612:	b7 81       	ldd	r27, Z+7	; 0x07
     614:	ed 91       	ld	r30, X+
     616:	fc 91       	ld	r31, X
     618:	11 97       	sbiw	r26, 0x01	; 1
     61a:	01 90       	ld	r0, Z+
     61c:	f0 81       	ld	r31, Z
     61e:	e0 2d       	mov	r30, r0
     620:	cd 01       	movw	r24, r26
     622:	d8 01       	movw	r26, r16
     624:	6d 91       	ld	r22, X+
     626:	8d 01       	movw	r16, r26
     628:	09 95       	icall
     62a:	f7 01       	movw	r30, r14
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	80 83       	st	Z, r24
     632:	21 96       	adiw	r28, 0x01	; 1
	spi = NULL;
}

void Nrf24l::transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
     634:	cb 15       	cp	r28, r11
     636:	58 f3       	brcs	.-42     	; 0x60e <_ZN6Nrf24l12transferSyncEPhS0_h+0x20>
		datain[i] = spi->transfer(dataout[i]);
	}
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	08 95       	ret

0000064c <_ZN6Nrf24l12transmitSyncEPhh>:

void Nrf24l::transmitSync(uint8_t *dataout,uint8_t len){
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	7c 01       	movw	r14, r24
     65a:	04 2f       	mov	r16, r20
     65c:	eb 01       	movw	r28, r22
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	0e c0       	rjmp	.+28     	; 0x67e <_ZN6Nrf24l12transmitSyncEPhh+0x32>
	uint8_t i;
	for(i = 0;i < len;i++){
		spi->transfer(dataout[i]);
     662:	d7 01       	movw	r26, r14
     664:	16 96       	adiw	r26, 0x06	; 6
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	17 97       	sbiw	r26, 0x07	; 7
     66c:	a0 81       	ld	r26, Z
     66e:	b1 81       	ldd	r27, Z+1	; 0x01
     670:	2d 91       	ld	r18, X+
     672:	3c 91       	ld	r19, X
     674:	cf 01       	movw	r24, r30
     676:	69 91       	ld	r22, Y+
     678:	f9 01       	movw	r30, r18
     67a:	09 95       	icall
	}
}

void Nrf24l::transmitSync(uint8_t *dataout,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
     67c:	1f 5f       	subi	r17, 0xFF	; 255
     67e:	10 17       	cp	r17, r16
     680:	80 f3       	brcs	.-32     	; 0x662 <_ZN6Nrf24l12transmitSyncEPhh+0x16>
		spi->transfer(dataout[i]);
	}
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	08 95       	ret

00000690 <_GLOBAL__I_Mirf>:
// Defines for setting the MiRF registers for transmitting or receiving mode

Nrf24l Mirf = Nrf24l();

Nrf24l::Nrf24l(){
	pwrPin = 5;
     690:	85 e0       	ldi	r24, 0x05	; 5
     692:	80 93 b9 01 	sts	0x01B9, r24
	cePin = 8;
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	80 93 b7 01 	sts	0x01B7, r24
	csnPin = 7;
     69c:	87 e0       	ldi	r24, 0x07	; 7
     69e:	80 93 b8 01 	sts	0x01B8, r24
	channel = 1;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 ba 01 	sts	0x01BA, r24
	payload = 16;
     6a8:	80 e1       	ldi	r24, 0x10	; 16
     6aa:	80 93 bb 01 	sts	0x01BB, r24
	spi = NULL;
     6ae:	10 92 bd 01 	sts	0x01BD, r1
     6b2:	10 92 bc 01 	sts	0x01BC, r1
}

void Nrf24l::powerDown(){
	ceLow();
	configRegister(CONFIG, mirf_CONFIG );
}
     6b6:	08 95       	ret

000006b8 <_ZN6Nrf24l6csnLowEv>:
void Nrf24l::csnHi(){
	digitalWrite(csnPin,HIGH);
}

void Nrf24l::csnLow(){
	digitalWrite(csnPin,LOW);
     6b8:	fc 01       	movw	r30, r24
     6ba:	82 81       	ldd	r24, Z+2	; 0x02
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
}
     6c2:	08 95       	ret

000006c4 <_ZN6Nrf24l5csnHiEv>:
void Nrf24l::ceLow(){
	digitalWrite(cePin,LOW);
}

void Nrf24l::csnHi(){
	digitalWrite(csnPin,HIGH);
     6c4:	fc 01       	movw	r30, r24
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
}
     6ce:	08 95       	ret

000006d0 <_ZN6Nrf24l7flushRxEv>:
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) );
	ceHi();
	configRegister(STATUS,(1 << TX_DS) | (1 << MAX_RT)); 
}

void Nrf24l::flushRx(){
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	8c 01       	movw	r16, r24
    csnLow();
     6d6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer( FLUSH_RX );
     6da:	f8 01       	movw	r30, r16
     6dc:	a6 81       	ldd	r26, Z+6	; 0x06
     6de:	b7 81       	ldd	r27, Z+7	; 0x07
     6e0:	ed 91       	ld	r30, X+
     6e2:	fc 91       	ld	r31, X
     6e4:	11 97       	sbiw	r26, 0x01	; 1
     6e6:	01 90       	ld	r0, Z+
     6e8:	f0 81       	ld	r31, Z
     6ea:	e0 2d       	mov	r30, r0
     6ec:	cd 01       	movw	r24, r26
     6ee:	62 ee       	ldi	r22, 0xE2	; 226
     6f0:	09 95       	icall
    csnHi();
     6f2:	c8 01       	movw	r24, r16
     6f4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6Nrf24l5csnHiEv>
}
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <_ZN6Nrf24l13writeRegisterEhPhh>:
    spi->transfer(R_REGISTER | (REGISTER_MASK & reg));
    transferSync(value,value,len);
    csnHi();
}

void Nrf24l::writeRegister(uint8_t reg, uint8_t * value, uint8_t len) 
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	8c 01       	movw	r16, r24
     70c:	f6 2e       	mov	r15, r22
     70e:	6a 01       	movw	r12, r20
     710:	e2 2e       	mov	r14, r18
// Writes an array of bytes into inte the MiRF registers.
{
    csnLow();
     712:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(W_REGISTER | (REGISTER_MASK & reg));
     716:	f8 01       	movw	r30, r16
     718:	a6 81       	ldd	r26, Z+6	; 0x06
     71a:	b7 81       	ldd	r27, Z+7	; 0x07
     71c:	ed 91       	ld	r30, X+
     71e:	fc 91       	ld	r31, X
     720:	11 97       	sbiw	r26, 0x01	; 1
     722:	8f e1       	ldi	r24, 0x1F	; 31
     724:	f8 22       	and	r15, r24
     726:	80 e2       	ldi	r24, 0x20	; 32
     728:	f8 2a       	or	r15, r24
     72a:	01 90       	ld	r0, Z+
     72c:	f0 81       	ld	r31, Z
     72e:	e0 2d       	mov	r30, r0
     730:	cd 01       	movw	r24, r26
     732:	6f 2d       	mov	r22, r15
     734:	09 95       	icall
    transmitSync(value,len);
     736:	c8 01       	movw	r24, r16
     738:	b6 01       	movw	r22, r12
     73a:	4e 2d       	mov	r20, r14
     73c:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN6Nrf24l12transmitSyncEPhh>
    csnHi();
     740:	c8 01       	movw	r24, r16
     742:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6Nrf24l5csnHiEv>
}
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	cf 90       	pop	r12
     752:	08 95       	ret

00000754 <_ZN6Nrf24l8setTADDREPh>:
	ceLow();
	writeRegister(RX_ADDR_P1,adr,mirf_ADDR_LEN);
	ceHi();
}

void Nrf24l::setTADDR(uint8_t * adr)
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	8c 01       	movw	r16, r24
     75e:	7b 01       	movw	r14, r22
{
	/*
	 * RX_ADDR_P0 must be set to the sending addr for auto ack to work.
	 */

	writeRegister(RX_ADDR_P0,adr,mirf_ADDR_LEN);
     760:	6a e0       	ldi	r22, 0x0A	; 10
     762:	a7 01       	movw	r20, r14
     764:	25 e0       	ldi	r18, 0x05	; 5
     766:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN6Nrf24l13writeRegisterEhPhh>
	writeRegister(TX_ADDR,adr,mirf_ADDR_LEN);
     76a:	c8 01       	movw	r24, r16
     76c:	60 e1       	ldi	r22, 0x10	; 16
     76e:	a7 01       	movw	r20, r14
     770:	25 e0       	ldi	r18, 0x05	; 5
     772:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN6Nrf24l13writeRegisterEhPhh>
}
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	08 95       	ret

00000780 <_ZN6Nrf24l12readRegisterEhPhh>:
    spi->transfer(W_REGISTER | (REGISTER_MASK & reg));
    spi->transfer(value);
    csnHi();
}

void Nrf24l::readRegister(uint8_t reg, uint8_t * value, uint8_t len)
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	8c 01       	movw	r16, r24
     78e:	f6 2e       	mov	r15, r22
     790:	6a 01       	movw	r12, r20
     792:	e2 2e       	mov	r14, r18
// Reads an array of bytes from the given start position in the MiRF registers.
{
    csnLow();
     794:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(R_REGISTER | (REGISTER_MASK & reg));
     798:	f8 01       	movw	r30, r16
     79a:	a6 81       	ldd	r26, Z+6	; 0x06
     79c:	b7 81       	ldd	r27, Z+7	; 0x07
     79e:	ed 91       	ld	r30, X+
     7a0:	fc 91       	ld	r31, X
     7a2:	11 97       	sbiw	r26, 0x01	; 1
     7a4:	8f e1       	ldi	r24, 0x1F	; 31
     7a6:	f8 22       	and	r15, r24
     7a8:	01 90       	ld	r0, Z+
     7aa:	f0 81       	ld	r31, Z
     7ac:	e0 2d       	mov	r30, r0
     7ae:	cd 01       	movw	r24, r26
     7b0:	6f 2d       	mov	r22, r15
     7b2:	09 95       	icall
    transferSync(value,value,len);
     7b4:	c8 01       	movw	r24, r16
     7b6:	b6 01       	movw	r22, r12
     7b8:	a6 01       	movw	r20, r12
     7ba:	2e 2d       	mov	r18, r14
     7bc:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN6Nrf24l12transferSyncEPhS0_h>
    csnHi();
     7c0:	c8 01       	movw	r24, r16
     7c2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6Nrf24l5csnHiEv>
}
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	08 95       	ret

000007d4 <_ZN6Nrf24l9getStatusEv>:
		return true;
	}
	return false;
}

uint8_t Nrf24l::getStatus(){
     7d4:	df 93       	push	r29
     7d6:	cf 93       	push	r28
     7d8:	0f 92       	push	r0
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;
	readRegister(STATUS,&rv,1);
     7de:	67 e0       	ldi	r22, 0x07	; 7
     7e0:	ae 01       	movw	r20, r28
     7e2:	4f 5f       	subi	r20, 0xFF	; 255
     7e4:	5f 4f       	sbci	r21, 0xFF	; 255
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN6Nrf24l12readRegisterEhPhh>
	return rv;
}
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	0f 90       	pop	r0
     7f0:	cf 91       	pop	r28
     7f2:	df 91       	pop	r29
     7f4:	08 95       	ret

000007f6 <_ZN6Nrf24l11rxFifoEmptyEv>:
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
    return !rxFifoEmpty();
}

extern bool Nrf24l::rxFifoEmpty(){
     7f6:	df 93       	push	r29
     7f8:	cf 93       	push	r28
     7fa:	0f 92       	push	r0
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
	uint8_t fifoStatus;

	readRegister(FIFO_STATUS,&fifoStatus,sizeof(fifoStatus));
     800:	67 e1       	ldi	r22, 0x17	; 23
     802:	ae 01       	movw	r20, r28
     804:	4f 5f       	subi	r20, 0xFF	; 255
     806:	5f 4f       	sbci	r21, 0xFF	; 255
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN6Nrf24l12readRegisterEhPhh>
     80e:	89 81       	ldd	r24, Y+1	; 0x01
	return (fifoStatus & (1 << RX_EMPTY));
}
     810:	81 70       	andi	r24, 0x01	; 1
     812:	0f 90       	pop	r0
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <_ZN6Nrf24l9dataReadyEv>:

	writeRegister(RX_ADDR_P0,adr,mirf_ADDR_LEN);
	writeRegister(TX_ADDR,adr,mirf_ADDR_LEN);
}

extern bool Nrf24l::dataReady() 
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	ec 01       	movw	r28, r24
// Checks if data is available for reading
{
    // See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = getStatus();
     820:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN6Nrf24l9getStatusEv>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
     824:	86 ff       	sbrs	r24, 6
     826:	02 c0       	rjmp	.+4      	; 0x82c <_ZN6Nrf24l9dataReadyEv+0x12>
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	05 c0       	rjmp	.+10     	; 0x836 <_ZN6Nrf24l9dataReadyEv+0x1c>
    return !rxFifoEmpty();
     82c:	ce 01       	movw	r24, r28
     82e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN6Nrf24l11rxFifoEmptyEv>
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	98 27       	eor	r25, r24
}
     836:	89 2f       	mov	r24, r25
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <_ZN6Nrf24l14configRegisterEhh>:
    // So if we're going to clear RX_DR here, we need to check the RX FIFO
    // in the dataReady() function
    configRegister(STATUS,(1<<RX_DR));   // Reset status register
}

void Nrf24l::configRegister(uint8_t reg, uint8_t value)
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	7c 01       	movw	r14, r24
     848:	16 2f       	mov	r17, r22
     84a:	04 2f       	mov	r16, r20
// Clocks only one byte into the given MiRF register
{
    csnLow();
     84c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(W_REGISTER | (REGISTER_MASK & reg));
     850:	f7 01       	movw	r30, r14
     852:	a6 81       	ldd	r26, Z+6	; 0x06
     854:	b7 81       	ldd	r27, Z+7	; 0x07
     856:	ed 91       	ld	r30, X+
     858:	fc 91       	ld	r31, X
     85a:	11 97       	sbiw	r26, 0x01	; 1
     85c:	1f 71       	andi	r17, 0x1F	; 31
     85e:	10 62       	ori	r17, 0x20	; 32
     860:	01 90       	ld	r0, Z+
     862:	f0 81       	ld	r31, Z
     864:	e0 2d       	mov	r30, r0
     866:	cd 01       	movw	r24, r26
     868:	61 2f       	mov	r22, r17
     86a:	09 95       	icall
    spi->transfer(value);
     86c:	f7 01       	movw	r30, r14
     86e:	a6 81       	ldd	r26, Z+6	; 0x06
     870:	b7 81       	ldd	r27, Z+7	; 0x07
     872:	ed 91       	ld	r30, X+
     874:	fc 91       	ld	r31, X
     876:	11 97       	sbiw	r26, 0x01	; 1
     878:	01 90       	ld	r0, Z+
     87a:	f0 81       	ld	r31, Z
     87c:	e0 2d       	mov	r30, r0
     87e:	cd 01       	movw	r24, r26
     880:	60 2f       	mov	r22, r16
     882:	09 95       	icall
    csnHi();
     884:	c7 01       	movw	r24, r14
     886:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6Nrf24l5csnHiEv>
}
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <_ZN6Nrf24l9powerUpTxEv>:
    csnLow();
    spi->transfer( FLUSH_RX );
    csnHi();
}

void Nrf24l::powerUpTx(){
     894:	fc 01       	movw	r30, r24
	PTX = 1;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 83       	st	Z, r24
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (0<<PRIM_RX) ) );
     89a:	cf 01       	movw	r24, r30
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	4a e0       	ldi	r20, 0x0A	; 10
     8a0:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN6Nrf24l14configRegisterEhh>
}
     8a4:	08 95       	ret

000008a6 <_ZN6Nrf24l7getDataEPh>:
	return (fifoStatus & (1 << RX_EMPTY));
}



extern void Nrf24l::getData(uint8_t * data) 
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	8c 01       	movw	r16, r24
     8b0:	7b 01       	movw	r14, r22
// Reads payload bytes into data array
{
    csnLow();                               // Pull down chip select
     8b2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer( R_RX_PAYLOAD );            // Send cmd to read rx payload
     8b6:	f8 01       	movw	r30, r16
     8b8:	a6 81       	ldd	r26, Z+6	; 0x06
     8ba:	b7 81       	ldd	r27, Z+7	; 0x07
     8bc:	ed 91       	ld	r30, X+
     8be:	fc 91       	ld	r31, X
     8c0:	11 97       	sbiw	r26, 0x01	; 1
     8c2:	01 90       	ld	r0, Z+
     8c4:	f0 81       	ld	r31, Z
     8c6:	e0 2d       	mov	r30, r0
     8c8:	cd 01       	movw	r24, r26
     8ca:	61 e6       	ldi	r22, 0x61	; 97
     8cc:	09 95       	icall
    transferSync(data,data,payload); // Read payload
     8ce:	c8 01       	movw	r24, r16
     8d0:	b7 01       	movw	r22, r14
     8d2:	a7 01       	movw	r20, r14
     8d4:	f8 01       	movw	r30, r16
     8d6:	25 81       	ldd	r18, Z+5	; 0x05
     8d8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN6Nrf24l12transferSyncEPhS0_h>
    csnHi();                               // Pull up chip select
     8dc:	c8 01       	movw	r24, r16
     8de:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6Nrf24l5csnHiEv>
    //  2) clear RX_DR IRQ, 3) read FIFO_STATUS to check if there are more 
    //  payloads available in RX FIFO, 4) if there are more data in RX FIFO,
    //  repeat from step 1)."
    // So if we're going to clear RX_DR here, we need to check the RX FIFO
    // in the dataReady() function
    configRegister(STATUS,(1<<RX_DR));   // Reset status register
     8e2:	c8 01       	movw	r24, r16
     8e4:	67 e0       	ldi	r22, 0x07	; 7
     8e6:	40 e4       	ldi	r20, 0x40	; 64
     8e8:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN6Nrf24l14configRegisterEhh>
}
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	08 95       	ret

000008f6 <_ZN6Nrf24l5ceLowEv>:
void Nrf24l::ceHi(){
	digitalWrite(cePin,HIGH);
}

void Nrf24l::ceLow(){
	digitalWrite(cePin,LOW);
     8f6:	fc 01       	movw	r30, r24
     8f8:	81 81       	ldd	r24, Z+1	; 0x01
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
}
     900:	08 95       	ret

00000902 <_ZN6Nrf24l4ceHiEv>:
	digitalWrite(pwrPin,HIGH);
	delay(10);
}

void Nrf24l::ceHi(){
	digitalWrite(cePin,HIGH);
     902:	fc 01       	movw	r30, r24
     904:	81 81       	ldd	r24, Z+1	; 0x01
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
}
     90c:	08 95       	ret

0000090e <_ZN6Nrf24l9powerUpRxEv>:
	uint8_t rv;
	readRegister(STATUS,&rv,1);
	return rv;
}

void Nrf24l::powerUpRx(){
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	8c 01       	movw	r16, r24
	PTX = 0;
     914:	fc 01       	movw	r30, r24
     916:	10 82       	st	Z, r1
	ceLow();
     918:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN6Nrf24l5ceLowEv>
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) );
     91c:	c8 01       	movw	r24, r16
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	4b e0       	ldi	r20, 0x0B	; 11
     922:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN6Nrf24l14configRegisterEhh>
	ceHi();
     926:	c8 01       	movw	r24, r16
     928:	0e 94 81 04 	call	0x902	; 0x902 <_ZN6Nrf24l4ceHiEv>
	configRegister(STATUS,(1 << TX_DS) | (1 << MAX_RT)); 
     92c:	c8 01       	movw	r24, r16
     92e:	67 e0       	ldi	r22, 0x07	; 7
     930:	40 e3       	ldi	r20, 0x30	; 48
     932:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN6Nrf24l14configRegisterEhh>
}
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	08 95       	ret

0000093c <_ZN6Nrf24l9isSendingEv>:
 * Test if chip is still sending.
 * When sending has finished return chip to listening.
 *
 */

bool Nrf24l::isSending(){
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
	uint8_t status;
	if(PTX){
     942:	88 81       	ld	r24, Y
     944:	88 23       	and	r24, r24
     946:	59 f0       	breq	.+22     	; 0x95e <_ZN6Nrf24l9isSendingEv+0x22>
		status = getStatus();
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN6Nrf24l9getStatusEv>
	    	
		/*
		 *  if sending successful (TX_DS) or max retries exceded (MAX_RT).
		 */

		if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
     94e:	80 73       	andi	r24, 0x30	; 48
     950:	11 f4       	brne	.+4      	; 0x956 <_ZN6Nrf24l9isSendingEv+0x1a>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	04 c0       	rjmp	.+8      	; 0x95e <_ZN6Nrf24l9isSendingEv+0x22>
			powerUpRx();
     956:	ce 01       	movw	r24, r28
     958:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN6Nrf24l9powerUpRxEv>
     95c:	80 e0       	ldi	r24, 0x00	; 0
		}

		return true;
	}
	return false;
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <_ZN6Nrf24l6configEv>:
    spi->begin();

}


void Nrf24l::config() 
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	8c 01       	movw	r16, r24
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
// NB: channel and payload must be set now.
{
    // Set RF channel
	configRegister(RF_CH,channel);
     96a:	65 e0       	ldi	r22, 0x05	; 5
     96c:	f8 01       	movw	r30, r16
     96e:	44 81       	ldd	r20, Z+4	; 0x04
     970:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN6Nrf24l14configRegisterEhh>

    // Set length of incoming payload 
	configRegister(RX_PW_P0, payload);
     974:	c8 01       	movw	r24, r16
     976:	61 e1       	ldi	r22, 0x11	; 17
     978:	f8 01       	movw	r30, r16
     97a:	45 81       	ldd	r20, Z+5	; 0x05
     97c:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN6Nrf24l14configRegisterEhh>
	configRegister(RX_PW_P1, payload);
     980:	c8 01       	movw	r24, r16
     982:	62 e1       	ldi	r22, 0x12	; 18
     984:	f8 01       	movw	r30, r16
     986:	45 81       	ldd	r20, Z+5	; 0x05
     988:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN6Nrf24l14configRegisterEhh>

    // Start receiver 
    powerUpRx();
     98c:	c8 01       	movw	r24, r16
     98e:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN6Nrf24l9powerUpRxEv>
    flushRx();
     992:	c8 01       	movw	r24, r16
     994:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_ZN6Nrf24l7flushRxEv>
}
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	08 95       	ret

0000099e <_ZN6Nrf24l4sendEPh>:
    transmitSync(value,len);
    csnHi();
}


void Nrf24l::send(uint8_t * value) 
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	8b 01       	movw	r16, r22
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    uint8_t status;
    status = getStatus();
     9aa:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN6Nrf24l9getStatusEv>
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <_ZN6Nrf24l4sendEPh+0x20>

    while (PTX) {
	    status = getStatus();
     9b0:	ce 01       	movw	r24, r28
     9b2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN6Nrf24l9getStatusEv>

	    if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
     9b6:	80 73       	andi	r24, 0x30	; 48
     9b8:	11 f0       	breq	.+4      	; 0x9be <_ZN6Nrf24l4sendEPh+0x20>
		    PTX = 0;
     9ba:	18 82       	st	Y, r1
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <_ZN6Nrf24l4sendEPh+0x26>
// amount of bytes as configured as payload on the receiver.
{
    uint8_t status;
    status = getStatus();

    while (PTX) {
     9be:	88 81       	ld	r24, Y
     9c0:	88 23       	and	r24, r24
     9c2:	b1 f7       	brne	.-20     	; 0x9b0 <_ZN6Nrf24l4sendEPh+0x12>
		    PTX = 0;
		    break;
	    }
    }                  // Wait until last paket is send

    ceLow();
     9c4:	ce 01       	movw	r24, r28
     9c6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN6Nrf24l5ceLowEv>
    
    powerUpTx();       // Set to transmitter mode , Power up
     9ca:	ce 01       	movw	r24, r28
     9cc:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN6Nrf24l9powerUpTxEv>
    
    csnLow();                    // Pull down chip select
     9d0:	ce 01       	movw	r24, r28
     9d2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer( FLUSH_TX );     // Write cmd to flush tx fifo
     9d6:	ae 81       	ldd	r26, Y+6	; 0x06
     9d8:	bf 81       	ldd	r27, Y+7	; 0x07
     9da:	ed 91       	ld	r30, X+
     9dc:	fc 91       	ld	r31, X
     9de:	11 97       	sbiw	r26, 0x01	; 1
     9e0:	01 90       	ld	r0, Z+
     9e2:	f0 81       	ld	r31, Z
     9e4:	e0 2d       	mov	r30, r0
     9e6:	cd 01       	movw	r24, r26
     9e8:	61 ee       	ldi	r22, 0xE1	; 225
     9ea:	09 95       	icall
    csnHi();                    // Pull up chip select
     9ec:	ce 01       	movw	r24, r28
     9ee:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6Nrf24l5csnHiEv>
    
    csnLow();                    // Pull down chip select
     9f2:	ce 01       	movw	r24, r28
     9f4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer( W_TX_PAYLOAD ); // Write cmd to write payload
     9f8:	ae 81       	ldd	r26, Y+6	; 0x06
     9fa:	bf 81       	ldd	r27, Y+7	; 0x07
     9fc:	ed 91       	ld	r30, X+
     9fe:	fc 91       	ld	r31, X
     a00:	11 97       	sbiw	r26, 0x01	; 1
     a02:	01 90       	ld	r0, Z+
     a04:	f0 81       	ld	r31, Z
     a06:	e0 2d       	mov	r30, r0
     a08:	cd 01       	movw	r24, r26
     a0a:	60 ea       	ldi	r22, 0xA0	; 160
     a0c:	09 95       	icall
    transmitSync(value,payload);   // Write payload
     a0e:	ce 01       	movw	r24, r28
     a10:	b8 01       	movw	r22, r16
     a12:	4d 81       	ldd	r20, Y+5	; 0x05
     a14:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN6Nrf24l12transmitSyncEPhh>
    csnHi();                    // Pull up chip select
     a18:	ce 01       	movw	r24, r28
     a1a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6Nrf24l5csnHiEv>

    ceHi();                     // Start transmission
     a1e:	ce 01       	movw	r24, r28
     a20:	0e 94 81 04 	call	0x902	; 0x902 <_ZN6Nrf24l4ceHiEv>
}
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret

00000a2e <_ZN6Nrf24l8setRADDREPh>:
    // Start receiver 
    powerUpRx();
    flushRx();
}

void Nrf24l::setRADDR(uint8_t * adr) 
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	8c 01       	movw	r16, r24
     a38:	7b 01       	movw	r14, r22
// Sets the receiving address
{
	ceLow();
     a3a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN6Nrf24l5ceLowEv>
	writeRegister(RX_ADDR_P1,adr,mirf_ADDR_LEN);
     a3e:	c8 01       	movw	r24, r16
     a40:	6b e0       	ldi	r22, 0x0B	; 11
     a42:	a7 01       	movw	r20, r14
     a44:	25 e0       	ldi	r18, 0x05	; 5
     a46:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN6Nrf24l13writeRegisterEhPhh>
	ceHi();
     a4a:	c8 01       	movw	r24, r16
     a4c:	0e 94 81 04 	call	0x902	; 0x902 <_ZN6Nrf24l4ceHiEv>
}
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	08 95       	ret

00000a5a <_ZN6Nrf24l10powerResetEv>:
void Nrf24l::powerUpTx(){
	PTX = 1;
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (0<<PRIM_RX) ) );
}

void Nrf24l::powerReset(){
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	8c 01       	movw	r16, r24
	digitalWrite(pwrPin, LOW);
     a60:	fc 01       	movw	r30, r24
     a62:	83 81       	ldd	r24, Z+3	; 0x03
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
	delay(10);
     a6a:	6a e0       	ldi	r22, 0x0A	; 10
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay>
	digitalWrite(pwrPin,HIGH);
     a76:	f8 01       	movw	r30, r16
     a78:	83 81       	ldd	r24, Z+3	; 0x03
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <digitalWrite>
	delay(10);
     a80:	6a e0       	ldi	r22, 0x0A	; 10
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay>
}
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <_ZN6Nrf24l4initEv>:
		spi->transfer(dataout[i]);
	}
}


void Nrf24l::init() 
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	8c 01       	movw	r16, r24
// Initializes pins to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{   
	pinMode(pwrPin, OUTPUT);
     a98:	fc 01       	movw	r30, r24
     a9a:	83 81       	ldd	r24, Z+3	; 0x03
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <pinMode>
    pinMode(cePin,OUTPUT);
     aa2:	f8 01       	movw	r30, r16
     aa4:	81 81       	ldd	r24, Z+1	; 0x01
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <pinMode>
    pinMode(csnPin,OUTPUT);
     aac:	f8 01       	movw	r30, r16
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <pinMode>
    powerReset();
     ab6:	c8 01       	movw	r24, r16
     ab8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN6Nrf24l10powerResetEv>

    ceLow();
     abc:	c8 01       	movw	r24, r16
     abe:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN6Nrf24l5ceLowEv>
    csnHi();
     ac2:	c8 01       	movw	r24, r16
     ac4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6Nrf24l5csnHiEv>

    // Initialize spi module
    spi->begin();
     ac8:	f8 01       	movw	r30, r16
     aca:	a6 81       	ldd	r26, Z+6	; 0x06
     acc:	b7 81       	ldd	r27, Z+7	; 0x07
     ace:	ed 91       	ld	r30, X+
     ad0:	fc 91       	ld	r31, X
     ad2:	11 97       	sbiw	r26, 0x01	; 1
     ad4:	02 80       	ldd	r0, Z+2	; 0x02
     ad6:	f3 81       	ldd	r31, Z+3	; 0x03
     ad8:	e0 2d       	mov	r30, r0
     ada:	cd 01       	movw	r24, r26
     adc:	09 95       	icall

}
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	08 95       	ret

00000ae4 <_ZN21MirfHardwareSpiDriver8transferEh>:
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     ae4:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
     ae6:	0d b4       	in	r0, 0x2d	; 45
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <_ZN21MirfHardwareSpiDriver8transferEh+0x2>
    ;
  return SPDR;
     aec:	8e b5       	in	r24, 0x2e	; 46
#include "MirfHardwareSpiDriver.h"
uint8_t MirfHardwareSpiDriver::transfer(uint8_t data){
	return SPI.transfer(data);
}
     aee:	08 95       	ret

00000af0 <_ZN21MirfHardwareSpiDriver3endEv>:
	SPI.setDataMode(SPI_MODE0);
	SPI.setClockDivider(SPI_2XCLOCK_MASK);
}

void MirfHardwareSpiDriver::end(){
}
     af0:	08 95       	ret

00000af2 <_GLOBAL__I__ZN21MirfHardwareSpiDriver8transferEh>:
#ifndef __MIRF_HARDWARE_SPI_DRIVER
#define __MIRF_HARDWARE_SPI_DRIVER 

#include "SPI.h"

class MirfHardwareSpiDriver : public MirfSpiDriver {
     af2:	80 ea       	ldi	r24, 0xA0	; 160
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	90 93 bf 01 	sts	0x01BF, r25
     afa:	80 93 be 01 	sts	0x01BE, r24

MirfHardwareSpiDriver MirfHardwareSpi;
     afe:	08 95       	ret

00000b00 <_ZN21MirfHardwareSpiDriver5beginEv>:
uint8_t MirfHardwareSpiDriver::transfer(uint8_t data){
	return SPI.transfer(data);
}

void MirfHardwareSpiDriver::begin(){
	SPI.begin();
     b00:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN8SPIClass5beginEv>
	SPI.setDataMode(SPI_MODE0);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN8SPIClass11setDataModeEh>
	SPI.setClockDivider(SPI_2XCLOCK_MASK);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN8SPIClass15setClockDividerEh>
}
     b10:	08 95       	ret

00000b12 <_Z19waitSerialAvailablei>:

/**
 * Waits for timeout*10 milliseconds for Serial data to be available.
 * Return 0 if serial data not available or 1 if it is.
 */
int waitSerialAvailable(int timeout) {
     b12:	06 c0       	rjmp	.+12     	; 0xb20 <_Z19waitSerialAvailablei+0xe>
	while ( !Serial.available() ) {
		timeout++;
		if (timeout > timeout) {
			return 0;
		}
		delay(10);
     b14:	6a e0       	ldi	r22, 0x0A	; 10
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay>
/**
 * Waits for timeout*10 milliseconds for Serial data to be available.
 * Return 0 if serial data not available or 1 if it is.
 */
int waitSerialAvailable(int timeout) {
	while ( !Serial.available() ) {
     b20:	8a e4       	ldi	r24, 0x4A	; 74
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_ZN14HardwareSerial9availableEv>
     b28:	89 2b       	or	r24, r25
     b2a:	a1 f3       	breq	.-24     	; 0xb14 <_Z19waitSerialAvailablei+0x2>
			return 0;
		}
		delay(10);
	}
	return 1;
}
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	08 95       	ret

00000b32 <_Z18readIntSerialBytesv>:

// Reads an integer given in bytes
unsigned int readIntSerialBytes() {
     b32:	1f 93       	push	r17
	    byte b[2];
	    unsigned int iVal;
	} value;

	// Wait for input
	if ( !waitSerialAvailable(10) )
     b34:	8a e0       	ldi	r24, 0x0A	; 10
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 89 05 	call	0xb12	; 0xb12 <_Z19waitSerialAvailablei>
     b3c:	89 2b       	or	r24, r25
     b3e:	91 f0       	breq	.+36     	; 0xb64 <_Z18readIntSerialBytesv+0x32>
		return -1;

	value.b[0] = Serial.read();
     b40:	8a e4       	ldi	r24, 0x4A	; 74
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN14HardwareSerial4readEv>
     b48:	18 2f       	mov	r17, r24

	if ( !waitSerialAvailable(10) )
     b4a:	8a e0       	ldi	r24, 0x0A	; 10
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 89 05 	call	0xb12	; 0xb12 <_Z19waitSerialAvailablei>
     b52:	89 2b       	or	r24, r25
     b54:	39 f0       	breq	.+14     	; 0xb64 <_Z18readIntSerialBytesv+0x32>
		return -1;

	value.b[1] = Serial.read();
     b56:	8a e4       	ldi	r24, 0x4A	; 74
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN14HardwareSerial4readEv>

	return value.iVal;
     b5e:	21 2f       	mov	r18, r17
     b60:	38 2f       	mov	r19, r24
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <_Z18readIntSerialBytesv+0x36>
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	3f ef       	ldi	r19, 0xFF	; 255
}
     b68:	c9 01       	movw	r24, r18
     b6a:	1f 91       	pop	r17
     b6c:	08 95       	ret

00000b6e <setup>:
	radio_send_wait(&packet, COPTER_ADDR);
}

//The setup function is called once at startup of the sketch
void setup() {
	Serial.begin(38400);
     b6e:	8a e4       	ldi	r24, 0x4A	; 74
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	56 e9       	ldi	r21, 0x96	; 150
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_ZN14HardwareSerial5beginEm>

	// init radio address, channel, payload size
	radio_init(BASE_ADDR, RADIO_CHANNEL, RADIO_PAYLOAD);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	6c e6       	ldi	r22, 0x6C	; 108
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	4a e1       	ldi	r20, 0x1A	; 26
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z10radio_initPcii>

}
     b8e:	08 95       	ret

00000b90 <_Z9commitPidv>:
	Serial.print(packet.vars.i);
	Serial.print(" D: ");
	Serial.println(packet.vars.d);
}

void commitPid() {
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	6a 97       	sbiw	r28, 0x1a	; 26
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
	radio_packet packet;

	Serial.println("Committing PID values to EEPROM.");
     ba4:	8a e4       	ldi	r24, 0x4A	; 74
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	66 e0       	ldi	r22, 0x06	; 6
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN5Print7printlnEPKc>
	packet.vars.flag = COMMIT_PID;
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	8a 8f       	std	Y+26, r24	; 0x1a
	radio_send_wait(&packet, COPTER_ADDR);
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	67 e2       	ldi	r22, 0x27	; 39
     bba:	71 e0       	ldi	r23, 0x01	; 1
     bbc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z15radio_send_waitP12radio_packetPc>
}
     bc0:	6a 96       	adiw	r28, 0x1a	; 26
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <_Z11readPidDatah>:
		packet.vars.flag = WRITE_PID;
		radio_send_wait(&packet, COPTER_ADDR);
	}
}

void readPidData(uint8_t pidIndex) {
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	6a 97       	sbiw	r28, 0x1a	; 26
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61

	radio_packet packet;

	// Request read from index
	packet.vars.pidIndex = pidIndex;
     bea:	89 8f       	std	Y+25, r24	; 0x19
	packet.vars.flag = READ_PID;
     bec:	1a 8e       	std	Y+26, r1	; 0x1a
	radio_send_wait(&packet, COPTER_ADDR);
     bee:	8e 01       	movw	r16, r28
     bf0:	0f 5f       	subi	r16, 0xFF	; 255
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	c8 01       	movw	r24, r16
     bf6:	67 e2       	ldi	r22, 0x27	; 39
     bf8:	71 e0       	ldi	r23, 0x01	; 1
     bfa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z15radio_send_waitP12radio_packetPc>

	if ( !radio_recv(1000, &packet) ) {
     bfe:	88 ee       	ldi	r24, 0xE8	; 232
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	b8 01       	movw	r22, r16
     c04:	0e 94 28 02 	call	0x450	; 0x450 <_Z10radio_recvjP12radio_packet>
     c08:	89 2b       	or	r24, r25
     c0a:	39 f4       	brne	.+14     	; 0xc1a <_Z11readPidDatah+0x48>
		Serial.println("No response received.");
     c0c:	8a e4       	ldi	r24, 0x4A	; 74
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	6d e2       	ldi	r22, 0x2D	; 45
     c12:	71 e0       	ldi	r23, 0x01	; 1
     c14:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN5Print7printlnEPKc>
     c18:	3d c0       	rjmp	.+122    	; 0xc94 <_Z11readPidDatah+0xc2>
		return;
	}

	// Print PID Data
	Serial.print("Index: ");
     c1a:	8a e4       	ldi	r24, 0x4A	; 74
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	63 e4       	ldi	r22, 0x43	; 67
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	Serial.print(packet.vars.pidIndex);
     c26:	8a e4       	ldi	r24, 0x4A	; 74
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	69 8d       	ldd	r22, Y+25	; 0x19
     c2c:	4a e0       	ldi	r20, 0x0A	; 10
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN5Print5printEhi>
	Serial.print(" P: ");
     c34:	8a e4       	ldi	r24, 0x4A	; 74
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	6b e4       	ldi	r22, 0x4B	; 75
     c3a:	71 e0       	ldi	r23, 0x01	; 1
     c3c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	Serial.print(packet.vars.p);
     c40:	4d 85       	ldd	r20, Y+13	; 0x0d
     c42:	5e 85       	ldd	r21, Y+14	; 0x0e
     c44:	6f 85       	ldd	r22, Y+15	; 0x0f
     c46:	78 89       	ldd	r23, Y+16	; 0x10
     c48:	8a e4       	ldi	r24, 0x4A	; 74
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	22 e0       	ldi	r18, 0x02	; 2
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN5Print5printEdi>
	Serial.print(" I: ");
     c54:	8a e4       	ldi	r24, 0x4A	; 74
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	60 e5       	ldi	r22, 0x50	; 80
     c5a:	71 e0       	ldi	r23, 0x01	; 1
     c5c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	Serial.print(packet.vars.i);
     c60:	49 89       	ldd	r20, Y+17	; 0x11
     c62:	5a 89       	ldd	r21, Y+18	; 0x12
     c64:	6b 89       	ldd	r22, Y+19	; 0x13
     c66:	7c 89       	ldd	r23, Y+20	; 0x14
     c68:	8a e4       	ldi	r24, 0x4A	; 74
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	22 e0       	ldi	r18, 0x02	; 2
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN5Print5printEdi>
	Serial.print(" D: ");
     c74:	8a e4       	ldi	r24, 0x4A	; 74
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	65 e5       	ldi	r22, 0x55	; 85
     c7a:	71 e0       	ldi	r23, 0x01	; 1
     c7c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	Serial.println(packet.vars.d);
     c80:	4d 89       	ldd	r20, Y+21	; 0x15
     c82:	5e 89       	ldd	r21, Y+22	; 0x16
     c84:	6f 89       	ldd	r22, Y+23	; 0x17
     c86:	78 8d       	ldd	r23, Y+24	; 0x18
     c88:	8a e4       	ldi	r24, 0x4A	; 74
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	22 e0       	ldi	r18, 0x02	; 2
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN5Print7printlnEdi>
}
     c94:	6a 96       	adiw	r28, 0x1a	; 26
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	08 95       	ret

00000caa <_Z18sendControllerDatav>:
	value.b[1] = Serial.read();

	return value.iVal;
}

void sendControllerData() {
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	6a 97       	sbiw	r28, 0x1a	; 26
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	00 e0       	ldi	r16, 0x00	; 0
     cc8:	10 e0       	ldi	r17, 0x00	; 0
	radio_packet packet;
	int i, command;

	// Get all values
	for(i = 0; i < 6; i++) {
		if ( !waitSerialAvailable(10) )
     cca:	8a e0       	ldi	r24, 0x0A	; 10
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 89 05 	call	0xb12	; 0xb12 <_Z19waitSerialAvailablei>
     cd2:	89 2b       	or	r24, r25
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <_Z18sendControllerDatav+0x2e>
     cd6:	6e c0       	rjmp	.+220    	; 0xdb4 <_Z18sendControllerDatav+0x10a>
			return;

		command = Serial.read() - '0';
     cd8:	8a e4       	ldi	r24, 0x4A	; 74
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN14HardwareSerial4readEv>
     ce0:	c0 97       	sbiw	r24, 0x30	; 48

		// Check if it is out of phase
		if (command < 0 || command > 5)
     ce2:	86 30       	cpi	r24, 0x06	; 6
     ce4:	91 05       	cpc	r25, r1
     ce6:	08 f0       	brcs	.+2      	; 0xcea <_Z18sendControllerDatav+0x40>
     ce8:	65 c0       	rjmp	.+202    	; 0xdb4 <_Z18sendControllerDatav+0x10a>
			return;

		switch (command) {
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	91 05       	cpc	r25, r1
     cee:	e9 f0       	breq	.+58     	; 0xd2a <_Z18sendControllerDatav+0x80>
     cf0:	83 30       	cpi	r24, 0x03	; 3
     cf2:	91 05       	cpc	r25, r1
     cf4:	34 f4       	brge	.+12     	; 0xd02 <_Z18sendControllerDatav+0x58>
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	71 f0       	breq	.+28     	; 0xd16 <_Z18sendControllerDatav+0x6c>
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	09 f0       	breq	.+2      	; 0xd00 <_Z18sendControllerDatav+0x56>
     cfe:	5a c0       	rjmp	.+180    	; 0xdb4 <_Z18sendControllerDatav+0x10a>
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <_Z18sendControllerDatav+0x76>
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	91 05       	cpc	r25, r1
     d06:	d9 f0       	breq	.+54     	; 0xd3e <_Z18sendControllerDatav+0x94>
     d08:	84 30       	cpi	r24, 0x04	; 4
     d0a:	91 05       	cpc	r25, r1
     d0c:	9c f0       	brlt	.+38     	; 0xd34 <_Z18sendControllerDatav+0x8a>
     d0e:	05 97       	sbiw	r24, 0x05	; 5
     d10:	09 f0       	breq	.+2      	; 0xd14 <_Z18sendControllerDatav+0x6a>
     d12:	50 c0       	rjmp	.+160    	; 0xdb4 <_Z18sendControllerDatav+0x10a>
     d14:	19 c0       	rjmp	.+50     	; 0xd48 <_Z18sendControllerDatav+0x9e>
		case XAXIS:
			packet.vars.receiverCommand[0] = readIntSerialBytes();
     d16:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z18readIntSerialBytesv>
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	18 c0       	rjmp	.+48     	; 0xd50 <_Z18sendControllerDatav+0xa6>
			break;
		case YAXIS:
			packet.vars.receiverCommand[1] = readIntSerialBytes();
     d20:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z18readIntSerialBytesv>
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	13 c0       	rjmp	.+38     	; 0xd50 <_Z18sendControllerDatav+0xa6>
			break;
		case ZAXIS:
			packet.vars.receiverCommand[2] = readIntSerialBytes();
     d2a:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z18readIntSerialBytesv>
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
     d32:	0e c0       	rjmp	.+28     	; 0xd50 <_Z18sendControllerDatav+0xa6>
			break;
		case THROTTLE:
			packet.vars.receiverCommand[3] = readIntSerialBytes();
     d34:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z18readIntSerialBytesv>
     d38:	98 87       	std	Y+8, r25	; 0x08
     d3a:	8f 83       	std	Y+7, r24	; 0x07
     d3c:	09 c0       	rjmp	.+18     	; 0xd50 <_Z18sendControllerDatav+0xa6>
			break;
		case MODE:
			packet.vars.receiverCommand[4] = readIntSerialBytes();
     d3e:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z18readIntSerialBytesv>
     d42:	9a 87       	std	Y+10, r25	; 0x0a
     d44:	89 87       	std	Y+9, r24	; 0x09
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <_Z18sendControllerDatav+0xa6>
			break;
		case AUX:
			packet.vars.receiverCommand[5] = readIntSerialBytes();
     d48:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z18readIntSerialBytesv>
     d4c:	9c 87       	std	Y+12, r25	; 0x0c
     d4e:	8b 87       	std	Y+11, r24	; 0x0b
void sendControllerData() {
	radio_packet packet;
	int i, command;

	// Get all values
	for(i = 0; i < 6; i++) {
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	06 30       	cpi	r16, 0x06	; 6
     d56:	11 05       	cpc	r17, r1
     d58:	09 f0       	breq	.+2      	; 0xd5c <_Z18sendControllerDatav+0xb2>
     d5a:	b7 cf       	rjmp	.-146    	; 0xcca <_Z18sendControllerDatav+0x20>
			return;
		}
	}

	// This is not a PID calibration packet
	packet.vars.flag = CONTROL_DATA;
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	8a 8f       	std	Y+26, r24	; 0x1a

	radio_send_wait(&packet, COPTER_ADDR);
     d60:	8e 01       	movw	r16, r28
     d62:	0f 5f       	subi	r16, 0xFF	; 255
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	c8 01       	movw	r24, r16
     d68:	67 e2       	ldi	r22, 0x27	; 39
     d6a:	71 e0       	ldi	r23, 0x01	; 1
     d6c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z15radio_send_waitP12radio_packetPc>

	if (debug == 1) {
     d70:	80 91 c0 01 	lds	r24, 0x01C0
     d74:	90 91 c1 01 	lds	r25, 0x01C1
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	e1 f4       	brne	.+56     	; 0xdb4 <_Z18sendControllerDatav+0x10a>
		for (i = 0; i < 6; i++) {
     d7c:	8d e0       	ldi	r24, 0x0D	; 13
     d7e:	e8 2e       	mov	r14, r24
     d80:	f1 2c       	mov	r15, r1
     d82:	ec 0e       	add	r14, r28
     d84:	fd 1e       	adc	r15, r29
			Serial.print(packet.vars.receiverCommand[i]);
     d86:	f8 01       	movw	r30, r16
     d88:	61 91       	ld	r22, Z+
     d8a:	71 91       	ld	r23, Z+
     d8c:	8f 01       	movw	r16, r30
     d8e:	8a e4       	ldi	r24, 0x4A	; 74
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	4a e0       	ldi	r20, 0x0A	; 10
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	0e 94 98 0b 	call	0x1730	; 0x1730 <_ZN5Print5printEii>
			Serial.print(" ");
     d9a:	8a e4       	ldi	r24, 0x4A	; 74
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	6a e5       	ldi	r22, 0x5A	; 90
     da0:	71 e0       	ldi	r23, 0x01	; 1
     da2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	packet.vars.flag = CONTROL_DATA;

	radio_send_wait(&packet, COPTER_ADDR);

	if (debug == 1) {
		for (i = 0; i < 6; i++) {
     da6:	0e 15       	cp	r16, r14
     da8:	1f 05       	cpc	r17, r15
     daa:	69 f7       	brne	.-38     	; 0xd86 <_Z18sendControllerDatav+0xdc>
			Serial.print(packet.vars.receiverCommand[i]);
			Serial.print(" ");
		}
		Serial.println();
     dac:	8a e4       	ldi	r24, 0x4A	; 74
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	0e 94 9f 0a 	call	0x153e	; 0x153e <_ZN5Print7printlnEv>
	}
}
     db4:	6a 96       	adiw	r28, 0x1a	; 26
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	08 95       	ret

00000dce <_Z15readFloatSerialv>:
#define ZDAMPENING_PID_IDX          9

int debug = 0;

// Used to read floating point values from the serial port
float readFloatSerial() {
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	2f 97       	sbiw	r28, 0x0f	; 15
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
  #define SERIALFLOATSIZE 15
  byte index = 0;
  byte timeout = 0;
  char data[SERIALFLOATSIZE] = "";
     dea:	19 82       	std	Y+1, r1	; 0x01
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	1b 82       	std	Y+3, r1	; 0x03
     df0:	1c 82       	std	Y+4, r1	; 0x04
     df2:	fe 01       	movw	r30, r28
     df4:	35 96       	adiw	r30, 0x05	; 5
     df6:	8b e0       	ldi	r24, 0x0B	; 11
     df8:	df 01       	movw	r26, r30
     dfa:	1d 92       	st	X+, r1
     dfc:	8a 95       	dec	r24
     dfe:	e9 f7       	brne	.-6      	; 0xdfa <_Z15readFloatSerialv+0x2c>
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	00 e0       	ldi	r16, 0x00	; 0
    if (Serial.available() == 0) {
      delay(10);
      timeout++;
    }
    else {
      data[index] = Serial.read();
     e04:	7e 01       	movw	r14, r28
     e06:	08 94       	sec
     e08:	e1 1c       	adc	r14, r1
     e0a:	f1 1c       	adc	r15, r1
  byte index = 0;
  byte timeout = 0;
  char data[SERIALFLOATSIZE] = "";

  do {
    if (Serial.available() == 0) {
     e0c:	8a e4       	ldi	r24, 0x4A	; 74
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_ZN14HardwareSerial9availableEv>
     e14:	89 2b       	or	r24, r25
     e16:	41 f4       	brne	.+16     	; 0xe28 <_Z15readFloatSerialv+0x5a>
      delay(10);
     e18:	6a e0       	ldi	r22, 0x0A	; 10
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay>
      timeout++;
     e24:	0f 5f       	subi	r16, 0xFF	; 255
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <_Z15readFloatSerialv+0x6e>
    }
    else {
      data[index] = Serial.read();
     e28:	8a e4       	ldi	r24, 0x4A	; 74
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN14HardwareSerial4readEv>
     e30:	f7 01       	movw	r30, r14
     e32:	e1 0f       	add	r30, r17
     e34:	f1 1d       	adc	r31, r1
     e36:	80 83       	st	Z, r24
      timeout = 0;
      index++;
     e38:	1f 5f       	subi	r17, 0xFF	; 255
     e3a:	00 e0       	ldi	r16, 0x00	; 0
  #define SERIALFLOATSIZE 15
  byte index = 0;
  byte timeout = 0;
  char data[SERIALFLOATSIZE] = "";

  do {
     e3c:	11 23       	and	r17, r17
     e3e:	31 f0       	breq	.+12     	; 0xe4c <_Z15readFloatSerialv+0x7e>
     e40:	fe 01       	movw	r30, r28
     e42:	e1 0f       	add	r30, r17
     e44:	f1 1d       	adc	r31, r1
     e46:	80 81       	ld	r24, Z
     e48:	8b 33       	cpi	r24, 0x3B	; 59
     e4a:	21 f0       	breq	.+8      	; 0xe54 <_Z15readFloatSerialv+0x86>
     e4c:	0a 30       	cpi	r16, 0x0A	; 10
     e4e:	10 f4       	brcc	.+4      	; 0xe54 <_Z15readFloatSerialv+0x86>
     e50:	1e 30       	cpi	r17, 0x0E	; 14
     e52:	e0 f2       	brcs	.-72     	; 0xe0c <_Z15readFloatSerialv+0x3e>
      data[index] = Serial.read();
      timeout = 0;
      index++;
    }
  } while ((index == 0 || data[index-1] != ';') && (timeout < 10) && (index < sizeof(data)-1));
  data[index] = '\0';
     e54:	ce 01       	movw	r24, r28
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	fc 01       	movw	r30, r24
     e5a:	e1 0f       	add	r30, r17
     e5c:	f1 1d       	adc	r31, r1
     e5e:	10 82       	st	Z, r1

  return atof(data);
     e60:	0e 94 ac 00 	call	0x158	; 0x158 <atof>
}
     e64:	2f 96       	adiw	r28, 0x0f	; 15
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	08 95       	ret

00000e7e <_Z11sendPidDatav>:
		}
		Serial.println();
	}
}

void sendPidData() {
     e7e:	2f 92       	push	r2
     e80:	3f 92       	push	r3
     e82:	4f 92       	push	r4
     e84:	5f 92       	push	r5
     e86:	6f 92       	push	r6
     e88:	7f 92       	push	r7
     e8a:	8f 92       	push	r8
     e8c:	9f 92       	push	r9
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	6b 97       	sbiw	r28, 0x1b	; 27
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
	float p, i, d, command;
	uint8_t pidIndex;
	radio_packet packet;

	pidIndex = int(readFloatSerial());
     eb2:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z15readFloatSerialv>
     eb6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fixsfsi>
     eba:	7b 01       	movw	r14, r22
     ebc:	8c 01       	movw	r16, r24
     ebe:	6b 8f       	std	Y+27, r22	; 0x1b
	p = readFloatSerial();
     ec0:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z15readFloatSerialv>
     ec4:	1b 01       	movw	r2, r22
     ec6:	2c 01       	movw	r4, r24
	i = readFloatSerial();
     ec8:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z15readFloatSerialv>
     ecc:	3b 01       	movw	r6, r22
     ece:	4c 01       	movw	r8, r24
	d = readFloatSerial();
     ed0:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z15readFloatSerialv>
     ed4:	5b 01       	movw	r10, r22
     ed6:	6c 01       	movw	r12, r24

	Serial.print("Index: ");
     ed8:	8a e4       	ldi	r24, 0x4A	; 74
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	63 e4       	ldi	r22, 0x43	; 67
     ede:	71 e0       	ldi	r23, 0x01	; 1
     ee0:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	Serial.print(pidIndex);
     ee4:	8a e4       	ldi	r24, 0x4A	; 74
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	6e 2d       	mov	r22, r14
     eea:	4a e0       	ldi	r20, 0x0A	; 10
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN5Print5printEhi>
	Serial.print(" P: ");
     ef2:	8a e4       	ldi	r24, 0x4A	; 74
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	6b e4       	ldi	r22, 0x4B	; 75
     ef8:	71 e0       	ldi	r23, 0x01	; 1
     efa:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	Serial.print(p);
     efe:	8a e4       	ldi	r24, 0x4A	; 74
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	b2 01       	movw	r22, r4
     f04:	a1 01       	movw	r20, r2
     f06:	22 e0       	ldi	r18, 0x02	; 2
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN5Print5printEdi>
	Serial.print(" I: ");
     f0e:	8a e4       	ldi	r24, 0x4A	; 74
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	60 e5       	ldi	r22, 0x50	; 80
     f14:	71 e0       	ldi	r23, 0x01	; 1
     f16:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	Serial.print(i);
     f1a:	8a e4       	ldi	r24, 0x4A	; 74
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	b4 01       	movw	r22, r8
     f20:	a3 01       	movw	r20, r6
     f22:	22 e0       	ldi	r18, 0x02	; 2
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN5Print5printEdi>
	Serial.print(" D: ");
     f2a:	8a e4       	ldi	r24, 0x4A	; 74
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	65 e5       	ldi	r22, 0x55	; 85
     f30:	71 e0       	ldi	r23, 0x01	; 1
     f32:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN5Print5printEPKc>
	Serial.println(d);
     f36:	8a e4       	ldi	r24, 0x4A	; 74
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	b6 01       	movw	r22, r12
     f3c:	a5 01       	movw	r20, r10
     f3e:	22 e0       	ldi	r18, 0x02	; 2
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN5Print7printlnEdi>

	Serial.println("Set these values? (y/n)");
     f46:	8a e4       	ldi	r24, 0x4A	; 74
     f48:	92 e0       	ldi	r25, 0x02	; 2
     f4a:	6c e5       	ldi	r22, 0x5C	; 92
     f4c:	71 e0       	ldi	r23, 0x01	; 1
     f4e:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN5Print7printlnEPKc>
	while (!Serial.available());
     f52:	8a e4       	ldi	r24, 0x4A	; 74
     f54:	92 e0       	ldi	r25, 0x02	; 2
     f56:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_ZN14HardwareSerial9availableEv>
     f5a:	89 2b       	or	r24, r25
     f5c:	d1 f3       	breq	.-12     	; 0xf52 <_Z11sendPidDatav+0xd4>
	command = Serial.read();
     f5e:	8a e4       	ldi	r24, 0x4A	; 74
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN14HardwareSerial4readEv>
     f66:	aa 27       	eor	r26, r26
     f68:	97 fd       	sbrc	r25, 7
     f6a:	a0 95       	com	r26
     f6c:	ba 2f       	mov	r27, r26
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__floatsisf>
     f76:	7b 01       	movw	r14, r22
     f78:	8c 01       	movw	r16, r24
	if (command == 'n') {
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	4c ed       	ldi	r20, 0xDC	; 220
     f80:	52 e4       	ldi	r21, 0x42	; 66
     f82:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__cmpsf2>
     f86:	88 23       	and	r24, r24
     f88:	39 f4       	brne	.+14     	; 0xf98 <_Z11sendPidDatav+0x11a>
		Serial.println("Calibration canceled.");
     f8a:	8a e4       	ldi	r24, 0x4A	; 74
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	64 e7       	ldi	r22, 0x74	; 116
     f90:	71 e0       	ldi	r23, 0x01	; 1
     f92:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN5Print7printlnEPKc>
     f96:	26 c0       	rjmp	.+76     	; 0xfe4 <_Z11sendPidDatav+0x166>

	} else if (command == 'y') {
     f98:	c8 01       	movw	r24, r16
     f9a:	b7 01       	movw	r22, r14
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	42 ef       	ldi	r20, 0xF2	; 242
     fa2:	52 e4       	ldi	r21, 0x42	; 66
     fa4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__cmpsf2>
     fa8:	88 23       	and	r24, r24
     faa:	e1 f4       	brne	.+56     	; 0xfe4 <_Z11sendPidDatav+0x166>
		// Put data into packet and send
		Serial.println("Sending values.");
     fac:	8a e4       	ldi	r24, 0x4A	; 74
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	6a e8       	ldi	r22, 0x8A	; 138
     fb2:	71 e0       	ldi	r23, 0x01	; 1
     fb4:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN5Print7printlnEPKc>
		packet.vars.pidIndex = pidIndex;
     fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fba:	89 8f       	std	Y+25, r24	; 0x19
		packet.vars.p = p;
     fbc:	2d 86       	std	Y+13, r2	; 0x0d
     fbe:	3e 86       	std	Y+14, r3	; 0x0e
     fc0:	4f 86       	std	Y+15, r4	; 0x0f
     fc2:	58 8a       	std	Y+16, r5	; 0x10
		packet.vars.i = i;
     fc4:	69 8a       	std	Y+17, r6	; 0x11
     fc6:	7a 8a       	std	Y+18, r7	; 0x12
     fc8:	8b 8a       	std	Y+19, r8	; 0x13
     fca:	9c 8a       	std	Y+20, r9	; 0x14
		packet.vars.d = d;
     fcc:	ad 8a       	std	Y+21, r10	; 0x15
     fce:	be 8a       	std	Y+22, r11	; 0x16
     fd0:	cf 8a       	std	Y+23, r12	; 0x17
     fd2:	d8 8e       	std	Y+24, r13	; 0x18
		packet.vars.flag = WRITE_PID;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	8a 8f       	std	Y+26, r24	; 0x1a
		radio_send_wait(&packet, COPTER_ADDR);
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	67 e2       	ldi	r22, 0x27	; 39
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z15radio_send_waitP12radio_packetPc>
	}
}
     fe4:	6b 96       	adiw	r28, 0x1b	; 27
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	9f 90       	pop	r9
    1006:	8f 90       	pop	r8
    1008:	7f 90       	pop	r7
    100a:	6f 90       	pop	r6
    100c:	5f 90       	pop	r5
    100e:	4f 90       	pop	r4
    1010:	3f 90       	pop	r3
    1012:	2f 90       	pop	r2
    1014:	08 95       	ret

00001016 <loop>:
	radio_init(BASE_ADDR, RADIO_CHANNEL, RADIO_PAYLOAD);

}

// The loop function is called in an endless loop
void loop() {
    1016:	1f 93       	push	r17
	int command, i;

	if (!Serial.available()) {
    1018:	8a e4       	ldi	r24, 0x4A	; 74
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_ZN14HardwareSerial9availableEv>
    1020:	89 2b       	or	r24, r25
    1022:	09 f4       	brne	.+2      	; 0x1026 <loop+0x10>
    1024:	51 c0       	rjmp	.+162    	; 0x10c8 <loop+0xb2>
		return;
	}

	// What kind of data is to be sent? Read first character.
	if ((command = Serial.read()) == 'c') { 		// send controller commands
    1026:	8a e4       	ldi	r24, 0x4A	; 74
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN14HardwareSerial4readEv>
    102e:	83 36       	cpi	r24, 0x63	; 99
    1030:	91 05       	cpc	r25, r1
    1032:	19 f4       	brne	.+6      	; 0x103a <loop+0x24>
		sendControllerData();
    1034:	0e 94 55 06 	call	0xcaa	; 0xcaa <_Z18sendControllerDatav>
    1038:	47 c0       	rjmp	.+142    	; 0x10c8 <loop+0xb2>
	} else if (command == 'p') { 					// set PID
    103a:	80 37       	cpi	r24, 0x70	; 112
    103c:	91 05       	cpc	r25, r1
    103e:	19 f4       	brne	.+6      	; 0x1046 <loop+0x30>
		sendPidData();
    1040:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_Z11sendPidDatav>
    1044:	41 c0       	rjmp	.+130    	; 0x10c8 <loop+0xb2>
	} else if (command == 'r') { 					// read PID
    1046:	82 37       	cpi	r24, 0x72	; 114
    1048:	91 05       	cpc	r25, r1
    104a:	41 f5       	brne	.+80     	; 0x109c <loop+0x86>
		if ( !waitSerialAvailable(10) )
    104c:	8a e0       	ldi	r24, 0x0A	; 10
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 89 05 	call	0xb12	; 0xb12 <_Z19waitSerialAvailablei>
    1054:	89 2b       	or	r24, r25
    1056:	c1 f1       	breq	.+112    	; 0x10c8 <loop+0xb2>
			return;
		if (Serial.peek() == 'a') { 				// read all PID values
    1058:	8a e4       	ldi	r24, 0x4A	; 74
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN14HardwareSerial4peekEv>
    1060:	81 36       	cpi	r24, 0x61	; 97
    1062:	91 05       	cpc	r25, r1
    1064:	91 f4       	brne	.+36     	; 0x108a <loop+0x74>
			Serial.read();
    1066:	8a e4       	ldi	r24, 0x4A	; 74
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN14HardwareSerial4readEv>
    106e:	10 e0       	ldi	r17, 0x00	; 0
			for (i=0; i< 10; i++) {
				delay(20);
    1070:	64 e1       	ldi	r22, 0x14	; 20
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay>
				readPidData(i);
    107c:	81 2f       	mov	r24, r17
    107e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_Z11readPidDatah>
    1082:	1f 5f       	subi	r17, 0xFF	; 255
	} else if (command == 'r') { 					// read PID
		if ( !waitSerialAvailable(10) )
			return;
		if (Serial.peek() == 'a') { 				// read all PID values
			Serial.read();
			for (i=0; i< 10; i++) {
    1084:	1a 30       	cpi	r17, 0x0A	; 10
    1086:	a1 f7       	brne	.-24     	; 0x1070 <loop+0x5a>
    1088:	1f c0       	rjmp	.+62     	; 0x10c8 <loop+0xb2>
				delay(20);
				readPidData(i);
			}
			return;
		} else { 									// read specific PID value
			readPidData( int(readFloatSerial()) );
    108a:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z15readFloatSerialv>
    108e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fixsfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_Z11readPidDatah>
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <loop+0xb2>
		}
	} else if (command == 's') { 					// save current PID values to EEPROM
    109c:	83 37       	cpi	r24, 0x73	; 115
    109e:	91 05       	cpc	r25, r1
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <loop+0x92>
		commitPid();
    10a2:	0e 94 c8 05 	call	0xb90	; 0xb90 <_Z9commitPidv>
    10a6:	10 c0       	rjmp	.+32     	; 0x10c8 <loop+0xb2>
	} else if (command == '#') {
    10a8:	83 97       	sbiw	r24, 0x23	; 35
    10aa:	71 f4       	brne	.+28     	; 0x10c8 <loop+0xb2>
		debug = !debug;
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	80 91 c0 01 	lds	r24, 0x01C0
    10b4:	90 91 c1 01 	lds	r25, 0x01C1
    10b8:	89 2b       	or	r24, r25
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <loop+0xaa>
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	30 93 c1 01 	sts	0x01C1, r19
    10c4:	20 93 c0 01 	sts	0x01C0, r18
	}
}
    10c8:	1f 91       	pop	r17
    10ca:	08 95       	ret

000010cc <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    10cc:	08 95       	ret

000010ce <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	2f 93       	push	r18
    10da:	3f 93       	push	r19
    10dc:	4f 93       	push	r20
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    10e6:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    10ea:	20 91 02 02 	lds	r18, 0x0202
    10ee:	30 91 03 02 	lds	r19, 0x0203
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
    10f6:	2f 73       	andi	r18, 0x3F	; 63
    10f8:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    10fa:	80 91 04 02 	lds	r24, 0x0204
    10fe:	90 91 05 02 	lds	r25, 0x0205
    1102:	28 17       	cp	r18, r24
    1104:	39 07       	cpc	r19, r25
    1106:	59 f0       	breq	.+22     	; 0x111e <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    1108:	e0 91 02 02 	lds	r30, 0x0202
    110c:	f0 91 03 02 	lds	r31, 0x0203
    1110:	ee 53       	subi	r30, 0x3E	; 62
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	40 83       	st	Z, r20
    buffer->head = i;
    1116:	30 93 03 02 	sts	0x0203, r19
    111a:	20 93 02 02 	sts	0x0202, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1136:	e0 91 56 02 	lds	r30, 0x0256
    113a:	f0 91 57 02 	lds	r31, 0x0257
    113e:	e0 5c       	subi	r30, 0xC0	; 192
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	81 91       	ld	r24, Z+
    1144:	91 91       	ld	r25, Z+
    1146:	20 81       	ld	r18, Z
    1148:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    114a:	82 1b       	sub	r24, r18
    114c:	93 0b       	sbc	r25, r19
    114e:	8f 73       	andi	r24, 0x3F	; 63
    1150:	90 70       	andi	r25, 0x00	; 0
    1152:	89 2b       	or	r24, r25
    1154:	11 f0       	breq	.+4      	; 0x115a <_Z14serialEventRunv+0x24>
    1156:	0e 94 66 08 	call	0x10cc	; 0x10cc <_Z11serialEventv>
    115a:	08 95       	ret

0000115c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    117e:	20 91 46 02 	lds	r18, 0x0246
    1182:	30 91 47 02 	lds	r19, 0x0247
    1186:	80 91 48 02 	lds	r24, 0x0248
    118a:	90 91 49 02 	lds	r25, 0x0249
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	31 f4       	brne	.+12     	; 0x11a0 <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1194:	80 91 c1 00 	lds	r24, 0x00C1
    1198:	8f 7d       	andi	r24, 0xDF	; 223
    119a:	80 93 c1 00 	sts	0x00C1, r24
    119e:	16 c0       	rjmp	.+44     	; 0x11cc <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    11a0:	e0 91 48 02 	lds	r30, 0x0248
    11a4:	f0 91 49 02 	lds	r31, 0x0249
    11a8:	ea 5f       	subi	r30, 0xFA	; 250
    11aa:	fd 4f       	sbci	r31, 0xFD	; 253
    11ac:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    11ae:	80 91 48 02 	lds	r24, 0x0248
    11b2:	90 91 49 02 	lds	r25, 0x0249
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	60 e4       	ldi	r22, 0x40	; 64
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	0e 94 1b 10 	call	0x2036	; 0x2036 <__divmodhi4>
    11c0:	90 93 49 02 	sts	0x0249, r25
    11c4:	80 93 48 02 	sts	0x0248, r24
	
  #if defined(UDR0)
    UDR0 = c;
    11c8:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	ec 01       	movw	r28, r24
    1202:	7a 01       	movw	r14, r20
    1204:	8b 01       	movw	r16, r22
    1206:	dd 24       	eor	r13, r13
    1208:	40 30       	cpi	r20, 0x00	; 0
    120a:	81 ee       	ldi	r24, 0xE1	; 225
    120c:	58 07       	cpc	r21, r24
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	68 07       	cpc	r22, r24
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	78 07       	cpc	r23, r24
    1216:	11 f0       	breq	.+4      	; 0x121c <_ZN14HardwareSerial5beginEm+0x2e>
    1218:	dd 24       	eor	r13, r13
    121a:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	a9 2e       	mov	r10, r25
    1220:	b1 2c       	mov	r11, r1
    1222:	ec 89       	ldd	r30, Y+20	; 0x14
    1224:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    1226:	dd 20       	and	r13, r13
    1228:	69 f0       	breq	.+26     	; 0x1244 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    122a:	c5 01       	movw	r24, r10
    122c:	0e 8c       	ldd	r0, Y+30	; 0x1e
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <_ZN14HardwareSerial5beginEm+0x46>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <_ZN14HardwareSerial5beginEm+0x42>
    1238:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	79 e0       	ldi	r23, 0x09	; 9
    123e:	8d e3       	ldi	r24, 0x3D	; 61
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	05 c0       	rjmp	.+10     	; 0x124e <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1244:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1246:	60 e8       	ldi	r22, 0x80	; 128
    1248:	74 e8       	ldi	r23, 0x84	; 132
    124a:	8e e1       	ldi	r24, 0x1E	; 30
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a8 01       	movw	r20, r16
    1250:	97 01       	movw	r18, r14
    1252:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodsi4>
    1256:	21 50       	subi	r18, 0x01	; 1
    1258:	30 40       	sbci	r19, 0x00	; 0
    125a:	40 40       	sbci	r20, 0x00	; 0
    125c:	50 40       	sbci	r21, 0x00	; 0
    125e:	56 95       	lsr	r21
    1260:	47 95       	ror	r20
    1262:	37 95       	ror	r19
    1264:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1266:	80 e1       	ldi	r24, 0x10	; 16
    1268:	20 30       	cpi	r18, 0x00	; 0
    126a:	38 07       	cpc	r19, r24
    126c:	20 f0       	brcs	.+8      	; 0x1276 <_ZN14HardwareSerial5beginEm+0x88>
    126e:	dd 20       	and	r13, r13
    1270:	11 f0       	breq	.+4      	; 0x1276 <_ZN14HardwareSerial5beginEm+0x88>
    1272:	dd 24       	eor	r13, r13
    1274:	d6 cf       	rjmp	.-84     	; 0x1222 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1276:	e8 89       	ldd	r30, Y+16	; 0x10
    1278:	f9 89       	ldd	r31, Y+17	; 0x11
    127a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    127c:	ea 89       	ldd	r30, Y+18	; 0x12
    127e:	fb 89       	ldd	r31, Y+19	; 0x13
    1280:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1282:	ee 89       	ldd	r30, Y+22	; 0x16
    1284:	ff 89       	ldd	r31, Y+23	; 0x17
    1286:	40 81       	ld	r20, Z
    1288:	21 e0       	ldi	r18, 0x01	; 1
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	c9 01       	movw	r24, r18
    128e:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <_ZN14HardwareSerial5beginEm+0xa8>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <_ZN14HardwareSerial5beginEm+0xa4>
    129a:	48 2b       	or	r20, r24
    129c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    129e:	ee 89       	ldd	r30, Y+22	; 0x16
    12a0:	ff 89       	ldd	r31, Y+23	; 0x17
    12a2:	40 81       	ld	r20, Z
    12a4:	c9 01       	movw	r24, r18
    12a6:	0b 8c       	ldd	r0, Y+27	; 0x1b
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <_ZN14HardwareSerial5beginEm+0xc0>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <_ZN14HardwareSerial5beginEm+0xbc>
    12b2:	48 2b       	or	r20, r24
    12b4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    12b6:	ee 89       	ldd	r30, Y+22	; 0x16
    12b8:	ff 89       	ldd	r31, Y+23	; 0x17
    12ba:	40 81       	ld	r20, Z
    12bc:	c9 01       	movw	r24, r18
    12be:	0c 8c       	ldd	r0, Y+28	; 0x1c
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <_ZN14HardwareSerial5beginEm+0xd8>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <_ZN14HardwareSerial5beginEm+0xd4>
    12ca:	48 2b       	or	r20, r24
    12cc:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    12ce:	ee 89       	ldd	r30, Y+22	; 0x16
    12d0:	ff 89       	ldd	r31, Y+23	; 0x17
    12d2:	80 81       	ld	r24, Z
    12d4:	0d 8c       	ldd	r0, Y+29	; 0x1d
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <_ZN14HardwareSerial5beginEm+0xee>
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <_ZN14HardwareSerial5beginEm+0xea>
    12e0:	20 95       	com	r18
    12e2:	28 23       	and	r18, r24
    12e4:	20 83       	st	Z, r18
}
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	bf 90       	pop	r11
    12f6:	af 90       	pop	r10
    12f8:	08 95       	ret

000012fa <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    12fa:	dc 01       	movw	r26, r24
    12fc:	1c 96       	adiw	r26, 0x0c	; 12
    12fe:	ed 91       	ld	r30, X+
    1300:	fc 91       	ld	r31, X
    1302:	1d 97       	sbiw	r26, 0x0d	; 13
    1304:	e0 5c       	subi	r30, 0xC0	; 192
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	21 91       	ld	r18, Z+
    130a:	31 91       	ld	r19, Z+
    130c:	80 81       	ld	r24, Z
    130e:	91 81       	ldd	r25, Z+1	; 0x01
    1310:	28 1b       	sub	r18, r24
    1312:	39 0b       	sbc	r19, r25
    1314:	2f 73       	andi	r18, 0x3F	; 63
    1316:	30 70       	andi	r19, 0x00	; 0
}
    1318:	c9 01       	movw	r24, r18
    131a:	08 95       	ret

0000131c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    131c:	dc 01       	movw	r26, r24
    131e:	1c 96       	adiw	r26, 0x0c	; 12
    1320:	ed 91       	ld	r30, X+
    1322:	fc 91       	ld	r31, X
    1324:	1d 97       	sbiw	r26, 0x0d	; 13
    1326:	e0 5c       	subi	r30, 0xC0	; 192
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	20 81       	ld	r18, Z
    132c:	31 81       	ldd	r19, Z+1	; 0x01
    132e:	e0 54       	subi	r30, 0x40	; 64
    1330:	f0 40       	sbci	r31, 0x00	; 0
    1332:	df 01       	movw	r26, r30
    1334:	ae 5b       	subi	r26, 0xBE	; 190
    1336:	bf 4f       	sbci	r27, 0xFF	; 255
    1338:	8d 91       	ld	r24, X+
    133a:	9c 91       	ld	r25, X
    133c:	11 97       	sbiw	r26, 0x01	; 1
    133e:	28 17       	cp	r18, r24
    1340:	39 07       	cpc	r19, r25
    1342:	19 f4       	brne	.+6      	; 0x134a <_ZN14HardwareSerial4peekEv+0x2e>
    1344:	2f ef       	ldi	r18, 0xFF	; 255
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    134a:	8d 91       	ld	r24, X+
    134c:	9c 91       	ld	r25, X
    134e:	e8 0f       	add	r30, r24
    1350:	f9 1f       	adc	r31, r25
    1352:	80 81       	ld	r24, Z
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1358:	c9 01       	movw	r24, r18
    135a:	08 95       	ret

0000135c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    135c:	dc 01       	movw	r26, r24
    135e:	1c 96       	adiw	r26, 0x0c	; 12
    1360:	ed 91       	ld	r30, X+
    1362:	fc 91       	ld	r31, X
    1364:	1d 97       	sbiw	r26, 0x0d	; 13
    1366:	e0 5c       	subi	r30, 0xC0	; 192
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	20 81       	ld	r18, Z
    136c:	31 81       	ldd	r19, Z+1	; 0x01
    136e:	e0 54       	subi	r30, 0x40	; 64
    1370:	f0 40       	sbci	r31, 0x00	; 0
    1372:	df 01       	movw	r26, r30
    1374:	ae 5b       	subi	r26, 0xBE	; 190
    1376:	bf 4f       	sbci	r27, 0xFF	; 255
    1378:	8d 91       	ld	r24, X+
    137a:	9c 91       	ld	r25, X
    137c:	11 97       	sbiw	r26, 0x01	; 1
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	19 f4       	brne	.+6      	; 0x138a <_ZN14HardwareSerial4readEv+0x2e>
    1384:	2f ef       	ldi	r18, 0xFF	; 255
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	10 c0       	rjmp	.+32     	; 0x13aa <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    138a:	8d 91       	ld	r24, X+
    138c:	9c 91       	ld	r25, X
    138e:	11 97       	sbiw	r26, 0x01	; 1
    1390:	e8 0f       	add	r30, r24
    1392:	f9 1f       	adc	r31, r25
    1394:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1396:	8d 91       	ld	r24, X+
    1398:	9c 91       	ld	r25, X
    139a:	11 97       	sbiw	r26, 0x01	; 1
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	8f 73       	andi	r24, 0x3F	; 63
    13a0:	90 70       	andi	r25, 0x00	; 0
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	9c 93       	st	X, r25
    13a6:	8e 93       	st	-X, r24
    return c;
    13a8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    13aa:	c9 01       	movw	r24, r18
    13ac:	08 95       	ret

000013ae <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    13ae:	fc 01       	movw	r30, r24
    13b0:	86 85       	ldd	r24, Z+14	; 0x0e
    13b2:	97 85       	ldd	r25, Z+15	; 0x0f
    13b4:	dc 01       	movw	r26, r24
    13b6:	a0 5c       	subi	r26, 0xC0	; 192
    13b8:	bf 4f       	sbci	r27, 0xFF	; 255
    13ba:	fc 01       	movw	r30, r24
    13bc:	ee 5b       	subi	r30, 0xBE	; 190
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	2d 91       	ld	r18, X+
    13c2:	3c 91       	ld	r19, X
    13c4:	11 97       	sbiw	r26, 0x01	; 1
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	28 17       	cp	r18, r24
    13cc:	39 07       	cpc	r19, r25
    13ce:	c1 f7       	brne	.-16     	; 0x13c0 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    13d0:	08 95       	ret

000013d2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
    13d8:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    13da:	ee 85       	ldd	r30, Y+14	; 0x0e
    13dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    13de:	e0 5c       	subi	r30, 0xC0	; 192
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	e0 54       	subi	r30, 0x40	; 64
    13e8:	f0 40       	sbci	r31, 0x00	; 0
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	60 e4       	ldi	r22, 0x40	; 64
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 1b 10 	call	0x2036	; 0x2036 <__divmodhi4>
    13f4:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    13f6:	df 01       	movw	r26, r30
    13f8:	ae 5b       	subi	r26, 0xBE	; 190
    13fa:	bf 4f       	sbci	r27, 0xFF	; 255
    13fc:	8d 91       	ld	r24, X+
    13fe:	9c 91       	ld	r25, X
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	28 17       	cp	r18, r24
    1404:	39 07       	cpc	r19, r25
    1406:	d1 f3       	breq	.-12     	; 0x13fc <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1408:	e0 5c       	subi	r30, 0xC0	; 192
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	e0 54       	subi	r30, 0x40	; 64
    1412:	f0 40       	sbci	r31, 0x00	; 0
    1414:	e8 0f       	add	r30, r24
    1416:	f9 1f       	adc	r31, r25
    1418:	40 83       	st	Z, r20
  _tx_buffer->head = i;
    141a:	ee 85       	ldd	r30, Y+14	; 0x0e
    141c:	ff 85       	ldd	r31, Y+15	; 0x0f
    141e:	e0 5c       	subi	r30, 0xC0	; 192
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	31 83       	std	Z+1, r19	; 0x01
    1424:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1426:	ee 89       	ldd	r30, Y+22	; 0x16
    1428:	ff 89       	ldd	r31, Y+23	; 0x17
    142a:	20 81       	ld	r18, Z
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <_ZN14HardwareSerial5writeEh+0x66>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <_ZN14HardwareSerial5writeEh+0x62>
    143c:	28 2b       	or	r18, r24
    143e:	20 83       	st	Z, r18
  
  return 1;
}
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    144a:	10 92 4d 02 	sts	0x024D, r1
    144e:	10 92 4c 02 	sts	0x024C, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1452:	88 ee       	ldi	r24, 0xE8	; 232
    1454:	93 e0       	ldi	r25, 0x03	; 3
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	80 93 4e 02 	sts	0x024E, r24
    145e:	90 93 4f 02 	sts	0x024F, r25
    1462:	a0 93 50 02 	sts	0x0250, r26
    1466:	b0 93 51 02 	sts	0x0251, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    146a:	8a ea       	ldi	r24, 0xAA	; 170
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	90 93 4b 02 	sts	0x024B, r25
    1472:	80 93 4a 02 	sts	0x024A, r24
{
  _rx_buffer = rx_buffer;
    1476:	82 ec       	ldi	r24, 0xC2	; 194
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	90 93 57 02 	sts	0x0257, r25
    147e:	80 93 56 02 	sts	0x0256, r24
  _tx_buffer = tx_buffer;
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	90 93 59 02 	sts	0x0259, r25
    148a:	80 93 58 02 	sts	0x0258, r24
  _ubrrh = ubrrh;
    148e:	85 ec       	ldi	r24, 0xC5	; 197
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	90 93 5b 02 	sts	0x025B, r25
    1496:	80 93 5a 02 	sts	0x025A, r24
  _ubrrl = ubrrl;
    149a:	84 ec       	ldi	r24, 0xC4	; 196
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	90 93 5d 02 	sts	0x025D, r25
    14a2:	80 93 5c 02 	sts	0x025C, r24
  _ucsra = ucsra;
    14a6:	80 ec       	ldi	r24, 0xC0	; 192
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	90 93 5f 02 	sts	0x025F, r25
    14ae:	80 93 5e 02 	sts	0x025E, r24
  _ucsrb = ucsrb;
    14b2:	81 ec       	ldi	r24, 0xC1	; 193
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	90 93 61 02 	sts	0x0261, r25
    14ba:	80 93 60 02 	sts	0x0260, r24
  _udr = udr;
    14be:	86 ec       	ldi	r24, 0xC6	; 198
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	90 93 63 02 	sts	0x0263, r25
    14c6:	80 93 62 02 	sts	0x0262, r24
  _rxen = rxen;
    14ca:	84 e0       	ldi	r24, 0x04	; 4
    14cc:	80 93 64 02 	sts	0x0264, r24
  _txen = txen;
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	80 93 65 02 	sts	0x0265, r24
  _rxcie = rxcie;
    14d6:	87 e0       	ldi	r24, 0x07	; 7
    14d8:	80 93 66 02 	sts	0x0266, r24
  _udrie = udrie;
    14dc:	85 e0       	ldi	r24, 0x05	; 5
    14de:	80 93 67 02 	sts	0x0267, r24
  _u2x = u2x;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	80 93 68 02 	sts	0x0268, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    14e8:	08 95       	ret

000014ea <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	7c 01       	movw	r14, r24
    14fc:	6b 01       	movw	r12, r22
    14fe:	8a 01       	movw	r16, r20
    1500:	c0 e0       	ldi	r28, 0x00	; 0
    1502:	d0 e0       	ldi	r29, 0x00	; 0
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1506:	d6 01       	movw	r26, r12
    1508:	6d 91       	ld	r22, X+
    150a:	6d 01       	movw	r12, r26
    150c:	d7 01       	movw	r26, r14
    150e:	ed 91       	ld	r30, X+
    1510:	fc 91       	ld	r31, X
    1512:	01 90       	ld	r0, Z+
    1514:	f0 81       	ld	r31, Z
    1516:	e0 2d       	mov	r30, r0
    1518:	c7 01       	movw	r24, r14
    151a:	09 95       	icall
    151c:	c8 0f       	add	r28, r24
    151e:	d9 1f       	adc	r29, r25
    1520:	01 50       	subi	r16, 0x01	; 1
    1522:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1524:	01 15       	cp	r16, r1
    1526:	11 05       	cpc	r17, r1
    1528:	71 f7       	brne	.-36     	; 0x1506 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    152a:	ce 01       	movw	r24, r28
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	08 95       	ret

0000153e <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1548:	dc 01       	movw	r26, r24
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	01 90       	ld	r0, Z+
    1550:	f0 81       	ld	r31, Z
    1552:	e0 2d       	mov	r30, r0
    1554:	6d e0       	ldi	r22, 0x0D	; 13
    1556:	09 95       	icall
    1558:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    155a:	d8 01       	movw	r26, r16
    155c:	ed 91       	ld	r30, X+
    155e:	fc 91       	ld	r31, X
    1560:	01 90       	ld	r0, Z+
    1562:	f0 81       	ld	r31, Z
    1564:	e0 2d       	mov	r30, r0
    1566:	c8 01       	movw	r24, r16
    1568:	6a e0       	ldi	r22, 0x0A	; 10
    156a:	09 95       	icall
    156c:	9c 01       	movw	r18, r24
    156e:	2e 0d       	add	r18, r14
    1570:	3f 1d       	adc	r19, r15
    1572:	c9 01       	movw	r24, r18
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	08 95       	ret

0000157e <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	db 01       	movw	r26, r22
    1584:	0d 90       	ld	r0, X+
    1586:	00 20       	and	r0, r0
    1588:	e9 f7       	brne	.-6      	; 0x1584 <_ZN5Print5writeEPKc+0x6>
    158a:	11 97       	sbiw	r26, 0x01	; 1
    158c:	a6 1b       	sub	r26, r22
    158e:	b7 0b       	sbc	r27, r23
    1590:	ec 01       	movw	r28, r24
    1592:	e8 81       	ld	r30, Y
    1594:	f9 81       	ldd	r31, Y+1	; 0x01
    1596:	02 80       	ldd	r0, Z+2	; 0x02
    1598:	f3 81       	ldd	r31, Z+3	; 0x03
    159a:	e0 2d       	mov	r30, r0
    159c:	ad 01       	movw	r20, r26
    159e:	09 95       	icall
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    15a6:	4f 92       	push	r4
    15a8:	5f 92       	push	r5
    15aa:	7f 92       	push	r7
    15ac:	8f 92       	push	r8
    15ae:	9f 92       	push	r9
    15b0:	af 92       	push	r10
    15b2:	bf 92       	push	r11
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	a1 97       	sbiw	r28, 0x21	; 33
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	2c 01       	movw	r4, r24
    15d6:	74 2e       	mov	r7, r20
    15d8:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	08 f4       	brcc	.+2      	; 0x15e0 <_ZN5Print11printNumberEmh+0x3a>
    15de:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    15e0:	19 a2       	std	Y+33, r1	; 0x21
    15e2:	31 e2       	ldi	r19, 0x21	; 33
    15e4:	c3 2e       	mov	r12, r19
    15e6:	d1 2c       	mov	r13, r1
    15e8:	cc 0e       	add	r12, r28
    15ea:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    15ec:	82 2e       	mov	r8, r18
    15ee:	99 24       	eor	r9, r9
    15f0:	aa 24       	eor	r10, r10
    15f2:	bb 24       	eor	r11, r11
    15f4:	67 2d       	mov	r22, r7
    15f6:	75 2f       	mov	r23, r21
    15f8:	a5 01       	movw	r20, r10
    15fa:	94 01       	movw	r18, r8
    15fc:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodsi4>
    1600:	79 01       	movw	r14, r18
    1602:	8a 01       	movw	r16, r20
    char c = m - base * n;
    1604:	c8 01       	movw	r24, r16
    1606:	b7 01       	movw	r22, r14
    1608:	a5 01       	movw	r20, r10
    160a:	94 01       	movw	r18, r8
    160c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__mulsi3>
    1610:	47 2d       	mov	r20, r7
    1612:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1614:	08 94       	sec
    1616:	c1 08       	sbc	r12, r1
    1618:	d1 08       	sbc	r13, r1
    161a:	4a 30       	cpi	r20, 0x0A	; 10
    161c:	14 f4       	brge	.+4      	; 0x1622 <_ZN5Print11printNumberEmh+0x7c>
    161e:	40 5d       	subi	r20, 0xD0	; 208
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <_ZN5Print11printNumberEmh+0x7e>
    1622:	49 5c       	subi	r20, 0xC9	; 201
    1624:	f6 01       	movw	r30, r12
    1626:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1628:	e1 14       	cp	r14, r1
    162a:	f1 04       	cpc	r15, r1
    162c:	01 05       	cpc	r16, r1
    162e:	11 05       	cpc	r17, r1
    1630:	21 f0       	breq	.+8      	; 0x163a <_ZN5Print11printNumberEmh+0x94>
    1632:	7e 2c       	mov	r7, r14
    1634:	5f 2d       	mov	r21, r15
    1636:	c8 01       	movw	r24, r16
    1638:	dd cf       	rjmp	.-70     	; 0x15f4 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    163a:	c2 01       	movw	r24, r4
    163c:	b6 01       	movw	r22, r12
    163e:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN5Print5writeEPKc>
}
    1642:	a1 96       	adiw	r28, 0x21	; 33
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	bf 90       	pop	r11
    1660:	af 90       	pop	r10
    1662:	9f 90       	pop	r9
    1664:	8f 90       	pop	r8
    1666:	7f 90       	pop	r7
    1668:	5f 90       	pop	r5
    166a:	4f 90       	pop	r4
    166c:	08 95       	ret

0000166e <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    166e:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1670:	21 15       	cp	r18, r1
    1672:	31 05       	cpc	r19, r1
    1674:	41 f4       	brne	.+16     	; 0x1686 <_ZN5Print5printEmi+0x18>
    1676:	ed 91       	ld	r30, X+
    1678:	fc 91       	ld	r31, X
    167a:	01 90       	ld	r0, Z+
    167c:	f0 81       	ld	r31, Z
    167e:	e0 2d       	mov	r30, r0
    1680:	64 2f       	mov	r22, r20
    1682:	09 95       	icall
    1684:	08 95       	ret
  else return printNumber(n, base);
    1686:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print11printNumberEmh>
}
    168a:	08 95       	ret

0000168c <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    1696:	e6 2e       	mov	r14, r22
    1698:	ff 24       	eor	r15, r15
    169a:	00 e0       	ldi	r16, 0x00	; 0
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	b8 01       	movw	r22, r16
    16a0:	a7 01       	movw	r20, r14
    16a2:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN5Print5printEmi>
}
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	08 95       	ret

000016b0 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	ec 01       	movw	r28, r24
    16c2:	6a 01       	movw	r12, r20
    16c4:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    16c6:	21 15       	cp	r18, r1
    16c8:	31 05       	cpc	r19, r1
    16ca:	41 f4       	brne	.+16     	; 0x16dc <_ZN5Print5printEli+0x2c>
    return write(n);
    16cc:	e8 81       	ld	r30, Y
    16ce:	f9 81       	ldd	r31, Y+1	; 0x01
    16d0:	01 90       	ld	r0, Z+
    16d2:	f0 81       	ld	r31, Z
    16d4:	e0 2d       	mov	r30, r0
    16d6:	64 2f       	mov	r22, r20
    16d8:	09 95       	icall
    16da:	1f c0       	rjmp	.+62     	; 0x171a <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    16dc:	2a 30       	cpi	r18, 0x0A	; 10
    16de:	31 05       	cpc	r19, r1
    16e0:	d1 f4       	brne	.+52     	; 0x1716 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    16e2:	77 ff       	sbrs	r23, 7
    16e4:	17 c0       	rjmp	.+46     	; 0x1714 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    16e6:	e8 81       	ld	r30, Y
    16e8:	f9 81       	ldd	r31, Y+1	; 0x01
    16ea:	01 90       	ld	r0, Z+
    16ec:	f0 81       	ld	r31, Z
    16ee:	e0 2d       	mov	r30, r0
    16f0:	6d e2       	ldi	r22, 0x2D	; 45
    16f2:	09 95       	icall
    16f4:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    16f6:	44 27       	eor	r20, r20
    16f8:	55 27       	eor	r21, r21
    16fa:	ba 01       	movw	r22, r20
    16fc:	4c 19       	sub	r20, r12
    16fe:	5d 09       	sbc	r21, r13
    1700:	6e 09       	sbc	r22, r14
    1702:	7f 09       	sbc	r23, r15
    1704:	ce 01       	movw	r24, r28
    1706:	2a e0       	ldi	r18, 0x0A	; 10
    1708:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print11printNumberEmh>
    170c:	98 01       	movw	r18, r16
    170e:	28 0f       	add	r18, r24
    1710:	39 1f       	adc	r19, r25
    1712:	04 c0       	rjmp	.+8      	; 0x171c <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    1714:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1716:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print11printNumberEmh>
    171a:	9c 01       	movw	r18, r24
  }
}
    171c:	c9 01       	movw	r24, r18
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	08 95       	ret

00001730 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	7b 01       	movw	r14, r22
    173a:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    173c:	00 27       	eor	r16, r16
    173e:	f7 fc       	sbrc	r15, 7
    1740:	00 95       	com	r16
    1742:	10 2f       	mov	r17, r16
    1744:	b8 01       	movw	r22, r16
    1746:	a7 01       	movw	r20, r14
    1748:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN5Print5printEli>
}
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	08 95       	ret

00001756 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1756:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN5Print5writeEPKc>
}
    175a:	08 95       	ret

0000175c <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    175c:	7f 92       	push	r7
    175e:	8f 92       	push	r8
    1760:	9f 92       	push	r9
    1762:	af 92       	push	r10
    1764:	bf 92       	push	r11
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	4c 01       	movw	r8, r24
    1778:	7a 01       	movw	r14, r20
    177a:	8b 01       	movw	r16, r22
    177c:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    177e:	cb 01       	movw	r24, r22
    1780:	ba 01       	movw	r22, r20
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__cmpsf2>
    178e:	87 fd       	sbrc	r24, 7
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <_ZN5Print10printFloatEdh+0x3c>
    1792:	c0 e0       	ldi	r28, 0x00	; 0
    1794:	d0 e0       	ldi	r29, 0x00	; 0
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1798:	d4 01       	movw	r26, r8
    179a:	ed 91       	ld	r30, X+
    179c:	fc 91       	ld	r31, X
    179e:	01 90       	ld	r0, Z+
    17a0:	f0 81       	ld	r31, Z
    17a2:	e0 2d       	mov	r30, r0
    17a4:	c4 01       	movw	r24, r8
    17a6:	6d e2       	ldi	r22, 0x2D	; 45
    17a8:	09 95       	icall
    17aa:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    17ac:	17 fb       	bst	r17, 7
    17ae:	10 95       	com	r17
    17b0:	17 f9       	bld	r17, 7
    17b2:	10 95       	com	r17
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	aa 24       	eor	r10, r10
    17be:	0b c0       	rjmp	.+22     	; 0x17d6 <_ZN5Print10printFloatEdh+0x7a>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    17c0:	ca 01       	movw	r24, r20
    17c2:	b9 01       	movw	r22, r18
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__divsf3>
    17d0:	9b 01       	movw	r18, r22
    17d2:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    17d4:	a3 94       	inc	r10
    17d6:	a7 14       	cp	r10, r7
    17d8:	98 f3       	brcs	.-26     	; 0x17c0 <_ZN5Print10printFloatEdh+0x64>
    rounding /= 10.0;
  
  number += rounding;
    17da:	c8 01       	movw	r24, r16
    17dc:	b7 01       	movw	r22, r14
    17de:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__addsf3>
    17e2:	5b 01       	movw	r10, r22
    17e4:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    17e6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__fixunssfsi>
    17ea:	7b 01       	movw	r14, r22
    17ec:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    17ee:	c4 01       	movw	r24, r8
    17f0:	b8 01       	movw	r22, r16
    17f2:	a7 01       	movw	r20, r14
    17f4:	2a e0       	ldi	r18, 0x0A	; 10
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN5Print5printEmi>
    17fc:	c8 0f       	add	r28, r24
    17fe:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1800:	77 20       	and	r7, r7
    1802:	39 f0       	breq	.+14     	; 0x1812 <_ZN5Print10printFloatEdh+0xb6>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1804:	c4 01       	movw	r24, r8
    1806:	6a e9       	ldi	r22, 0x9A	; 154
    1808:	71 e0       	ldi	r23, 0x01	; 1
    180a:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    180e:	c8 0f       	add	r28, r24
    1810:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1812:	c8 01       	movw	r24, r16
    1814:	b7 01       	movw	r22, r14
    1816:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__floatunsisf>
    181a:	9b 01       	movw	r18, r22
    181c:	ac 01       	movw	r20, r24
    181e:	c6 01       	movw	r24, r12
    1820:	b5 01       	movw	r22, r10
    1822:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__subsf3>
    1826:	24 c0       	rjmp	.+72     	; 0x1870 <_ZN5Print10printFloatEdh+0x114>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e2       	ldi	r20, 0x20	; 32
    182e:	51 e4       	ldi	r21, 0x41	; 65
    1830:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulsf3>
    1834:	7b 01       	movw	r14, r22
    1836:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    1838:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fixsfsi>
    183c:	5b 01       	movw	r10, r22
    183e:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1840:	cc 24       	eor	r12, r12
    1842:	b7 fc       	sbrc	r11, 7
    1844:	c0 94       	com	r12
    1846:	dc 2c       	mov	r13, r12
    1848:	c4 01       	movw	r24, r8
    184a:	b6 01       	movw	r22, r12
    184c:	a5 01       	movw	r20, r10
    184e:	2a e0       	ldi	r18, 0x0A	; 10
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1856:	c8 0f       	add	r28, r24
    1858:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    185a:	c6 01       	movw	r24, r12
    185c:	b5 01       	movw	r22, r10
    185e:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__floatsisf>
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	c8 01       	movw	r24, r16
    1868:	b7 01       	movw	r22, r14
    186a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__subsf3>
    186e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1870:	77 20       	and	r7, r7
    1872:	d1 f6       	brne	.-76     	; 0x1828 <_ZN5Print10printFloatEdh+0xcc>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1874:	ce 01       	movw	r24, r28
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	bf 90       	pop	r11
    1888:	af 90       	pop	r10
    188a:	9f 90       	pop	r9
    188c:	8f 90       	pop	r8
    188e:	7f 90       	pop	r7
    1890:	08 95       	ret

00001892 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1892:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN5Print10printFloatEdh>
}
    1896:	08 95       	ret

00001898 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    18a2:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN5Print10printFloatEdh>
    18a6:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    18a8:	c7 01       	movw	r24, r14
    18aa:	0e 94 9f 0a 	call	0x153e	; 0x153e <_ZN5Print7printlnEv>
    18ae:	08 0f       	add	r16, r24
    18b0:	19 1f       	adc	r17, r25
  return n;
}
    18b2:	c8 01       	movw	r24, r16
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	08 95       	ret

000018be <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    18c8:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN5Print5writeEPKc>
    18cc:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    18ce:	c7 01       	movw	r24, r14
    18d0:	0e 94 9f 0a 	call	0x153e	; 0x153e <_ZN5Print7printlnEv>
    18d4:	08 0f       	add	r16, r24
    18d6:	19 1f       	adc	r17, r25
  return n;
}
    18d8:	c8 01       	movw	r24, r16
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	08 95       	ret

000018e4 <main>:
#include <Arduino.h>

int main(void)
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
{
	init();
    18e8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    18ec:	0e 94 b7 05 	call	0xb6e	; 0xb6e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    18f0:	cb e9       	ldi	r28, 0x9B	; 155
    18f2:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    18f4:	0e 94 0b 08 	call	0x1016	; 0x1016 <loop>
		if (serialEventRun) serialEventRun();
    18f8:	20 97       	sbiw	r28, 0x00	; 0
    18fa:	e1 f3       	breq	.-8      	; 0x18f4 <main+0x10>
    18fc:	0e 94 9b 08 	call	0x1136	; 0x1136 <_Z14serialEventRunv>
    1900:	f9 cf       	rjmp	.-14     	; 0x18f4 <main+0x10>

00001902 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1902:	1f 92       	push	r1
    1904:	0f 92       	push	r0
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	0f 92       	push	r0
    190a:	11 24       	eor	r1, r1
    190c:	2f 93       	push	r18
    190e:	3f 93       	push	r19
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	af 93       	push	r26
    1916:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1918:	80 91 6d 02 	lds	r24, 0x026D
    191c:	90 91 6e 02 	lds	r25, 0x026E
    1920:	a0 91 6f 02 	lds	r26, 0x026F
    1924:	b0 91 70 02 	lds	r27, 0x0270
	unsigned char f = timer0_fract;
    1928:	30 91 71 02 	lds	r19, 0x0271

	m += MILLIS_INC;
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	a1 1d       	adc	r26, r1
    1930:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1932:	23 2f       	mov	r18, r19
    1934:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1936:	2d 37       	cpi	r18, 0x7D	; 125
    1938:	20 f0       	brcs	.+8      	; 0x1942 <__vector_16+0x40>
		f -= FRACT_MAX;
    193a:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	a1 1d       	adc	r26, r1
    1940:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1942:	20 93 71 02 	sts	0x0271, r18
	timer0_millis = m;
    1946:	80 93 6d 02 	sts	0x026D, r24
    194a:	90 93 6e 02 	sts	0x026E, r25
    194e:	a0 93 6f 02 	sts	0x026F, r26
    1952:	b0 93 70 02 	sts	0x0270, r27
	timer0_overflow_count++;
    1956:	80 91 69 02 	lds	r24, 0x0269
    195a:	90 91 6a 02 	lds	r25, 0x026A
    195e:	a0 91 6b 02 	lds	r26, 0x026B
    1962:	b0 91 6c 02 	lds	r27, 0x026C
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	a1 1d       	adc	r26, r1
    196a:	b1 1d       	adc	r27, r1
    196c:	80 93 69 02 	sts	0x0269, r24
    1970:	90 93 6a 02 	sts	0x026A, r25
    1974:	a0 93 6b 02 	sts	0x026B, r26
    1978:	b0 93 6c 02 	sts	0x026C, r27
}
    197c:	bf 91       	pop	r27
    197e:	af 91       	pop	r26
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1992:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1994:	f8 94       	cli
	m = timer0_millis;
    1996:	20 91 6d 02 	lds	r18, 0x026D
    199a:	30 91 6e 02 	lds	r19, 0x026E
    199e:	40 91 6f 02 	lds	r20, 0x026F
    19a2:	50 91 70 02 	lds	r21, 0x0270
	SREG = oldSREG;
    19a6:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    19a8:	b9 01       	movw	r22, r18
    19aa:	ca 01       	movw	r24, r20
    19ac:	08 95       	ret

000019ae <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    19ae:	9b 01       	movw	r18, r22
    19b0:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    19b2:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    19b4:	f8 94       	cli
	m = timer0_overflow_count;
    19b6:	80 91 69 02 	lds	r24, 0x0269
    19ba:	90 91 6a 02 	lds	r25, 0x026A
    19be:	a0 91 6b 02 	lds	r26, 0x026B
    19c2:	b0 91 6c 02 	lds	r27, 0x026C
#if defined(TCNT0)
	t = TCNT0;
    19c6:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    19c8:	a8 9b       	sbis	0x15, 0	; 21
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <delay+0x28>
    19cc:	6f 3f       	cpi	r22, 0xFF	; 255
    19ce:	19 f0       	breq	.+6      	; 0x19d6 <delay+0x28>
		m++;
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	a1 1d       	adc	r26, r1
    19d4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    19d6:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    19d8:	ba 2f       	mov	r27, r26
    19da:	a9 2f       	mov	r26, r25
    19dc:	98 2f       	mov	r25, r24
    19de:	88 27       	eor	r24, r24
    19e0:	86 0f       	add	r24, r22
    19e2:	91 1d       	adc	r25, r1
    19e4:	a1 1d       	adc	r26, r1
    19e6:	b1 1d       	adc	r27, r1
    19e8:	62 e0       	ldi	r22, 0x02	; 2
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	aa 1f       	adc	r26, r26
    19f0:	bb 1f       	adc	r27, r27
    19f2:	6a 95       	dec	r22
    19f4:	d1 f7       	brne	.-12     	; 0x19ea <delay+0x3c>
    19f6:	bc 01       	movw	r22, r24
    19f8:	2d c0       	rjmp	.+90     	; 0x1a54 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    19fa:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    19fc:	f8 94       	cli
	m = timer0_overflow_count;
    19fe:	80 91 69 02 	lds	r24, 0x0269
    1a02:	90 91 6a 02 	lds	r25, 0x026A
    1a06:	a0 91 6b 02 	lds	r26, 0x026B
    1a0a:	b0 91 6c 02 	lds	r27, 0x026C
#if defined(TCNT0)
	t = TCNT0;
    1a0e:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1a10:	a8 9b       	sbis	0x15, 0	; 21
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <delay+0x70>
    1a14:	ef 3f       	cpi	r30, 0xFF	; 255
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <delay+0x70>
		m++;
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	a1 1d       	adc	r26, r1
    1a1c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1a1e:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1a20:	ba 2f       	mov	r27, r26
    1a22:	a9 2f       	mov	r26, r25
    1a24:	98 2f       	mov	r25, r24
    1a26:	88 27       	eor	r24, r24
    1a28:	8e 0f       	add	r24, r30
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	b1 1d       	adc	r27, r1
    1a30:	e2 e0       	ldi	r30, 0x02	; 2
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	aa 1f       	adc	r26, r26
    1a38:	bb 1f       	adc	r27, r27
    1a3a:	ea 95       	dec	r30
    1a3c:	d1 f7       	brne	.-12     	; 0x1a32 <delay+0x84>
    1a3e:	86 1b       	sub	r24, r22
    1a40:	97 0b       	sbc	r25, r23
    1a42:	88 5e       	subi	r24, 0xE8	; 232
    1a44:	93 40       	sbci	r25, 0x03	; 3
    1a46:	c8 f2       	brcs	.-78     	; 0x19fa <delay+0x4c>
			ms--;
    1a48:	21 50       	subi	r18, 0x01	; 1
    1a4a:	30 40       	sbci	r19, 0x00	; 0
    1a4c:	40 40       	sbci	r20, 0x00	; 0
    1a4e:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1a50:	68 51       	subi	r22, 0x18	; 24
    1a52:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1a54:	21 15       	cp	r18, r1
    1a56:	31 05       	cpc	r19, r1
    1a58:	41 05       	cpc	r20, r1
    1a5a:	51 05       	cpc	r21, r1
    1a5c:	71 f6       	brne	.-100    	; 0x19fa <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1a5e:	08 95       	ret

00001a60 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a60:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a62:	84 b5       	in	r24, 0x24	; 36
    1a64:	82 60       	ori	r24, 0x02	; 2
    1a66:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a68:	84 b5       	in	r24, 0x24	; 36
    1a6a:	81 60       	ori	r24, 0x01	; 1
    1a6c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a6e:	85 b5       	in	r24, 0x25	; 37
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a74:	85 b5       	in	r24, 0x25	; 37
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a7a:	ee e6       	ldi	r30, 0x6E	; 110
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	81 60       	ori	r24, 0x01	; 1
    1a82:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a84:	e1 e8       	ldi	r30, 0x81	; 129
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a8a:	80 81       	ld	r24, Z
    1a8c:	82 60       	ori	r24, 0x02	; 2
    1a8e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a90:	80 81       	ld	r24, Z
    1a92:	81 60       	ori	r24, 0x01	; 1
    1a94:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a96:	e0 e8       	ldi	r30, 0x80	; 128
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	81 60       	ori	r24, 0x01	; 1
    1a9e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1aa0:	e1 eb       	ldi	r30, 0xB1	; 177
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	84 60       	ori	r24, 0x04	; 4
    1aa8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1aaa:	e0 eb       	ldi	r30, 0xB0	; 176
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	81 60       	ori	r24, 0x01	; 1
    1ab2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1ab4:	ea e7       	ldi	r30, 0x7A	; 122
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	84 60       	ori	r24, 0x04	; 4
    1abc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1abe:	80 81       	ld	r24, Z
    1ac0:	82 60       	ori	r24, 0x02	; 2
    1ac2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1ac4:	80 81       	ld	r24, Z
    1ac6:	81 60       	ori	r24, 0x01	; 1
    1ac8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1aca:	80 81       	ld	r24, Z
    1acc:	80 68       	ori	r24, 0x80	; 128
    1ace:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1ad0:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1ad4:	08 95       	ret

00001ad6 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	ca 01       	movw	r24, r20
    1adc:	86 56       	subi	r24, 0x66	; 102
    1ade:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    1ae4:	4a 57       	subi	r20, 0x7A	; 122
    1ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae8:	fa 01       	movw	r30, r20
    1aea:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    1aec:	88 23       	and	r24, r24
    1aee:	c1 f0       	breq	.+48     	; 0x1b20 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1af0:	e8 2f       	mov	r30, r24
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	e8 59       	subi	r30, 0x98	; 152
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	a5 91       	lpm	r26, Z+
    1afe:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    1b00:	66 23       	and	r22, r22
    1b02:	41 f4       	brne	.+16     	; 0x1b14 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    1b04:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b06:	f8 94       	cli
		*reg &= ~bit;
    1b08:	8c 91       	ld	r24, X
    1b0a:	20 95       	com	r18
    1b0c:	82 23       	and	r24, r18
    1b0e:	8c 93       	st	X, r24
		SREG = oldSREG;
    1b10:	9f bf       	out	0x3f, r25	; 63
    1b12:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    1b14:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b16:	f8 94       	cli
		*reg |= bit;
    1b18:	8c 91       	ld	r24, X
    1b1a:	82 2b       	or	r24, r18
    1b1c:	8c 93       	st	X, r24
		SREG = oldSREG;
    1b1e:	9f bf       	out	0x3f, r25	; 63
    1b20:	08 95       	ret

00001b22 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1b22:	48 2f       	mov	r20, r24
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	ca 01       	movw	r24, r20
    1b28:	82 55       	subi	r24, 0x52	; 82
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1b30:	ca 01       	movw	r24, r20
    1b32:	86 56       	subi	r24, 0x66	; 102
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	fc 01       	movw	r30, r24
    1b38:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1b3a:	4a 57       	subi	r20, 0x7A	; 122
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3e:	fa 01       	movw	r30, r20
    1b40:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1b42:	33 23       	and	r19, r19
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <digitalWrite+0x26>
    1b46:	40 c0       	rjmp	.+128    	; 0x1bc8 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1b48:	22 23       	and	r18, r18
    1b4a:	51 f1       	breq	.+84     	; 0x1ba0 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b4c:	23 30       	cpi	r18, 0x03	; 3
    1b4e:	71 f0       	breq	.+28     	; 0x1b6c <digitalWrite+0x4a>
    1b50:	24 30       	cpi	r18, 0x04	; 4
    1b52:	28 f4       	brcc	.+10     	; 0x1b5e <digitalWrite+0x3c>
    1b54:	21 30       	cpi	r18, 0x01	; 1
    1b56:	a1 f0       	breq	.+40     	; 0x1b80 <digitalWrite+0x5e>
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	11 f5       	brne	.+68     	; 0x1ba0 <digitalWrite+0x7e>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <digitalWrite+0x64>
    1b5e:	26 30       	cpi	r18, 0x06	; 6
    1b60:	b1 f0       	breq	.+44     	; 0x1b8e <digitalWrite+0x6c>
    1b62:	27 30       	cpi	r18, 0x07	; 7
    1b64:	c1 f0       	breq	.+48     	; 0x1b96 <digitalWrite+0x74>
    1b66:	24 30       	cpi	r18, 0x04	; 4
    1b68:	d9 f4       	brne	.+54     	; 0x1ba0 <digitalWrite+0x7e>
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b6c:	80 91 80 00 	lds	r24, 0x0080
    1b70:	8f 77       	andi	r24, 0x7F	; 127
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b74:	80 91 80 00 	lds	r24, 0x0080
    1b78:	8f 7d       	andi	r24, 0xDF	; 223
    1b7a:	80 93 80 00 	sts	0x0080, r24
    1b7e:	10 c0       	rjmp	.+32     	; 0x1ba0 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b80:	84 b5       	in	r24, 0x24	; 36
    1b82:	8f 77       	andi	r24, 0x7F	; 127
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b86:	84 b5       	in	r24, 0x24	; 36
    1b88:	8f 7d       	andi	r24, 0xDF	; 223
    1b8a:	84 bd       	out	0x24, r24	; 36
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b8e:	80 91 b0 00 	lds	r24, 0x00B0
    1b92:	8f 77       	andi	r24, 0x7F	; 127
    1b94:	03 c0       	rjmp	.+6      	; 0x1b9c <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b96:	80 91 b0 00 	lds	r24, 0x00B0
    1b9a:	8f 7d       	andi	r24, 0xDF	; 223
    1b9c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1ba0:	e3 2f       	mov	r30, r19
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	ee 58       	subi	r30, 0x8E	; 142
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	a5 91       	lpm	r26, Z+
    1bae:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1bb0:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1bb2:	f8 94       	cli

	if (val == LOW) {
    1bb4:	66 23       	and	r22, r22
    1bb6:	21 f4       	brne	.+8      	; 0x1bc0 <digitalWrite+0x9e>
		*out &= ~bit;
    1bb8:	8c 91       	ld	r24, X
    1bba:	90 95       	com	r25
    1bbc:	89 23       	and	r24, r25
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1bc0:	8c 91       	ld	r24, X
    1bc2:	89 2b       	or	r24, r25
    1bc4:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1bc6:	2f bf       	out	0x3f, r18	; 63
    1bc8:	08 95       	ret

00001bca <__subsf3>:
    1bca:	50 58       	subi	r21, 0x80	; 128

00001bcc <__addsf3>:
    1bcc:	bb 27       	eor	r27, r27
    1bce:	aa 27       	eor	r26, r26
    1bd0:	0e d0       	rcall	.+28     	; 0x1bee <__addsf3x>
    1bd2:	75 c1       	rjmp	.+746    	; 0x1ebe <__fp_round>
    1bd4:	66 d1       	rcall	.+716    	; 0x1ea2 <__fp_pscA>
    1bd6:	30 f0       	brcs	.+12     	; 0x1be4 <__addsf3+0x18>
    1bd8:	6b d1       	rcall	.+726    	; 0x1eb0 <__fp_pscB>
    1bda:	20 f0       	brcs	.+8      	; 0x1be4 <__addsf3+0x18>
    1bdc:	31 f4       	brne	.+12     	; 0x1bea <__addsf3+0x1e>
    1bde:	9f 3f       	cpi	r25, 0xFF	; 255
    1be0:	11 f4       	brne	.+4      	; 0x1be6 <__addsf3+0x1a>
    1be2:	1e f4       	brtc	.+6      	; 0x1bea <__addsf3+0x1e>
    1be4:	5b c1       	rjmp	.+694    	; 0x1e9c <__fp_nan>
    1be6:	0e f4       	brtc	.+2      	; 0x1bea <__addsf3+0x1e>
    1be8:	e0 95       	com	r30
    1bea:	e7 fb       	bst	r30, 7
    1bec:	51 c1       	rjmp	.+674    	; 0x1e90 <__fp_inf>

00001bee <__addsf3x>:
    1bee:	e9 2f       	mov	r30, r25
    1bf0:	77 d1       	rcall	.+750    	; 0x1ee0 <__fp_split3>
    1bf2:	80 f3       	brcs	.-32     	; 0x1bd4 <__addsf3+0x8>
    1bf4:	ba 17       	cp	r27, r26
    1bf6:	62 07       	cpc	r22, r18
    1bf8:	73 07       	cpc	r23, r19
    1bfa:	84 07       	cpc	r24, r20
    1bfc:	95 07       	cpc	r25, r21
    1bfe:	18 f0       	brcs	.+6      	; 0x1c06 <__addsf3x+0x18>
    1c00:	71 f4       	brne	.+28     	; 0x1c1e <__addsf3x+0x30>
    1c02:	9e f5       	brtc	.+102    	; 0x1c6a <__addsf3x+0x7c>
    1c04:	8f c1       	rjmp	.+798    	; 0x1f24 <__fp_zero>
    1c06:	0e f4       	brtc	.+2      	; 0x1c0a <__addsf3x+0x1c>
    1c08:	e0 95       	com	r30
    1c0a:	0b 2e       	mov	r0, r27
    1c0c:	ba 2f       	mov	r27, r26
    1c0e:	a0 2d       	mov	r26, r0
    1c10:	0b 01       	movw	r0, r22
    1c12:	b9 01       	movw	r22, r18
    1c14:	90 01       	movw	r18, r0
    1c16:	0c 01       	movw	r0, r24
    1c18:	ca 01       	movw	r24, r20
    1c1a:	a0 01       	movw	r20, r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	ff 27       	eor	r31, r31
    1c20:	59 1b       	sub	r21, r25
    1c22:	99 f0       	breq	.+38     	; 0x1c4a <__addsf3x+0x5c>
    1c24:	59 3f       	cpi	r21, 0xF9	; 249
    1c26:	50 f4       	brcc	.+20     	; 0x1c3c <__addsf3x+0x4e>
    1c28:	50 3e       	cpi	r21, 0xE0	; 224
    1c2a:	68 f1       	brcs	.+90     	; 0x1c86 <__addsf3x+0x98>
    1c2c:	1a 16       	cp	r1, r26
    1c2e:	f0 40       	sbci	r31, 0x00	; 0
    1c30:	a2 2f       	mov	r26, r18
    1c32:	23 2f       	mov	r18, r19
    1c34:	34 2f       	mov	r19, r20
    1c36:	44 27       	eor	r20, r20
    1c38:	58 5f       	subi	r21, 0xF8	; 248
    1c3a:	f3 cf       	rjmp	.-26     	; 0x1c22 <__addsf3x+0x34>
    1c3c:	46 95       	lsr	r20
    1c3e:	37 95       	ror	r19
    1c40:	27 95       	ror	r18
    1c42:	a7 95       	ror	r26
    1c44:	f0 40       	sbci	r31, 0x00	; 0
    1c46:	53 95       	inc	r21
    1c48:	c9 f7       	brne	.-14     	; 0x1c3c <__addsf3x+0x4e>
    1c4a:	7e f4       	brtc	.+30     	; 0x1c6a <__addsf3x+0x7c>
    1c4c:	1f 16       	cp	r1, r31
    1c4e:	ba 0b       	sbc	r27, r26
    1c50:	62 0b       	sbc	r22, r18
    1c52:	73 0b       	sbc	r23, r19
    1c54:	84 0b       	sbc	r24, r20
    1c56:	ba f0       	brmi	.+46     	; 0x1c86 <__addsf3x+0x98>
    1c58:	91 50       	subi	r25, 0x01	; 1
    1c5a:	a1 f0       	breq	.+40     	; 0x1c84 <__addsf3x+0x96>
    1c5c:	ff 0f       	add	r31, r31
    1c5e:	bb 1f       	adc	r27, r27
    1c60:	66 1f       	adc	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	88 1f       	adc	r24, r24
    1c66:	c2 f7       	brpl	.-16     	; 0x1c58 <__addsf3x+0x6a>
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <__addsf3x+0x98>
    1c6a:	ba 0f       	add	r27, r26
    1c6c:	62 1f       	adc	r22, r18
    1c6e:	73 1f       	adc	r23, r19
    1c70:	84 1f       	adc	r24, r20
    1c72:	48 f4       	brcc	.+18     	; 0x1c86 <__addsf3x+0x98>
    1c74:	87 95       	ror	r24
    1c76:	77 95       	ror	r23
    1c78:	67 95       	ror	r22
    1c7a:	b7 95       	ror	r27
    1c7c:	f7 95       	ror	r31
    1c7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c80:	08 f0       	brcs	.+2      	; 0x1c84 <__addsf3x+0x96>
    1c82:	b3 cf       	rjmp	.-154    	; 0x1bea <__addsf3+0x1e>
    1c84:	93 95       	inc	r25
    1c86:	88 0f       	add	r24, r24
    1c88:	08 f0       	brcs	.+2      	; 0x1c8c <__addsf3x+0x9e>
    1c8a:	99 27       	eor	r25, r25
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	97 95       	ror	r25
    1c90:	87 95       	ror	r24
    1c92:	08 95       	ret

00001c94 <__cmpsf2>:
    1c94:	d9 d0       	rcall	.+434    	; 0x1e48 <__fp_cmp>
    1c96:	08 f4       	brcc	.+2      	; 0x1c9a <__cmpsf2+0x6>
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	08 95       	ret

00001c9c <__divsf3>:
    1c9c:	0c d0       	rcall	.+24     	; 0x1cb6 <__divsf3x>
    1c9e:	0f c1       	rjmp	.+542    	; 0x1ebe <__fp_round>
    1ca0:	07 d1       	rcall	.+526    	; 0x1eb0 <__fp_pscB>
    1ca2:	40 f0       	brcs	.+16     	; 0x1cb4 <__divsf3+0x18>
    1ca4:	fe d0       	rcall	.+508    	; 0x1ea2 <__fp_pscA>
    1ca6:	30 f0       	brcs	.+12     	; 0x1cb4 <__divsf3+0x18>
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <__divsf3+0x16>
    1caa:	5f 3f       	cpi	r21, 0xFF	; 255
    1cac:	19 f0       	breq	.+6      	; 0x1cb4 <__divsf3+0x18>
    1cae:	f0 c0       	rjmp	.+480    	; 0x1e90 <__fp_inf>
    1cb0:	51 11       	cpse	r21, r1
    1cb2:	39 c1       	rjmp	.+626    	; 0x1f26 <__fp_szero>
    1cb4:	f3 c0       	rjmp	.+486    	; 0x1e9c <__fp_nan>

00001cb6 <__divsf3x>:
    1cb6:	14 d1       	rcall	.+552    	; 0x1ee0 <__fp_split3>
    1cb8:	98 f3       	brcs	.-26     	; 0x1ca0 <__divsf3+0x4>

00001cba <__divsf3_pse>:
    1cba:	99 23       	and	r25, r25
    1cbc:	c9 f3       	breq	.-14     	; 0x1cb0 <__divsf3+0x14>
    1cbe:	55 23       	and	r21, r21
    1cc0:	b1 f3       	breq	.-20     	; 0x1cae <__divsf3+0x12>
    1cc2:	95 1b       	sub	r25, r21
    1cc4:	55 0b       	sbc	r21, r21
    1cc6:	bb 27       	eor	r27, r27
    1cc8:	aa 27       	eor	r26, r26
    1cca:	62 17       	cp	r22, r18
    1ccc:	73 07       	cpc	r23, r19
    1cce:	84 07       	cpc	r24, r20
    1cd0:	38 f0       	brcs	.+14     	; 0x1ce0 <__divsf3_pse+0x26>
    1cd2:	9f 5f       	subi	r25, 0xFF	; 255
    1cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd6:	22 0f       	add	r18, r18
    1cd8:	33 1f       	adc	r19, r19
    1cda:	44 1f       	adc	r20, r20
    1cdc:	aa 1f       	adc	r26, r26
    1cde:	a9 f3       	breq	.-22     	; 0x1cca <__divsf3_pse+0x10>
    1ce0:	33 d0       	rcall	.+102    	; 0x1d48 <__divsf3_pse+0x8e>
    1ce2:	0e 2e       	mov	r0, r30
    1ce4:	3a f0       	brmi	.+14     	; 0x1cf4 <__divsf3_pse+0x3a>
    1ce6:	e0 e8       	ldi	r30, 0x80	; 128
    1ce8:	30 d0       	rcall	.+96     	; 0x1d4a <__divsf3_pse+0x90>
    1cea:	91 50       	subi	r25, 0x01	; 1
    1cec:	50 40       	sbci	r21, 0x00	; 0
    1cee:	e6 95       	lsr	r30
    1cf0:	00 1c       	adc	r0, r0
    1cf2:	ca f7       	brpl	.-14     	; 0x1ce6 <__divsf3_pse+0x2c>
    1cf4:	29 d0       	rcall	.+82     	; 0x1d48 <__divsf3_pse+0x8e>
    1cf6:	fe 2f       	mov	r31, r30
    1cf8:	27 d0       	rcall	.+78     	; 0x1d48 <__divsf3_pse+0x8e>
    1cfa:	66 0f       	add	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	bb 1f       	adc	r27, r27
    1d02:	26 17       	cp	r18, r22
    1d04:	37 07       	cpc	r19, r23
    1d06:	48 07       	cpc	r20, r24
    1d08:	ab 07       	cpc	r26, r27
    1d0a:	b0 e8       	ldi	r27, 0x80	; 128
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <__divsf3_pse+0x56>
    1d0e:	bb 0b       	sbc	r27, r27
    1d10:	80 2d       	mov	r24, r0
    1d12:	bf 01       	movw	r22, r30
    1d14:	ff 27       	eor	r31, r31
    1d16:	93 58       	subi	r25, 0x83	; 131
    1d18:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1a:	2a f0       	brmi	.+10     	; 0x1d26 <__divsf3_pse+0x6c>
    1d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d1e:	51 05       	cpc	r21, r1
    1d20:	68 f0       	brcs	.+26     	; 0x1d3c <__divsf3_pse+0x82>
    1d22:	b6 c0       	rjmp	.+364    	; 0x1e90 <__fp_inf>
    1d24:	00 c1       	rjmp	.+512    	; 0x1f26 <__fp_szero>
    1d26:	5f 3f       	cpi	r21, 0xFF	; 255
    1d28:	ec f3       	brlt	.-6      	; 0x1d24 <__divsf3_pse+0x6a>
    1d2a:	98 3e       	cpi	r25, 0xE8	; 232
    1d2c:	dc f3       	brlt	.-10     	; 0x1d24 <__divsf3_pse+0x6a>
    1d2e:	86 95       	lsr	r24
    1d30:	77 95       	ror	r23
    1d32:	67 95       	ror	r22
    1d34:	b7 95       	ror	r27
    1d36:	f7 95       	ror	r31
    1d38:	9f 5f       	subi	r25, 0xFF	; 255
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <__divsf3_pse+0x74>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	91 1d       	adc	r25, r1
    1d40:	96 95       	lsr	r25
    1d42:	87 95       	ror	r24
    1d44:	97 f9       	bld	r25, 7
    1d46:	08 95       	ret
    1d48:	e1 e0       	ldi	r30, 0x01	; 1
    1d4a:	66 0f       	add	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	bb 1f       	adc	r27, r27
    1d52:	62 17       	cp	r22, r18
    1d54:	73 07       	cpc	r23, r19
    1d56:	84 07       	cpc	r24, r20
    1d58:	ba 07       	cpc	r27, r26
    1d5a:	20 f0       	brcs	.+8      	; 0x1d64 <__divsf3_pse+0xaa>
    1d5c:	62 1b       	sub	r22, r18
    1d5e:	73 0b       	sbc	r23, r19
    1d60:	84 0b       	sbc	r24, r20
    1d62:	ba 0b       	sbc	r27, r26
    1d64:	ee 1f       	adc	r30, r30
    1d66:	88 f7       	brcc	.-30     	; 0x1d4a <__divsf3_pse+0x90>
    1d68:	e0 95       	com	r30
    1d6a:	08 95       	ret

00001d6c <__fixsfsi>:
    1d6c:	04 d0       	rcall	.+8      	; 0x1d76 <__fixunssfsi>
    1d6e:	68 94       	set
    1d70:	b1 11       	cpse	r27, r1
    1d72:	d9 c0       	rjmp	.+434    	; 0x1f26 <__fp_szero>
    1d74:	08 95       	ret

00001d76 <__fixunssfsi>:
    1d76:	bc d0       	rcall	.+376    	; 0x1ef0 <__fp_splitA>
    1d78:	88 f0       	brcs	.+34     	; 0x1d9c <__fixunssfsi+0x26>
    1d7a:	9f 57       	subi	r25, 0x7F	; 127
    1d7c:	90 f0       	brcs	.+36     	; 0x1da2 <__fixunssfsi+0x2c>
    1d7e:	b9 2f       	mov	r27, r25
    1d80:	99 27       	eor	r25, r25
    1d82:	b7 51       	subi	r27, 0x17	; 23
    1d84:	a0 f0       	brcs	.+40     	; 0x1dae <__fixunssfsi+0x38>
    1d86:	d1 f0       	breq	.+52     	; 0x1dbc <__fixunssfsi+0x46>
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	1a f0       	brmi	.+6      	; 0x1d98 <__fixunssfsi+0x22>
    1d92:	ba 95       	dec	r27
    1d94:	c9 f7       	brne	.-14     	; 0x1d88 <__fixunssfsi+0x12>
    1d96:	12 c0       	rjmp	.+36     	; 0x1dbc <__fixunssfsi+0x46>
    1d98:	b1 30       	cpi	r27, 0x01	; 1
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <__fixunssfsi+0x46>
    1d9c:	c3 d0       	rcall	.+390    	; 0x1f24 <__fp_zero>
    1d9e:	b1 e0       	ldi	r27, 0x01	; 1
    1da0:	08 95       	ret
    1da2:	c0 c0       	rjmp	.+384    	; 0x1f24 <__fp_zero>
    1da4:	67 2f       	mov	r22, r23
    1da6:	78 2f       	mov	r23, r24
    1da8:	88 27       	eor	r24, r24
    1daa:	b8 5f       	subi	r27, 0xF8	; 248
    1dac:	39 f0       	breq	.+14     	; 0x1dbc <__fixunssfsi+0x46>
    1dae:	b9 3f       	cpi	r27, 0xF9	; 249
    1db0:	cc f3       	brlt	.-14     	; 0x1da4 <__fixunssfsi+0x2e>
    1db2:	86 95       	lsr	r24
    1db4:	77 95       	ror	r23
    1db6:	67 95       	ror	r22
    1db8:	b3 95       	inc	r27
    1dba:	d9 f7       	brne	.-10     	; 0x1db2 <__fixunssfsi+0x3c>
    1dbc:	3e f4       	brtc	.+14     	; 0x1dcc <__fixunssfsi+0x56>
    1dbe:	90 95       	com	r25
    1dc0:	80 95       	com	r24
    1dc2:	70 95       	com	r23
    1dc4:	61 95       	neg	r22
    1dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dca:	9f 4f       	sbci	r25, 0xFF	; 255
    1dcc:	08 95       	ret

00001dce <__floatunsisf>:
    1dce:	e8 94       	clt
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <__floatsisf+0x12>

00001dd2 <__floatsisf>:
    1dd2:	97 fb       	bst	r25, 7
    1dd4:	3e f4       	brtc	.+14     	; 0x1de4 <__floatsisf+0x12>
    1dd6:	90 95       	com	r25
    1dd8:	80 95       	com	r24
    1dda:	70 95       	com	r23
    1ddc:	61 95       	neg	r22
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255
    1de0:	8f 4f       	sbci	r24, 0xFF	; 255
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	99 23       	and	r25, r25
    1de6:	a9 f0       	breq	.+42     	; 0x1e12 <__floatsisf+0x40>
    1de8:	f9 2f       	mov	r31, r25
    1dea:	96 e9       	ldi	r25, 0x96	; 150
    1dec:	bb 27       	eor	r27, r27
    1dee:	93 95       	inc	r25
    1df0:	f6 95       	lsr	r31
    1df2:	87 95       	ror	r24
    1df4:	77 95       	ror	r23
    1df6:	67 95       	ror	r22
    1df8:	b7 95       	ror	r27
    1dfa:	f1 11       	cpse	r31, r1
    1dfc:	f8 cf       	rjmp	.-16     	; 0x1dee <__floatsisf+0x1c>
    1dfe:	fa f4       	brpl	.+62     	; 0x1e3e <__floatsisf+0x6c>
    1e00:	bb 0f       	add	r27, r27
    1e02:	11 f4       	brne	.+4      	; 0x1e08 <__floatsisf+0x36>
    1e04:	60 ff       	sbrs	r22, 0
    1e06:	1b c0       	rjmp	.+54     	; 0x1e3e <__floatsisf+0x6c>
    1e08:	6f 5f       	subi	r22, 0xFF	; 255
    1e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	16 c0       	rjmp	.+44     	; 0x1e3e <__floatsisf+0x6c>
    1e12:	88 23       	and	r24, r24
    1e14:	11 f0       	breq	.+4      	; 0x1e1a <__floatsisf+0x48>
    1e16:	96 e9       	ldi	r25, 0x96	; 150
    1e18:	11 c0       	rjmp	.+34     	; 0x1e3c <__floatsisf+0x6a>
    1e1a:	77 23       	and	r23, r23
    1e1c:	21 f0       	breq	.+8      	; 0x1e26 <__floatsisf+0x54>
    1e1e:	9e e8       	ldi	r25, 0x8E	; 142
    1e20:	87 2f       	mov	r24, r23
    1e22:	76 2f       	mov	r23, r22
    1e24:	05 c0       	rjmp	.+10     	; 0x1e30 <__floatsisf+0x5e>
    1e26:	66 23       	and	r22, r22
    1e28:	71 f0       	breq	.+28     	; 0x1e46 <__floatsisf+0x74>
    1e2a:	96 e8       	ldi	r25, 0x86	; 134
    1e2c:	86 2f       	mov	r24, r22
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	2a f0       	brmi	.+10     	; 0x1e3e <__floatsisf+0x6c>
    1e34:	9a 95       	dec	r25
    1e36:	66 0f       	add	r22, r22
    1e38:	77 1f       	adc	r23, r23
    1e3a:	88 1f       	adc	r24, r24
    1e3c:	da f7       	brpl	.-10     	; 0x1e34 <__floatsisf+0x62>
    1e3e:	88 0f       	add	r24, r24
    1e40:	96 95       	lsr	r25
    1e42:	87 95       	ror	r24
    1e44:	97 f9       	bld	r25, 7
    1e46:	08 95       	ret

00001e48 <__fp_cmp>:
    1e48:	99 0f       	add	r25, r25
    1e4a:	00 08       	sbc	r0, r0
    1e4c:	55 0f       	add	r21, r21
    1e4e:	aa 0b       	sbc	r26, r26
    1e50:	e0 e8       	ldi	r30, 0x80	; 128
    1e52:	fe ef       	ldi	r31, 0xFE	; 254
    1e54:	16 16       	cp	r1, r22
    1e56:	17 06       	cpc	r1, r23
    1e58:	e8 07       	cpc	r30, r24
    1e5a:	f9 07       	cpc	r31, r25
    1e5c:	c0 f0       	brcs	.+48     	; 0x1e8e <__fp_cmp+0x46>
    1e5e:	12 16       	cp	r1, r18
    1e60:	13 06       	cpc	r1, r19
    1e62:	e4 07       	cpc	r30, r20
    1e64:	f5 07       	cpc	r31, r21
    1e66:	98 f0       	brcs	.+38     	; 0x1e8e <__fp_cmp+0x46>
    1e68:	62 1b       	sub	r22, r18
    1e6a:	73 0b       	sbc	r23, r19
    1e6c:	84 0b       	sbc	r24, r20
    1e6e:	95 0b       	sbc	r25, r21
    1e70:	39 f4       	brne	.+14     	; 0x1e80 <__fp_cmp+0x38>
    1e72:	0a 26       	eor	r0, r26
    1e74:	61 f0       	breq	.+24     	; 0x1e8e <__fp_cmp+0x46>
    1e76:	23 2b       	or	r18, r19
    1e78:	24 2b       	or	r18, r20
    1e7a:	25 2b       	or	r18, r21
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <__fp_cmp+0x3e>
    1e7e:	08 95       	ret
    1e80:	0a 26       	eor	r0, r26
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__fp_cmp+0x3e>
    1e84:	a1 40       	sbci	r26, 0x01	; 1
    1e86:	a6 95       	lsr	r26
    1e88:	8f ef       	ldi	r24, 0xFF	; 255
    1e8a:	81 1d       	adc	r24, r1
    1e8c:	81 1d       	adc	r24, r1
    1e8e:	08 95       	ret

00001e90 <__fp_inf>:
    1e90:	97 f9       	bld	r25, 7
    1e92:	9f 67       	ori	r25, 0x7F	; 127
    1e94:	80 e8       	ldi	r24, 0x80	; 128
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	08 95       	ret

00001e9c <__fp_nan>:
    1e9c:	9f ef       	ldi	r25, 0xFF	; 255
    1e9e:	80 ec       	ldi	r24, 0xC0	; 192
    1ea0:	08 95       	ret

00001ea2 <__fp_pscA>:
    1ea2:	00 24       	eor	r0, r0
    1ea4:	0a 94       	dec	r0
    1ea6:	16 16       	cp	r1, r22
    1ea8:	17 06       	cpc	r1, r23
    1eaa:	18 06       	cpc	r1, r24
    1eac:	09 06       	cpc	r0, r25
    1eae:	08 95       	ret

00001eb0 <__fp_pscB>:
    1eb0:	00 24       	eor	r0, r0
    1eb2:	0a 94       	dec	r0
    1eb4:	12 16       	cp	r1, r18
    1eb6:	13 06       	cpc	r1, r19
    1eb8:	14 06       	cpc	r1, r20
    1eba:	05 06       	cpc	r0, r21
    1ebc:	08 95       	ret

00001ebe <__fp_round>:
    1ebe:	09 2e       	mov	r0, r25
    1ec0:	03 94       	inc	r0
    1ec2:	00 0c       	add	r0, r0
    1ec4:	11 f4       	brne	.+4      	; 0x1eca <__fp_round+0xc>
    1ec6:	88 23       	and	r24, r24
    1ec8:	52 f0       	brmi	.+20     	; 0x1ede <__fp_round+0x20>
    1eca:	bb 0f       	add	r27, r27
    1ecc:	40 f4       	brcc	.+16     	; 0x1ede <__fp_round+0x20>
    1ece:	bf 2b       	or	r27, r31
    1ed0:	11 f4       	brne	.+4      	; 0x1ed6 <__fp_round+0x18>
    1ed2:	60 ff       	sbrs	r22, 0
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <__fp_round+0x20>
    1ed6:	6f 5f       	subi	r22, 0xFF	; 255
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eda:	8f 4f       	sbci	r24, 0xFF	; 255
    1edc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ede:	08 95       	ret

00001ee0 <__fp_split3>:
    1ee0:	57 fd       	sbrc	r21, 7
    1ee2:	90 58       	subi	r25, 0x80	; 128
    1ee4:	44 0f       	add	r20, r20
    1ee6:	55 1f       	adc	r21, r21
    1ee8:	59 f0       	breq	.+22     	; 0x1f00 <__fp_splitA+0x10>
    1eea:	5f 3f       	cpi	r21, 0xFF	; 255
    1eec:	71 f0       	breq	.+28     	; 0x1f0a <__fp_splitA+0x1a>
    1eee:	47 95       	ror	r20

00001ef0 <__fp_splitA>:
    1ef0:	88 0f       	add	r24, r24
    1ef2:	97 fb       	bst	r25, 7
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	61 f0       	breq	.+24     	; 0x1f10 <__fp_splitA+0x20>
    1ef8:	9f 3f       	cpi	r25, 0xFF	; 255
    1efa:	79 f0       	breq	.+30     	; 0x1f1a <__fp_splitA+0x2a>
    1efc:	87 95       	ror	r24
    1efe:	08 95       	ret
    1f00:	12 16       	cp	r1, r18
    1f02:	13 06       	cpc	r1, r19
    1f04:	14 06       	cpc	r1, r20
    1f06:	55 1f       	adc	r21, r21
    1f08:	f2 cf       	rjmp	.-28     	; 0x1eee <__fp_split3+0xe>
    1f0a:	46 95       	lsr	r20
    1f0c:	f1 df       	rcall	.-30     	; 0x1ef0 <__fp_splitA>
    1f0e:	08 c0       	rjmp	.+16     	; 0x1f20 <__fp_splitA+0x30>
    1f10:	16 16       	cp	r1, r22
    1f12:	17 06       	cpc	r1, r23
    1f14:	18 06       	cpc	r1, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	f1 cf       	rjmp	.-30     	; 0x1efc <__fp_splitA+0xc>
    1f1a:	86 95       	lsr	r24
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	61 05       	cpc	r22, r1
    1f20:	08 94       	sec
    1f22:	08 95       	ret

00001f24 <__fp_zero>:
    1f24:	e8 94       	clt

00001f26 <__fp_szero>:
    1f26:	bb 27       	eor	r27, r27
    1f28:	66 27       	eor	r22, r22
    1f2a:	77 27       	eor	r23, r23
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	97 f9       	bld	r25, 7
    1f30:	08 95       	ret

00001f32 <__mulsf3>:
    1f32:	0b d0       	rcall	.+22     	; 0x1f4a <__mulsf3x>
    1f34:	c4 cf       	rjmp	.-120    	; 0x1ebe <__fp_round>
    1f36:	b5 df       	rcall	.-150    	; 0x1ea2 <__fp_pscA>
    1f38:	28 f0       	brcs	.+10     	; 0x1f44 <__mulsf3+0x12>
    1f3a:	ba df       	rcall	.-140    	; 0x1eb0 <__fp_pscB>
    1f3c:	18 f0       	brcs	.+6      	; 0x1f44 <__mulsf3+0x12>
    1f3e:	95 23       	and	r25, r21
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <__mulsf3+0x12>
    1f42:	a6 cf       	rjmp	.-180    	; 0x1e90 <__fp_inf>
    1f44:	ab cf       	rjmp	.-170    	; 0x1e9c <__fp_nan>
    1f46:	11 24       	eor	r1, r1
    1f48:	ee cf       	rjmp	.-36     	; 0x1f26 <__fp_szero>

00001f4a <__mulsf3x>:
    1f4a:	ca df       	rcall	.-108    	; 0x1ee0 <__fp_split3>
    1f4c:	a0 f3       	brcs	.-24     	; 0x1f36 <__mulsf3+0x4>

00001f4e <__mulsf3_pse>:
    1f4e:	95 9f       	mul	r25, r21
    1f50:	d1 f3       	breq	.-12     	; 0x1f46 <__mulsf3+0x14>
    1f52:	95 0f       	add	r25, r21
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	55 1f       	adc	r21, r21
    1f58:	62 9f       	mul	r22, r18
    1f5a:	f0 01       	movw	r30, r0
    1f5c:	72 9f       	mul	r23, r18
    1f5e:	bb 27       	eor	r27, r27
    1f60:	f0 0d       	add	r31, r0
    1f62:	b1 1d       	adc	r27, r1
    1f64:	63 9f       	mul	r22, r19
    1f66:	aa 27       	eor	r26, r26
    1f68:	f0 0d       	add	r31, r0
    1f6a:	b1 1d       	adc	r27, r1
    1f6c:	aa 1f       	adc	r26, r26
    1f6e:	64 9f       	mul	r22, r20
    1f70:	66 27       	eor	r22, r22
    1f72:	b0 0d       	add	r27, r0
    1f74:	a1 1d       	adc	r26, r1
    1f76:	66 1f       	adc	r22, r22
    1f78:	82 9f       	mul	r24, r18
    1f7a:	22 27       	eor	r18, r18
    1f7c:	b0 0d       	add	r27, r0
    1f7e:	a1 1d       	adc	r26, r1
    1f80:	62 1f       	adc	r22, r18
    1f82:	73 9f       	mul	r23, r19
    1f84:	b0 0d       	add	r27, r0
    1f86:	a1 1d       	adc	r26, r1
    1f88:	62 1f       	adc	r22, r18
    1f8a:	83 9f       	mul	r24, r19
    1f8c:	a0 0d       	add	r26, r0
    1f8e:	61 1d       	adc	r22, r1
    1f90:	22 1f       	adc	r18, r18
    1f92:	74 9f       	mul	r23, r20
    1f94:	33 27       	eor	r19, r19
    1f96:	a0 0d       	add	r26, r0
    1f98:	61 1d       	adc	r22, r1
    1f9a:	23 1f       	adc	r18, r19
    1f9c:	84 9f       	mul	r24, r20
    1f9e:	60 0d       	add	r22, r0
    1fa0:	21 1d       	adc	r18, r1
    1fa2:	82 2f       	mov	r24, r18
    1fa4:	76 2f       	mov	r23, r22
    1fa6:	6a 2f       	mov	r22, r26
    1fa8:	11 24       	eor	r1, r1
    1faa:	9f 57       	subi	r25, 0x7F	; 127
    1fac:	50 40       	sbci	r21, 0x00	; 0
    1fae:	8a f0       	brmi	.+34     	; 0x1fd2 <__mulsf3_pse+0x84>
    1fb0:	e1 f0       	breq	.+56     	; 0x1fea <__mulsf3_pse+0x9c>
    1fb2:	88 23       	and	r24, r24
    1fb4:	4a f0       	brmi	.+18     	; 0x1fc8 <__mulsf3_pse+0x7a>
    1fb6:	ee 0f       	add	r30, r30
    1fb8:	ff 1f       	adc	r31, r31
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	66 1f       	adc	r22, r22
    1fbe:	77 1f       	adc	r23, r23
    1fc0:	88 1f       	adc	r24, r24
    1fc2:	91 50       	subi	r25, 0x01	; 1
    1fc4:	50 40       	sbci	r21, 0x00	; 0
    1fc6:	a9 f7       	brne	.-22     	; 0x1fb2 <__mulsf3_pse+0x64>
    1fc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1fca:	51 05       	cpc	r21, r1
    1fcc:	70 f0       	brcs	.+28     	; 0x1fea <__mulsf3_pse+0x9c>
    1fce:	60 cf       	rjmp	.-320    	; 0x1e90 <__fp_inf>
    1fd0:	aa cf       	rjmp	.-172    	; 0x1f26 <__fp_szero>
    1fd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd4:	ec f3       	brlt	.-6      	; 0x1fd0 <__mulsf3_pse+0x82>
    1fd6:	98 3e       	cpi	r25, 0xE8	; 232
    1fd8:	dc f3       	brlt	.-10     	; 0x1fd0 <__mulsf3_pse+0x82>
    1fda:	86 95       	lsr	r24
    1fdc:	77 95       	ror	r23
    1fde:	67 95       	ror	r22
    1fe0:	b7 95       	ror	r27
    1fe2:	f7 95       	ror	r31
    1fe4:	e7 95       	ror	r30
    1fe6:	9f 5f       	subi	r25, 0xFF	; 255
    1fe8:	c1 f7       	brne	.-16     	; 0x1fda <__mulsf3_pse+0x8c>
    1fea:	fe 2b       	or	r31, r30
    1fec:	88 0f       	add	r24, r24
    1fee:	91 1d       	adc	r25, r1
    1ff0:	96 95       	lsr	r25
    1ff2:	87 95       	ror	r24
    1ff4:	97 f9       	bld	r25, 7
    1ff6:	08 95       	ret

00001ff8 <__mulsi3>:
    1ff8:	62 9f       	mul	r22, r18
    1ffa:	d0 01       	movw	r26, r0
    1ffc:	73 9f       	mul	r23, r19
    1ffe:	f0 01       	movw	r30, r0
    2000:	82 9f       	mul	r24, r18
    2002:	e0 0d       	add	r30, r0
    2004:	f1 1d       	adc	r31, r1
    2006:	64 9f       	mul	r22, r20
    2008:	e0 0d       	add	r30, r0
    200a:	f1 1d       	adc	r31, r1
    200c:	92 9f       	mul	r25, r18
    200e:	f0 0d       	add	r31, r0
    2010:	83 9f       	mul	r24, r19
    2012:	f0 0d       	add	r31, r0
    2014:	74 9f       	mul	r23, r20
    2016:	f0 0d       	add	r31, r0
    2018:	65 9f       	mul	r22, r21
    201a:	f0 0d       	add	r31, r0
    201c:	99 27       	eor	r25, r25
    201e:	72 9f       	mul	r23, r18
    2020:	b0 0d       	add	r27, r0
    2022:	e1 1d       	adc	r30, r1
    2024:	f9 1f       	adc	r31, r25
    2026:	63 9f       	mul	r22, r19
    2028:	b0 0d       	add	r27, r0
    202a:	e1 1d       	adc	r30, r1
    202c:	f9 1f       	adc	r31, r25
    202e:	bd 01       	movw	r22, r26
    2030:	cf 01       	movw	r24, r30
    2032:	11 24       	eor	r1, r1
    2034:	08 95       	ret

00002036 <__divmodhi4>:
    2036:	97 fb       	bst	r25, 7
    2038:	09 2e       	mov	r0, r25
    203a:	07 26       	eor	r0, r23
    203c:	0a d0       	rcall	.+20     	; 0x2052 <__divmodhi4_neg1>
    203e:	77 fd       	sbrc	r23, 7
    2040:	04 d0       	rcall	.+8      	; 0x204a <__divmodhi4_neg2>
    2042:	2e d0       	rcall	.+92     	; 0x20a0 <__udivmodhi4>
    2044:	06 d0       	rcall	.+12     	; 0x2052 <__divmodhi4_neg1>
    2046:	00 20       	and	r0, r0
    2048:	1a f4       	brpl	.+6      	; 0x2050 <__divmodhi4_exit>

0000204a <__divmodhi4_neg2>:
    204a:	70 95       	com	r23
    204c:	61 95       	neg	r22
    204e:	7f 4f       	sbci	r23, 0xFF	; 255

00002050 <__divmodhi4_exit>:
    2050:	08 95       	ret

00002052 <__divmodhi4_neg1>:
    2052:	f6 f7       	brtc	.-4      	; 0x2050 <__divmodhi4_exit>
    2054:	90 95       	com	r25
    2056:	81 95       	neg	r24
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	08 95       	ret

0000205c <__udivmodsi4>:
    205c:	a1 e2       	ldi	r26, 0x21	; 33
    205e:	1a 2e       	mov	r1, r26
    2060:	aa 1b       	sub	r26, r26
    2062:	bb 1b       	sub	r27, r27
    2064:	fd 01       	movw	r30, r26
    2066:	0d c0       	rjmp	.+26     	; 0x2082 <__udivmodsi4_ep>

00002068 <__udivmodsi4_loop>:
    2068:	aa 1f       	adc	r26, r26
    206a:	bb 1f       	adc	r27, r27
    206c:	ee 1f       	adc	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	a2 17       	cp	r26, r18
    2072:	b3 07       	cpc	r27, r19
    2074:	e4 07       	cpc	r30, r20
    2076:	f5 07       	cpc	r31, r21
    2078:	20 f0       	brcs	.+8      	; 0x2082 <__udivmodsi4_ep>
    207a:	a2 1b       	sub	r26, r18
    207c:	b3 0b       	sbc	r27, r19
    207e:	e4 0b       	sbc	r30, r20
    2080:	f5 0b       	sbc	r31, r21

00002082 <__udivmodsi4_ep>:
    2082:	66 1f       	adc	r22, r22
    2084:	77 1f       	adc	r23, r23
    2086:	88 1f       	adc	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	1a 94       	dec	r1
    208c:	69 f7       	brne	.-38     	; 0x2068 <__udivmodsi4_loop>
    208e:	60 95       	com	r22
    2090:	70 95       	com	r23
    2092:	80 95       	com	r24
    2094:	90 95       	com	r25
    2096:	9b 01       	movw	r18, r22
    2098:	ac 01       	movw	r20, r24
    209a:	bd 01       	movw	r22, r26
    209c:	cf 01       	movw	r24, r30
    209e:	08 95       	ret

000020a0 <__udivmodhi4>:
    20a0:	aa 1b       	sub	r26, r26
    20a2:	bb 1b       	sub	r27, r27
    20a4:	51 e1       	ldi	r21, 0x11	; 17
    20a6:	07 c0       	rjmp	.+14     	; 0x20b6 <__udivmodhi4_ep>

000020a8 <__udivmodhi4_loop>:
    20a8:	aa 1f       	adc	r26, r26
    20aa:	bb 1f       	adc	r27, r27
    20ac:	a6 17       	cp	r26, r22
    20ae:	b7 07       	cpc	r27, r23
    20b0:	10 f0       	brcs	.+4      	; 0x20b6 <__udivmodhi4_ep>
    20b2:	a6 1b       	sub	r26, r22
    20b4:	b7 0b       	sbc	r27, r23

000020b6 <__udivmodhi4_ep>:
    20b6:	88 1f       	adc	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	5a 95       	dec	r21
    20bc:	a9 f7       	brne	.-22     	; 0x20a8 <__udivmodhi4_loop>
    20be:	80 95       	com	r24
    20c0:	90 95       	com	r25
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	08 95       	ret

000020c8 <__tablejump2__>:
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31

000020cc <__tablejump__>:
    20cc:	05 90       	lpm	r0, Z+
    20ce:	f4 91       	lpm	r31, Z+
    20d0:	e0 2d       	mov	r30, r0
    20d2:	09 94       	ijmp

000020d4 <isspace>:
    20d4:	91 11       	cpse	r25, r1
    20d6:	06 c0       	rjmp	.+12     	; 0x20e4 <__ctype_isfalse>
    20d8:	80 32       	cpi	r24, 0x20	; 32
    20da:	19 f0       	breq	.+6      	; 0x20e2 <isspace+0xe>
    20dc:	89 50       	subi	r24, 0x09	; 9
    20de:	85 50       	subi	r24, 0x05	; 5
    20e0:	d0 f7       	brcc	.-12     	; 0x20d6 <isspace+0x2>
    20e2:	08 95       	ret

000020e4 <__ctype_isfalse>:
    20e4:	99 27       	eor	r25, r25
    20e6:	88 27       	eor	r24, r24

000020e8 <__ctype_istrue>:
    20e8:	08 95       	ret

000020ea <__prologue_saves__>:
    20ea:	2f 92       	push	r2
    20ec:	3f 92       	push	r3
    20ee:	4f 92       	push	r4
    20f0:	5f 92       	push	r5
    20f2:	6f 92       	push	r6
    20f4:	7f 92       	push	r7
    20f6:	8f 92       	push	r8
    20f8:	9f 92       	push	r9
    20fa:	af 92       	push	r10
    20fc:	bf 92       	push	r11
    20fe:	cf 92       	push	r12
    2100:	df 92       	push	r13
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	ca 1b       	sub	r28, r26
    2114:	db 0b       	sbc	r29, r27
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	09 94       	ijmp

00002122 <__epilogue_restores__>:
    2122:	2a 88       	ldd	r2, Y+18	; 0x12
    2124:	39 88       	ldd	r3, Y+17	; 0x11
    2126:	48 88       	ldd	r4, Y+16	; 0x10
    2128:	5f 84       	ldd	r5, Y+15	; 0x0f
    212a:	6e 84       	ldd	r6, Y+14	; 0x0e
    212c:	7d 84       	ldd	r7, Y+13	; 0x0d
    212e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2130:	9b 84       	ldd	r9, Y+11	; 0x0b
    2132:	aa 84       	ldd	r10, Y+10	; 0x0a
    2134:	b9 84       	ldd	r11, Y+9	; 0x09
    2136:	c8 84       	ldd	r12, Y+8	; 0x08
    2138:	df 80       	ldd	r13, Y+7	; 0x07
    213a:	ee 80       	ldd	r14, Y+6	; 0x06
    213c:	fd 80       	ldd	r15, Y+5	; 0x05
    213e:	0c 81       	ldd	r16, Y+4	; 0x04
    2140:	1b 81       	ldd	r17, Y+3	; 0x03
    2142:	aa 81       	ldd	r26, Y+2	; 0x02
    2144:	b9 81       	ldd	r27, Y+1	; 0x01
    2146:	ce 0f       	add	r28, r30
    2148:	d1 1d       	adc	r29, r1
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	ed 01       	movw	r28, r26
    2156:	08 95       	ret

00002158 <_exit>:
    2158:	f8 94       	cli

0000215a <__stop_program>:
    215a:	ff cf       	rjmp	.-2      	; 0x215a <__stop_program>
