
copter_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000017ae  00001842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  00800144  00800144  00001886  2**0
                  ALLOC
  3 .debug_aranges 00000840  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000012c8  00000000  00000000  000020c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000814d  00000000  00000000  0000338e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000020d0  00000000  00000000  0000b4db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004fb7  00000000  00000000  0000d5ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e60  00000000  00000000  00012564  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002438  00000000  00000000  000133c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000046bc  00000000  00000000  000157fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007a8  00000000  00000000  00019eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	cePin = 8;
	csnPin = 7;
	channel = 1;
	payload = 16;
	spi = NULL;
}
       0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    SPCR |= _BV(DORD);
  } else {
    SPCR &= ~(_BV(DORD));
       4:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_1>
  if( ServoCount < MAX_SERVOS) {
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
       8:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_2>

/**
 * Waits to receive data over a given timeout period.
 * Data put into packet structure give via pointer.
 */
int radio_recv(unsigned int timeout, radio_packet * packet) {
       c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
}

/**
 * Requests the remote station to acknowledge that it is still there.
 */
void request_ack() {
      10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
#endif
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
      1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      2c:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_11>
      30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      40:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_16>
      44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      48:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_18>
      4c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_19>
      50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	e0 00       	.word	0x00e0	; ????
      c4:	aa 02       	muls	r26, r26
      c6:	fb 04       	cpc	r15, r11
      c8:	e6 07       	cpc	r30, r22

000000ca <__ctors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf ef       	ldi	r28, 0xFF	; 255
      d0:	d8 e0       	ldi	r29, 0x08	; 8
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	11 e0       	ldi	r17, 0x01	; 1
      d8:	a0 e0       	ldi	r26, 0x00	; 0
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	ee ea       	ldi	r30, 0xAE	; 174
      de:	f7 e1       	ldi	r31, 0x17	; 23
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <.do_copy_data_start>

000000e2 <.do_copy_data_loop>:
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0

000000e6 <.do_copy_data_start>:
      e6:	a4 34       	cpi	r26, 0x44	; 68
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <.do_copy_data_loop>

000000ec <__do_clear_bss>:
      ec:	12 e0       	ldi	r17, 0x02	; 2
      ee:	a4 e4       	ldi	r26, 0x44	; 68
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	ae 33       	cpi	r26, 0x3E	; 62
      f8:	b1 07       	cpc	r27, r17
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>

000000fc <__do_global_ctors>:
      fc:	10 e0       	ldi	r17, 0x00	; 0
      fe:	ca ec       	ldi	r28, 0xCA	; 202
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	04 c0       	rjmp	.+8      	; 0x10c <.do_global_ctors_start>

00000104 <.do_global_ctors_loop>:
     104:	22 97       	sbiw	r28, 0x02	; 2
     106:	fe 01       	movw	r30, r28
     108:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__tablejump__>

0000010c <.do_global_ctors_start>:
     10c:	c2 3c       	cpi	r28, 0xC2	; 194
     10e:	d1 07       	cpc	r29, r17
     110:	c9 f7       	brne	.-14     	; 0x104 <.do_global_ctors_loop>
     112:	0e 94 f6 09 	call	0x13ec	; 0x13ec <main>
     116:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <_exit>

0000011a <__bad_interrupt>:
     11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <_ZN6Nrf24l12transferSyncEPhS0_h>:

void Nrf24l::transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len){
     11e:	bf 92       	push	r11
     120:	cf 92       	push	r12
     122:	df 92       	push	r13
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	6c 01       	movw	r12, r24
     132:	7a 01       	movw	r14, r20
     134:	b2 2e       	mov	r11, r18
     136:	8b 01       	movw	r16, r22
     138:	c0 e0       	ldi	r28, 0x00	; 0
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	13 c0       	rjmp	.+38     	; 0x164 <_ZN6Nrf24l12transferSyncEPhS0_h+0x46>
	uint8_t i;
	for(i = 0;i < len;i++){
		datain[i] = spi->transfer(dataout[i]);
     13e:	f6 01       	movw	r30, r12
     140:	a6 81       	ldd	r26, Z+6	; 0x06
     142:	b7 81       	ldd	r27, Z+7	; 0x07
     144:	ed 91       	ld	r30, X+
     146:	fc 91       	ld	r31, X
     148:	11 97       	sbiw	r26, 0x01	; 1
     14a:	01 90       	ld	r0, Z+
     14c:	f0 81       	ld	r31, Z
     14e:	e0 2d       	mov	r30, r0
     150:	cd 01       	movw	r24, r26
     152:	d8 01       	movw	r26, r16
     154:	6d 91       	ld	r22, X+
     156:	8d 01       	movw	r16, r26
     158:	09 95       	icall
     15a:	f7 01       	movw	r30, r14
     15c:	ec 0f       	add	r30, r28
     15e:	fd 1f       	adc	r31, r29
     160:	80 83       	st	Z, r24
     162:	21 96       	adiw	r28, 0x01	; 1
	spi = NULL;
}

void Nrf24l::transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
     164:	cb 15       	cp	r28, r11
     166:	58 f3       	brcs	.-42     	; 0x13e <_ZN6Nrf24l12transferSyncEPhS0_h+0x20>
		datain[i] = spi->transfer(dataout[i]);
	}
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	08 95       	ret

0000017c <_ZN6Nrf24l12transmitSyncEPhh>:

void Nrf24l::transmitSync(uint8_t *dataout,uint8_t len){
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	7c 01       	movw	r14, r24
     18a:	04 2f       	mov	r16, r20
     18c:	eb 01       	movw	r28, r22
     18e:	10 e0       	ldi	r17, 0x00	; 0
     190:	0e c0       	rjmp	.+28     	; 0x1ae <_ZN6Nrf24l12transmitSyncEPhh+0x32>
	uint8_t i;
	for(i = 0;i < len;i++){
		spi->transfer(dataout[i]);
     192:	d7 01       	movw	r26, r14
     194:	16 96       	adiw	r26, 0x06	; 6
     196:	ed 91       	ld	r30, X+
     198:	fc 91       	ld	r31, X
     19a:	17 97       	sbiw	r26, 0x07	; 7
     19c:	a0 81       	ld	r26, Z
     19e:	b1 81       	ldd	r27, Z+1	; 0x01
     1a0:	2d 91       	ld	r18, X+
     1a2:	3c 91       	ld	r19, X
     1a4:	cf 01       	movw	r24, r30
     1a6:	69 91       	ld	r22, Y+
     1a8:	f9 01       	movw	r30, r18
     1aa:	09 95       	icall
	}
}

void Nrf24l::transmitSync(uint8_t *dataout,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
     1ac:	1f 5f       	subi	r17, 0xFF	; 255
     1ae:	10 17       	cp	r17, r16
     1b0:	80 f3       	brcs	.-32     	; 0x192 <_ZN6Nrf24l12transmitSyncEPhh+0x16>
		spi->transfer(dataout[i]);
	}
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	ff 90       	pop	r15
     1bc:	ef 90       	pop	r14
     1be:	08 95       	ret

000001c0 <_GLOBAL__I_Mirf>:
// Defines for setting the MiRF registers for transmitting or receiving mode

Nrf24l Mirf = Nrf24l();

Nrf24l::Nrf24l(){
	pwrPin = 5;
     1c0:	85 e0       	ldi	r24, 0x05	; 5
     1c2:	80 93 47 01 	sts	0x0147, r24
	cePin = 8;
     1c6:	88 e0       	ldi	r24, 0x08	; 8
     1c8:	80 93 45 01 	sts	0x0145, r24
	csnPin = 7;
     1cc:	87 e0       	ldi	r24, 0x07	; 7
     1ce:	80 93 46 01 	sts	0x0146, r24
	channel = 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 48 01 	sts	0x0148, r24
	payload = 16;
     1d8:	80 e1       	ldi	r24, 0x10	; 16
     1da:	80 93 49 01 	sts	0x0149, r24
	spi = NULL;
     1de:	10 92 4b 01 	sts	0x014B, r1
     1e2:	10 92 4a 01 	sts	0x014A, r1
}

void Nrf24l::powerDown(){
	ceLow();
	configRegister(CONFIG, mirf_CONFIG );
}
     1e6:	08 95       	ret

000001e8 <_ZN6Nrf24l6csnLowEv>:
void Nrf24l::csnHi(){
	digitalWrite(csnPin,HIGH);
}

void Nrf24l::csnLow(){
	digitalWrite(csnPin,LOW);
     1e8:	fc 01       	movw	r30, r24
     1ea:	82 81       	ldd	r24, Z+2	; 0x02
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
}
     1f2:	08 95       	ret

000001f4 <_ZN6Nrf24l5csnHiEv>:
void Nrf24l::ceLow(){
	digitalWrite(cePin,LOW);
}

void Nrf24l::csnHi(){
	digitalWrite(csnPin,HIGH);
     1f4:	fc 01       	movw	r30, r24
     1f6:	82 81       	ldd	r24, Z+2	; 0x02
     1f8:	61 e0       	ldi	r22, 0x01	; 1
     1fa:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
}
     1fe:	08 95       	ret

00000200 <_ZN6Nrf24l7flushRxEv>:
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) );
	ceHi();
	configRegister(STATUS,(1 << TX_DS) | (1 << MAX_RT)); 
}

void Nrf24l::flushRx(){
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	8c 01       	movw	r16, r24
    csnLow();
     206:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer( FLUSH_RX );
     20a:	f8 01       	movw	r30, r16
     20c:	a6 81       	ldd	r26, Z+6	; 0x06
     20e:	b7 81       	ldd	r27, Z+7	; 0x07
     210:	ed 91       	ld	r30, X+
     212:	fc 91       	ld	r31, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	01 90       	ld	r0, Z+
     218:	f0 81       	ld	r31, Z
     21a:	e0 2d       	mov	r30, r0
     21c:	cd 01       	movw	r24, r26
     21e:	62 ee       	ldi	r22, 0xE2	; 226
     220:	09 95       	icall
    csnHi();
     222:	c8 01       	movw	r24, r16
     224:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6Nrf24l5csnHiEv>
}
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	08 95       	ret

0000022e <_ZN6Nrf24l13writeRegisterEhPhh>:
    spi->transfer(R_REGISTER | (REGISTER_MASK & reg));
    transferSync(value,value,len);
    csnHi();
}

void Nrf24l::writeRegister(uint8_t reg, uint8_t * value, uint8_t len) 
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	8c 01       	movw	r16, r24
     23c:	f6 2e       	mov	r15, r22
     23e:	6a 01       	movw	r12, r20
     240:	e2 2e       	mov	r14, r18
// Writes an array of bytes into inte the MiRF registers.
{
    csnLow();
     242:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(W_REGISTER | (REGISTER_MASK & reg));
     246:	f8 01       	movw	r30, r16
     248:	a6 81       	ldd	r26, Z+6	; 0x06
     24a:	b7 81       	ldd	r27, Z+7	; 0x07
     24c:	ed 91       	ld	r30, X+
     24e:	fc 91       	ld	r31, X
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	8f e1       	ldi	r24, 0x1F	; 31
     254:	f8 22       	and	r15, r24
     256:	80 e2       	ldi	r24, 0x20	; 32
     258:	f8 2a       	or	r15, r24
     25a:	01 90       	ld	r0, Z+
     25c:	f0 81       	ld	r31, Z
     25e:	e0 2d       	mov	r30, r0
     260:	cd 01       	movw	r24, r26
     262:	6f 2d       	mov	r22, r15
     264:	09 95       	icall
    transmitSync(value,len);
     266:	c8 01       	movw	r24, r16
     268:	b6 01       	movw	r22, r12
     26a:	4e 2d       	mov	r20, r14
     26c:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN6Nrf24l12transmitSyncEPhh>
    csnHi();
     270:	c8 01       	movw	r24, r16
     272:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6Nrf24l5csnHiEv>
}
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	08 95       	ret

00000284 <_ZN6Nrf24l12readRegisterEhPhh>:
    spi->transfer(W_REGISTER | (REGISTER_MASK & reg));
    spi->transfer(value);
    csnHi();
}

void Nrf24l::readRegister(uint8_t reg, uint8_t * value, uint8_t len)
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	8c 01       	movw	r16, r24
     292:	f6 2e       	mov	r15, r22
     294:	6a 01       	movw	r12, r20
     296:	e2 2e       	mov	r14, r18
// Reads an array of bytes from the given start position in the MiRF registers.
{
    csnLow();
     298:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(R_REGISTER | (REGISTER_MASK & reg));
     29c:	f8 01       	movw	r30, r16
     29e:	a6 81       	ldd	r26, Z+6	; 0x06
     2a0:	b7 81       	ldd	r27, Z+7	; 0x07
     2a2:	ed 91       	ld	r30, X+
     2a4:	fc 91       	ld	r31, X
     2a6:	11 97       	sbiw	r26, 0x01	; 1
     2a8:	8f e1       	ldi	r24, 0x1F	; 31
     2aa:	f8 22       	and	r15, r24
     2ac:	01 90       	ld	r0, Z+
     2ae:	f0 81       	ld	r31, Z
     2b0:	e0 2d       	mov	r30, r0
     2b2:	cd 01       	movw	r24, r26
     2b4:	6f 2d       	mov	r22, r15
     2b6:	09 95       	icall
    transferSync(value,value,len);
     2b8:	c8 01       	movw	r24, r16
     2ba:	b6 01       	movw	r22, r12
     2bc:	a6 01       	movw	r20, r12
     2be:	2e 2d       	mov	r18, r14
     2c0:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN6Nrf24l12transferSyncEPhS0_h>
    csnHi();
     2c4:	c8 01       	movw	r24, r16
     2c6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6Nrf24l5csnHiEv>
}
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	df 90       	pop	r13
     2d4:	cf 90       	pop	r12
     2d6:	08 95       	ret

000002d8 <_ZN6Nrf24l9getStatusEv>:
		return true;
	}
	return false;
}

uint8_t Nrf24l::getStatus(){
     2d8:	df 93       	push	r29
     2da:	cf 93       	push	r28
     2dc:	0f 92       	push	r0
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;
	readRegister(STATUS,&rv,1);
     2e2:	67 e0       	ldi	r22, 0x07	; 7
     2e4:	ae 01       	movw	r20, r28
     2e6:	4f 5f       	subi	r20, 0xFF	; 255
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	21 e0       	ldi	r18, 0x01	; 1
     2ec:	0e 94 42 01 	call	0x284	; 0x284 <_ZN6Nrf24l12readRegisterEhPhh>
	return rv;
}
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	0f 90       	pop	r0
     2f4:	cf 91       	pop	r28
     2f6:	df 91       	pop	r29
     2f8:	08 95       	ret

000002fa <_ZN6Nrf24l11rxFifoEmptyEv>:
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
    return !rxFifoEmpty();
}

extern bool Nrf24l::rxFifoEmpty(){
     2fa:	df 93       	push	r29
     2fc:	cf 93       	push	r28
     2fe:	0f 92       	push	r0
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
	uint8_t fifoStatus;

	readRegister(FIFO_STATUS,&fifoStatus,sizeof(fifoStatus));
     304:	67 e1       	ldi	r22, 0x17	; 23
     306:	ae 01       	movw	r20, r28
     308:	4f 5f       	subi	r20, 0xFF	; 255
     30a:	5f 4f       	sbci	r21, 0xFF	; 255
     30c:	21 e0       	ldi	r18, 0x01	; 1
     30e:	0e 94 42 01 	call	0x284	; 0x284 <_ZN6Nrf24l12readRegisterEhPhh>
     312:	89 81       	ldd	r24, Y+1	; 0x01
	return (fifoStatus & (1 << RX_EMPTY));
}
     314:	81 70       	andi	r24, 0x01	; 1
     316:	0f 90       	pop	r0
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	08 95       	ret

0000031e <_ZN6Nrf24l9dataReadyEv>:

	writeRegister(RX_ADDR_P0,adr,mirf_ADDR_LEN);
	writeRegister(TX_ADDR,adr,mirf_ADDR_LEN);
}

extern bool Nrf24l::dataReady() 
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	ec 01       	movw	r28, r24
// Checks if data is available for reading
{
    // See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = getStatus();
     324:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN6Nrf24l9getStatusEv>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
     328:	86 ff       	sbrs	r24, 6
     32a:	02 c0       	rjmp	.+4      	; 0x330 <_ZN6Nrf24l9dataReadyEv+0x12>
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	05 c0       	rjmp	.+10     	; 0x33a <_ZN6Nrf24l9dataReadyEv+0x1c>
    return !rxFifoEmpty();
     330:	ce 01       	movw	r24, r28
     332:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN6Nrf24l11rxFifoEmptyEv>
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	98 27       	eor	r25, r24
}
     33a:	89 2f       	mov	r24, r25
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <_ZN6Nrf24l14configRegisterEhh>:
    // So if we're going to clear RX_DR here, we need to check the RX FIFO
    // in the dataReady() function
    configRegister(STATUS,(1<<RX_DR));   // Reset status register
}

void Nrf24l::configRegister(uint8_t reg, uint8_t value)
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	7c 01       	movw	r14, r24
     34c:	16 2f       	mov	r17, r22
     34e:	04 2f       	mov	r16, r20
// Clocks only one byte into the given MiRF register
{
    csnLow();
     350:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(W_REGISTER | (REGISTER_MASK & reg));
     354:	f7 01       	movw	r30, r14
     356:	a6 81       	ldd	r26, Z+6	; 0x06
     358:	b7 81       	ldd	r27, Z+7	; 0x07
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	11 97       	sbiw	r26, 0x01	; 1
     360:	1f 71       	andi	r17, 0x1F	; 31
     362:	10 62       	ori	r17, 0x20	; 32
     364:	01 90       	ld	r0, Z+
     366:	f0 81       	ld	r31, Z
     368:	e0 2d       	mov	r30, r0
     36a:	cd 01       	movw	r24, r26
     36c:	61 2f       	mov	r22, r17
     36e:	09 95       	icall
    spi->transfer(value);
     370:	f7 01       	movw	r30, r14
     372:	a6 81       	ldd	r26, Z+6	; 0x06
     374:	b7 81       	ldd	r27, Z+7	; 0x07
     376:	ed 91       	ld	r30, X+
     378:	fc 91       	ld	r31, X
     37a:	11 97       	sbiw	r26, 0x01	; 1
     37c:	01 90       	ld	r0, Z+
     37e:	f0 81       	ld	r31, Z
     380:	e0 2d       	mov	r30, r0
     382:	cd 01       	movw	r24, r26
     384:	60 2f       	mov	r22, r16
     386:	09 95       	icall
    csnHi();
     388:	c7 01       	movw	r24, r14
     38a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6Nrf24l5csnHiEv>
}
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <_ZN6Nrf24l7getDataEPh>:
	return (fifoStatus & (1 << RX_EMPTY));
}



extern void Nrf24l::getData(uint8_t * data) 
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	8c 01       	movw	r16, r24
     3a2:	7b 01       	movw	r14, r22
// Reads payload bytes into data array
{
    csnLow();                               // Pull down chip select
     3a4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer( R_RX_PAYLOAD );            // Send cmd to read rx payload
     3a8:	f8 01       	movw	r30, r16
     3aa:	a6 81       	ldd	r26, Z+6	; 0x06
     3ac:	b7 81       	ldd	r27, Z+7	; 0x07
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	01 90       	ld	r0, Z+
     3b6:	f0 81       	ld	r31, Z
     3b8:	e0 2d       	mov	r30, r0
     3ba:	cd 01       	movw	r24, r26
     3bc:	61 e6       	ldi	r22, 0x61	; 97
     3be:	09 95       	icall
    transferSync(data,data,payload); // Read payload
     3c0:	c8 01       	movw	r24, r16
     3c2:	b7 01       	movw	r22, r14
     3c4:	a7 01       	movw	r20, r14
     3c6:	f8 01       	movw	r30, r16
     3c8:	25 81       	ldd	r18, Z+5	; 0x05
     3ca:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN6Nrf24l12transferSyncEPhS0_h>
    csnHi();                               // Pull up chip select
     3ce:	c8 01       	movw	r24, r16
     3d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6Nrf24l5csnHiEv>
    //  2) clear RX_DR IRQ, 3) read FIFO_STATUS to check if there are more 
    //  payloads available in RX FIFO, 4) if there are more data in RX FIFO,
    //  repeat from step 1)."
    // So if we're going to clear RX_DR here, we need to check the RX FIFO
    // in the dataReady() function
    configRegister(STATUS,(1<<RX_DR));   // Reset status register
     3d4:	c8 01       	movw	r24, r16
     3d6:	67 e0       	ldi	r22, 0x07	; 7
     3d8:	40 e4       	ldi	r20, 0x40	; 64
     3da:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN6Nrf24l14configRegisterEhh>
}
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <_ZN6Nrf24l5ceLowEv>:
void Nrf24l::ceHi(){
	digitalWrite(cePin,HIGH);
}

void Nrf24l::ceLow(){
	digitalWrite(cePin,LOW);
     3e8:	fc 01       	movw	r30, r24
     3ea:	81 81       	ldd	r24, Z+1	; 0x01
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
}
     3f2:	08 95       	ret

000003f4 <_ZN6Nrf24l4ceHiEv>:
	digitalWrite(pwrPin,HIGH);
	delay(10);
}

void Nrf24l::ceHi(){
	digitalWrite(cePin,HIGH);
     3f4:	fc 01       	movw	r30, r24
     3f6:	81 81       	ldd	r24, Z+1	; 0x01
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
}
     3fe:	08 95       	ret

00000400 <_ZN6Nrf24l9powerUpRxEv>:
	uint8_t rv;
	readRegister(STATUS,&rv,1);
	return rv;
}

void Nrf24l::powerUpRx(){
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	8c 01       	movw	r16, r24
	PTX = 0;
     406:	fc 01       	movw	r30, r24
     408:	10 82       	st	Z, r1
	ceLow();
     40a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN6Nrf24l5ceLowEv>
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) );
     40e:	c8 01       	movw	r24, r16
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	4b e0       	ldi	r20, 0x0B	; 11
     414:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN6Nrf24l14configRegisterEhh>
	ceHi();
     418:	c8 01       	movw	r24, r16
     41a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN6Nrf24l4ceHiEv>
	configRegister(STATUS,(1 << TX_DS) | (1 << MAX_RT)); 
     41e:	c8 01       	movw	r24, r16
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	40 e3       	ldi	r20, 0x30	; 48
     424:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN6Nrf24l14configRegisterEhh>
}
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <_ZN6Nrf24l9isSendingEv>:
 * Test if chip is still sending.
 * When sending has finished return chip to listening.
 *
 */

bool Nrf24l::isSending(){
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	ec 01       	movw	r28, r24
	uint8_t status;
	if(PTX){
     434:	88 81       	ld	r24, Y
     436:	88 23       	and	r24, r24
     438:	59 f0       	breq	.+22     	; 0x450 <_ZN6Nrf24l9isSendingEv+0x22>
		status = getStatus();
     43a:	ce 01       	movw	r24, r28
     43c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN6Nrf24l9getStatusEv>
	    	
		/*
		 *  if sending successful (TX_DS) or max retries exceded (MAX_RT).
		 */

		if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
     440:	80 73       	andi	r24, 0x30	; 48
     442:	11 f4       	brne	.+4      	; 0x448 <_ZN6Nrf24l9isSendingEv+0x1a>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	04 c0       	rjmp	.+8      	; 0x450 <_ZN6Nrf24l9isSendingEv+0x22>
			powerUpRx();
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 00 02 	call	0x400	; 0x400 <_ZN6Nrf24l9powerUpRxEv>
     44e:	80 e0       	ldi	r24, 0x00	; 0
		}

		return true;
	}
	return false;
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_ZN6Nrf24l6configEv>:
    spi->begin();

}


void Nrf24l::config() 
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	8c 01       	movw	r16, r24
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
// NB: channel and payload must be set now.
{
    // Set RF channel
	configRegister(RF_CH,channel);
     45c:	65 e0       	ldi	r22, 0x05	; 5
     45e:	f8 01       	movw	r30, r16
     460:	44 81       	ldd	r20, Z+4	; 0x04
     462:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN6Nrf24l14configRegisterEhh>

    // Set length of incoming payload 
	configRegister(RX_PW_P0, payload);
     466:	c8 01       	movw	r24, r16
     468:	61 e1       	ldi	r22, 0x11	; 17
     46a:	f8 01       	movw	r30, r16
     46c:	45 81       	ldd	r20, Z+5	; 0x05
     46e:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN6Nrf24l14configRegisterEhh>
	configRegister(RX_PW_P1, payload);
     472:	c8 01       	movw	r24, r16
     474:	62 e1       	ldi	r22, 0x12	; 18
     476:	f8 01       	movw	r30, r16
     478:	45 81       	ldd	r20, Z+5	; 0x05
     47a:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN6Nrf24l14configRegisterEhh>

    // Start receiver 
    powerUpRx();
     47e:	c8 01       	movw	r24, r16
     480:	0e 94 00 02 	call	0x400	; 0x400 <_ZN6Nrf24l9powerUpRxEv>
    flushRx();
     484:	c8 01       	movw	r24, r16
     486:	0e 94 00 01 	call	0x200	; 0x200 <_ZN6Nrf24l7flushRxEv>
}
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	08 95       	ret

00000490 <_ZN6Nrf24l8setRADDREPh>:

void Nrf24l::setRADDR(uint8_t * adr) 
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	8c 01       	movw	r16, r24
     49a:	7b 01       	movw	r14, r22
// Sets the receiving address
{
	ceLow();
     49c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN6Nrf24l5ceLowEv>
	writeRegister(RX_ADDR_P1,adr,mirf_ADDR_LEN);
     4a0:	c8 01       	movw	r24, r16
     4a2:	6b e0       	ldi	r22, 0x0B	; 11
     4a4:	a7 01       	movw	r20, r14
     4a6:	25 e0       	ldi	r18, 0x05	; 5
     4a8:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN6Nrf24l13writeRegisterEhPhh>
	ceHi();
     4ac:	c8 01       	movw	r24, r16
     4ae:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN6Nrf24l4ceHiEv>
}
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	08 95       	ret

000004bc <_ZN6Nrf24l10powerResetEv>:
void Nrf24l::powerUpTx(){
	PTX = 1;
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (0<<PRIM_RX) ) );
}

void Nrf24l::powerReset(){
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	8c 01       	movw	r16, r24
	digitalWrite(pwrPin, LOW);
     4c2:	fc 01       	movw	r30, r24
     4c4:	83 81       	ldd	r24, Z+3	; 0x03
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
	delay(10);
     4cc:	6a e0       	ldi	r22, 0x0A	; 10
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 4d 0a 	call	0x149a	; 0x149a <delay>
	digitalWrite(pwrPin,HIGH);
     4d8:	f8 01       	movw	r30, r16
     4da:	83 81       	ldd	r24, Z+3	; 0x03
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
	delay(10);
     4e2:	6a e0       	ldi	r22, 0x0A	; 10
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 4d 0a 	call	0x149a	; 0x149a <delay>
}
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	08 95       	ret

000004f4 <_ZN6Nrf24l4initEv>:
		spi->transfer(dataout[i]);
	}
}


void Nrf24l::init() 
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	8c 01       	movw	r16, r24
// Initializes pins to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{   
	pinMode(pwrPin, OUTPUT);
     4fa:	fc 01       	movw	r30, r24
     4fc:	83 81       	ldd	r24, Z+3	; 0x03
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pinMode>
    pinMode(cePin,OUTPUT);
     504:	f8 01       	movw	r30, r16
     506:	81 81       	ldd	r24, Z+1	; 0x01
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pinMode>
    pinMode(csnPin,OUTPUT);
     50e:	f8 01       	movw	r30, r16
     510:	82 81       	ldd	r24, Z+2	; 0x02
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pinMode>
    powerReset();
     518:	c8 01       	movw	r24, r16
     51a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN6Nrf24l10powerResetEv>

    ceLow();
     51e:	c8 01       	movw	r24, r16
     520:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN6Nrf24l5ceLowEv>
    csnHi();
     524:	c8 01       	movw	r24, r16
     526:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6Nrf24l5csnHiEv>

    // Initialize spi module
    spi->begin();
     52a:	f8 01       	movw	r30, r16
     52c:	a6 81       	ldd	r26, Z+6	; 0x06
     52e:	b7 81       	ldd	r27, Z+7	; 0x07
     530:	ed 91       	ld	r30, X+
     532:	fc 91       	ld	r31, X
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	02 80       	ldd	r0, Z+2	; 0x02
     538:	f3 81       	ldd	r31, Z+3	; 0x03
     53a:	e0 2d       	mov	r30, r0
     53c:	cd 01       	movw	r24, r26
     53e:	09 95       	icall

}
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <_ZN21MirfHardwareSpiDriver8transferEh>:
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     546:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
     548:	0d b4       	in	r0, 0x2d	; 45
     54a:	07 fe       	sbrs	r0, 7
     54c:	fd cf       	rjmp	.-6      	; 0x548 <_ZN21MirfHardwareSpiDriver8transferEh+0x2>
    ;
  return SPDR;
     54e:	8e b5       	in	r24, 0x2e	; 46
#include "MirfHardwareSpiDriver.h"
uint8_t MirfHardwareSpiDriver::transfer(uint8_t data){
	return SPI.transfer(data);
}
     550:	08 95       	ret

00000552 <_ZN21MirfHardwareSpiDriver3endEv>:
	SPI.setDataMode(SPI_MODE0);
	SPI.setClockDivider(SPI_2XCLOCK_MASK);
}

void MirfHardwareSpiDriver::end(){
}
     552:	08 95       	ret

00000554 <_GLOBAL__I__ZN21MirfHardwareSpiDriver8transferEh>:
#ifndef __MIRF_HARDWARE_SPI_DRIVER
#define __MIRF_HARDWARE_SPI_DRIVER 

#include "../SPI.h"

class MirfHardwareSpiDriver : public MirfSpiDriver {
     554:	8e e2       	ldi	r24, 0x2E	; 46
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 4d 01 	sts	0x014D, r25
     55c:	80 93 4c 01 	sts	0x014C, r24

MirfHardwareSpiDriver MirfHardwareSpi;
     560:	08 95       	ret

00000562 <_ZN21MirfHardwareSpiDriver5beginEv>:
uint8_t MirfHardwareSpiDriver::transfer(uint8_t data){
	return SPI.transfer(data);
}

void MirfHardwareSpiDriver::begin(){
	SPI.begin();
     562:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN8SPIClass5beginEv>
	SPI.setDataMode(SPI_MODE0);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN8SPIClass11setDataModeEh>
	SPI.setClockDivider(SPI_2XCLOCK_MASK);
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN8SPIClass15setClockDividerEh>
}
     572:	08 95       	ret

00000574 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
     574:	9c b5       	in	r25, 0x2c	; 44
     576:	93 7f       	andi	r25, 0xF3	; 243
     578:	98 2b       	or	r25, r24
     57a:	9c bd       	out	0x2c, r25	; 44
}
     57c:	08 95       	ret

0000057e <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     57e:	2c b5       	in	r18, 0x2c	; 44
     580:	38 2f       	mov	r19, r24
     582:	33 70       	andi	r19, 0x03	; 3
     584:	2c 7f       	andi	r18, 0xFC	; 252
     586:	32 2b       	or	r19, r18
     588:	3c bd       	out	0x2c, r19	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
     58a:	2d b5       	in	r18, 0x2d	; 45
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	95 95       	asr	r25
     590:	87 95       	ror	r24
     592:	95 95       	asr	r25
     594:	87 95       	ror	r24
     596:	81 70       	andi	r24, 0x01	; 1
     598:	2e 7f       	andi	r18, 0xFE	; 254
     59a:	82 2b       	or	r24, r18
     59c:	8d bd       	out	0x2d, r24	; 45
}
     59e:	08 95       	ret

000005a0 <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  pinMode(SCK, OUTPUT);
     5a0:	8d e0       	ldi	r24, 0x0D	; 13
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pinMode>
  pinMode(MOSI, OUTPUT);
     5a8:	8b e0       	ldi	r24, 0x0B	; 11
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pinMode>
  pinMode(SS, OUTPUT);
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pinMode>
  
  digitalWrite(SCK, LOW);
     5b8:	8d e0       	ldi	r24, 0x0D	; 13
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
  digitalWrite(MOSI, LOW);
     5c0:	8b e0       	ldi	r24, 0x0B	; 11
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
  digitalWrite(SS, HIGH);
     5c8:	8a e0       	ldi	r24, 0x0A	; 10
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     5d0:	8c b5       	in	r24, 0x2c	; 44
     5d2:	80 61       	ori	r24, 0x10	; 16
     5d4:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     5d6:	8c b5       	in	r24, 0x2c	; 44
     5d8:	80 64       	ori	r24, 0x40	; 64
     5da:	8c bd       	out	0x2c, r24	; 44
}
     5dc:	08 95       	ret

000005de <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
     5de:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
     5e0:	80 91 4e 01 	lds	r24, 0x014E
     5e4:	8c 30       	cpi	r24, 0x0C	; 12
     5e6:	90 f4       	brcc	.+36     	; 0x60c <_ZN5ServoC1Ev+0x2e>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
     5e8:	80 83       	st	Z, r24
     5ea:	8f 5f       	subi	r24, 0xFF	; 255
     5ec:	80 93 4e 01 	sts	0x014E, r24
     5f0:	81 50       	subi	r24, 0x01	; 1
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	fc 01       	movw	r30, r24
     5f6:	ee 0f       	add	r30, r30
     5f8:	ff 1f       	adc	r31, r31
     5fa:	e8 0f       	add	r30, r24
     5fc:	f9 1f       	adc	r31, r25
     5fe:	e1 5b       	subi	r30, 0xB1	; 177
     600:	fe 4f       	sbci	r31, 0xFE	; 254
     602:	88 eb       	ldi	r24, 0xB8	; 184
     604:	9b e0       	ldi	r25, 0x0B	; 11
     606:	92 83       	std	Z+2, r25	; 0x02
     608:	81 83       	std	Z+1, r24	; 0x01
     60a:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	80 83       	st	Z, r24
     610:	08 95       	ret

00000612 <_ZN5Servo17writeMicrosecondsEi>:
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
     612:	fc 01       	movw	r30, r24
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     614:	20 81       	ld	r18, Z
  if( (channel >= 0) && (channel < MAX_SERVOS) )   // ensure channel is valid
     616:	2c 30       	cpi	r18, 0x0C	; 12
     618:	08 f0       	brcs	.+2      	; 0x61c <_ZN5Servo17writeMicrosecondsEi+0xa>
     61a:	41 c0       	rjmp	.+130    	; 0x69e <_ZN5Servo17writeMicrosecondsEi+0x8c>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     61c:	81 81       	ldd	r24, Z+1	; 0x01
     61e:	99 27       	eor	r25, r25
     620:	87 fd       	sbrc	r24, 7
     622:	90 95       	com	r25
     624:	48 e8       	ldi	r20, 0x88	; 136
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	48 1b       	sub	r20, r24
     62a:	59 0b       	sbc	r21, r25
     62c:	44 0f       	add	r20, r20
     62e:	55 1f       	adc	r21, r21
     630:	44 0f       	add	r20, r20
     632:	55 1f       	adc	r21, r21
     634:	64 17       	cp	r22, r20
     636:	75 07       	cpc	r23, r21
     638:	84 f0       	brlt	.+32     	; 0x65a <_ZN5Servo17writeMicrosecondsEi+0x48>
     63a:	82 81       	ldd	r24, Z+2	; 0x02
     63c:	99 27       	eor	r25, r25
     63e:	87 fd       	sbrc	r24, 7
     640:	90 95       	com	r25
     642:	48 e5       	ldi	r20, 0x58	; 88
     644:	52 e0       	ldi	r21, 0x02	; 2
     646:	48 1b       	sub	r20, r24
     648:	59 0b       	sbc	r21, r25
     64a:	44 0f       	add	r20, r20
     64c:	55 1f       	adc	r21, r21
     64e:	44 0f       	add	r20, r20
     650:	55 1f       	adc	r21, r21
     652:	64 17       	cp	r22, r20
     654:	75 07       	cpc	r23, r21
     656:	0c f4       	brge	.+2      	; 0x65a <_ZN5Servo17writeMicrosecondsEi+0x48>
     658:	ab 01       	movw	r20, r22
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     65a:	42 50       	subi	r20, 0x02	; 2
     65c:	50 40       	sbci	r21, 0x00	; 0
     65e:	ca 01       	movw	r24, r20
     660:	aa 27       	eor	r26, r26
     662:	97 fd       	sbrc	r25, 7
     664:	a0 95       	com	r26
     666:	ba 2f       	mov	r27, r26
     668:	44 e0       	ldi	r20, 0x04	; 4
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	aa 1f       	adc	r26, r26
     670:	bb 1f       	adc	r27, r27
     672:	4a 95       	dec	r20
     674:	d1 f7       	brne	.-12     	; 0x66a <_ZN5Servo17writeMicrosecondsEi+0x58>
     676:	33 e0       	ldi	r19, 0x03	; 3
     678:	b6 95       	lsr	r27
     67a:	a7 95       	ror	r26
     67c:	97 95       	ror	r25
     67e:	87 95       	ror	r24
     680:	3a 95       	dec	r19
     682:	d1 f7       	brne	.-12     	; 0x678 <_ZN5Servo17writeMicrosecondsEi+0x66>

    uint8_t oldSREG = SREG;
     684:	4f b7       	in	r20, 0x3f	; 63
    cli();
     686:	f8 94       	cli
    servos[channel].ticks = value;  
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	f9 01       	movw	r30, r18
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e2 0f       	add	r30, r18
     692:	f3 1f       	adc	r31, r19
     694:	e1 5b       	subi	r30, 0xB1	; 177
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	92 83       	std	Z+2, r25	; 0x02
     69a:	81 83       	std	Z+1, r24	; 0x01
    SREG = oldSREG;   
     69c:	4f bf       	out	0x3f, r20	; 63
     69e:	08 95       	ret

000006a0 <_ZN5Servo6attachEiii>:
uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
     6b0:	16 2f       	mov	r17, r22
     6b2:	7a 01       	movw	r14, r20
     6b4:	69 01       	movw	r12, r18
{
  if(this->servoIndex < MAX_SERVOS ) {
     6b6:	88 81       	ld	r24, Y
     6b8:	8c 30       	cpi	r24, 0x0C	; 12
     6ba:	08 f0       	brcs	.+2      	; 0x6be <_ZN5Servo6attachEiii+0x1e>
     6bc:	64 c0       	rjmp	.+200    	; 0x786 <_ZN5Servo6attachEiii+0xe6>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
     6be:	86 2f       	mov	r24, r22
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pinMode>
    servos[this->servoIndex].Pin.nbr = pin;  
     6c6:	88 81       	ld	r24, Y
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	e8 0f       	add	r30, r24
     6d2:	f9 1f       	adc	r31, r25
     6d4:	e1 5b       	subi	r30, 0xB1	; 177
     6d6:	fe 4f       	sbci	r31, 0xFE	; 254
     6d8:	1f 73       	andi	r17, 0x3F	; 63
     6da:	80 81       	ld	r24, Z
     6dc:	80 7c       	andi	r24, 0xC0	; 192
     6de:	81 2b       	or	r24, r17
     6e0:	80 83       	st	Z, r24
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
     6e2:	80 e2       	ldi	r24, 0x20	; 32
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	8e 19       	sub	r24, r14
     6e8:	9f 09       	sbc	r25, r15
     6ea:	64 e0       	ldi	r22, 0x04	; 4
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	0e 94 86 0b 	call	0x170c	; 0x170c <__divmodhi4>
     6f2:	69 83       	std	Y+1, r22	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
     6f4:	80 e6       	ldi	r24, 0x60	; 96
     6f6:	99 e0       	ldi	r25, 0x09	; 9
     6f8:	8c 19       	sub	r24, r12
     6fa:	9d 09       	sbc	r25, r13
     6fc:	64 e0       	ldi	r22, 0x04	; 4
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	0e 94 86 0b 	call	0x170c	; 0x170c <__divmodhi4>
     704:	6a 83       	std	Y+2, r22	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
     706:	a8 81       	ld	r26, Y
     708:	8a 2f       	mov	r24, r26
     70a:	6c e0       	ldi	r22, 0x0C	; 12
     70c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__udivmodqi4>
     710:	68 2f       	mov	r22, r24

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	ac 01       	movw	r20, r24
     716:	44 0f       	add	r20, r20
     718:	55 1f       	adc	r21, r21
     71a:	48 0f       	add	r20, r24
     71c:	59 1f       	adc	r21, r25
     71e:	44 0f       	add	r20, r20
     720:	55 1f       	adc	r21, r21
     722:	44 0f       	add	r20, r20
     724:	55 1f       	adc	r21, r21
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	c9 01       	movw	r24, r18
     72c:	84 0f       	add	r24, r20
     72e:	95 1f       	adc	r25, r21
     730:	fc 01       	movw	r30, r24
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	e8 0f       	add	r30, r24
     738:	f9 1f       	adc	r31, r25
     73a:	e1 5b       	subi	r30, 0xB1	; 177
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	80 81       	ld	r24, Z
     740:	86 fd       	sbrc	r24, 6
     742:	15 c0       	rjmp	.+42     	; 0x76e <_ZN5Servo6attachEiii+0xce>
     744:	2f 5f       	subi	r18, 0xFF	; 255
     746:	3f 4f       	sbci	r19, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
     748:	2c 30       	cpi	r18, 0x0C	; 12
     74a:	31 05       	cpc	r19, r1
     74c:	71 f7       	brne	.-36     	; 0x72a <_ZN5Servo6attachEiii+0x8a>
     74e:	24 c0       	rjmp	.+72     	; 0x798 <_ZN5Servo6attachEiii+0xf8>

static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    TCCR1A = 0;             // normal counting mode 
     750:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	80 93 81 00 	sts	0x0081, r24
    TCNT1 = 0;              // clear the timer count 
     75a:	10 92 85 00 	sts	0x0085, r1
     75e:	10 92 84 00 	sts	0x0084, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
     762:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
     764:	80 91 6f 00 	lds	r24, 0x006F
     768:	82 60       	ori	r24, 0x02	; 2
     76a:	80 93 6f 00 	sts	0x006F, r24
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
     76e:	8a 2f       	mov	r24, r26
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	e1 5b       	subi	r30, 0xB1	; 177
     77e:	fe 4f       	sbci	r31, 0xFE	; 254
     780:	80 81       	ld	r24, Z
     782:	80 64       	ori	r24, 0x40	; 64
     784:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
}
     786:	88 81       	ld	r24, Y
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	08 95       	ret


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
     798:	66 23       	and	r22, r22
     79a:	d1 f2       	breq	.-76     	; 0x750 <_ZN5Servo6attachEiii+0xb0>
     79c:	e8 cf       	rjmp	.-48     	; 0x76e <_ZN5Servo6attachEiii+0xce>

0000079e <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
     79e:	40 e2       	ldi	r20, 0x20	; 32
     7a0:	52 e0       	ldi	r21, 0x02	; 2
     7a2:	20 e6       	ldi	r18, 0x60	; 96
     7a4:	39 e0       	ldi	r19, 0x09	; 9
     7a6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZN5Servo6attachEiii>
}
     7aa:	08 95       	ret

000007ac <__vector_11>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	2f 93       	push	r18
     7b8:	3f 93       	push	r19
     7ba:	4f 93       	push	r20
     7bc:	5f 93       	push	r21
     7be:	6f 93       	push	r22
     7c0:	7f 93       	push	r23
     7c2:	8f 93       	push	r24
     7c4:	9f 93       	push	r25
     7c6:	af 93       	push	r26
     7c8:	bf 93       	push	r27
     7ca:	ef 93       	push	r30
     7cc:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
     7ce:	80 91 73 01 	lds	r24, 0x0173
     7d2:	87 ff       	sbrs	r24, 7
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <__vector_11+0x34>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
     7d6:	10 92 85 00 	sts	0x0085, r1
     7da:	10 92 84 00 	sts	0x0084, r1
     7de:	2b c0       	rjmp	.+86     	; 0x836 <__vector_11+0x8a>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
     7e0:	20 91 73 01 	lds	r18, 0x0173
     7e4:	33 27       	eor	r19, r19
     7e6:	27 fd       	sbrc	r18, 7
     7e8:	30 95       	com	r19
     7ea:	80 91 4e 01 	lds	r24, 0x014E
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	28 17       	cp	r18, r24
     7f2:	39 07       	cpc	r19, r25
     7f4:	04 f5       	brge	.+64     	; 0x836 <__vector_11+0x8a>
     7f6:	80 91 73 01 	lds	r24, 0x0173
     7fa:	99 27       	eor	r25, r25
     7fc:	87 fd       	sbrc	r24, 7
     7fe:	90 95       	com	r25
     800:	fc 01       	movw	r30, r24
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	e8 0f       	add	r30, r24
     808:	f9 1f       	adc	r31, r25
     80a:	e1 5b       	subi	r30, 0xB1	; 177
     80c:	fe 4f       	sbci	r31, 0xFE	; 254
     80e:	80 81       	ld	r24, Z
     810:	86 ff       	sbrs	r24, 6
     812:	11 c0       	rjmp	.+34     	; 0x836 <__vector_11+0x8a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
     814:	80 91 73 01 	lds	r24, 0x0173
     818:	99 27       	eor	r25, r25
     81a:	87 fd       	sbrc	r24, 7
     81c:	90 95       	com	r25
     81e:	fc 01       	movw	r30, r24
     820:	ee 0f       	add	r30, r30
     822:	ff 1f       	adc	r31, r31
     824:	e8 0f       	add	r30, r24
     826:	f9 1f       	adc	r31, r25
     828:	e1 5b       	subi	r30, 0xB1	; 177
     82a:	fe 4f       	sbci	r31, 0xFE	; 254
     82c:	80 81       	ld	r24, Z
     82e:	8f 73       	andi	r24, 0x3F	; 63
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
     836:	80 91 73 01 	lds	r24, 0x0173
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	80 93 73 01 	sts	0x0173, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     840:	20 91 73 01 	lds	r18, 0x0173
     844:	33 27       	eor	r19, r19
     846:	27 fd       	sbrc	r18, 7
     848:	30 95       	com	r19
     84a:	80 91 4e 01 	lds	r24, 0x014E
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	28 17       	cp	r18, r24
     852:	39 07       	cpc	r19, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__vector_11+0xac>
     856:	4e c0       	rjmp	.+156    	; 0x8f4 <__vector_11+0x148>
     858:	80 91 73 01 	lds	r24, 0x0173
     85c:	8c 30       	cpi	r24, 0x0C	; 12
     85e:	0c f0       	brlt	.+2      	; 0x862 <__vector_11+0xb6>
     860:	49 c0       	rjmp	.+146    	; 0x8f4 <__vector_11+0x148>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     862:	20 91 84 00 	lds	r18, 0x0084
     866:	30 91 85 00 	lds	r19, 0x0085
     86a:	80 91 73 01 	lds	r24, 0x0173
     86e:	99 27       	eor	r25, r25
     870:	87 fd       	sbrc	r24, 7
     872:	90 95       	com	r25
     874:	fc 01       	movw	r30, r24
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	e8 0f       	add	r30, r24
     87c:	f9 1f       	adc	r31, r25
     87e:	e1 5b       	subi	r30, 0xB1	; 177
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	81 81       	ldd	r24, Z+1	; 0x01
     884:	92 81       	ldd	r25, Z+2	; 0x02
     886:	28 0f       	add	r18, r24
     888:	39 1f       	adc	r19, r25
     88a:	30 93 89 00 	sts	0x0089, r19
     88e:	20 93 88 00 	sts	0x0088, r18
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     892:	80 91 73 01 	lds	r24, 0x0173
     896:	99 27       	eor	r25, r25
     898:	87 fd       	sbrc	r24, 7
     89a:	90 95       	com	r25
     89c:	fc 01       	movw	r30, r24
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	e8 0f       	add	r30, r24
     8a4:	f9 1f       	adc	r31, r25
     8a6:	e1 5b       	subi	r30, 0xB1	; 177
     8a8:	fe 4f       	sbci	r31, 0xFE	; 254
     8aa:	80 81       	ld	r24, Z
     8ac:	86 ff       	sbrs	r24, 6
     8ae:	2a c0       	rjmp	.+84     	; 0x904 <__stack+0x5>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
     8b0:	80 91 73 01 	lds	r24, 0x0173
     8b4:	99 27       	eor	r25, r25
     8b6:	87 fd       	sbrc	r24, 7
     8b8:	90 95       	com	r25
     8ba:	fc 01       	movw	r30, r24
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	e8 0f       	add	r30, r24
     8c2:	f9 1f       	adc	r31, r25
     8c4:	e1 5b       	subi	r30, 0xB1	; 177
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	80 81       	ld	r24, Z
     8ca:	8f 73       	andi	r24, 0x3F	; 63
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
     8d2:	18 c0       	rjmp	.+48     	; 0x904 <__stack+0x5>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
     8d4:	80 e4       	ldi	r24, 0x40	; 64
     8d6:	9c e9       	ldi	r25, 0x9C	; 156
     8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <__vector_11+0x138>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     8da:	80 91 84 00 	lds	r24, 0x0084
     8de:	90 91 85 00 	lds	r25, 0x0085
     8e2:	04 96       	adiw	r24, 0x04	; 4
     8e4:	90 93 89 00 	sts	0x0089, r25
     8e8:	80 93 88 00 	sts	0x0088, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	80 93 73 01 	sts	0x0173, r24
     8f2:	08 c0       	rjmp	.+16     	; 0x904 <__stack+0x5>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
     8f4:	80 91 84 00 	lds	r24, 0x0084
     8f8:	90 91 85 00 	lds	r25, 0x0085
     8fc:	84 54       	subi	r24, 0x44	; 68
     8fe:	9c 49       	sbci	r25, 0x9C	; 156
     900:	48 f3       	brcs	.-46     	; 0x8d4 <__vector_11+0x128>
     902:	eb cf       	rjmp	.-42     	; 0x8da <__vector_11+0x12e>
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
     904:	ff 91       	pop	r31
     906:	ef 91       	pop	r30
     908:	bf 91       	pop	r27
     90a:	af 91       	pop	r26
     90c:	9f 91       	pop	r25
     90e:	8f 91       	pop	r24
     910:	7f 91       	pop	r23
     912:	6f 91       	pop	r22
     914:	5f 91       	pop	r21
     916:	4f 91       	pop	r20
     918:	3f 91       	pop	r19
     91a:	2f 91       	pop	r18
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <_Z16radio_check_recvP12radio_packet>:
 * Checks if a packet has been received.
 * If a packet has been received, data is added to radio_packet pointer
 * and 1 is returned.
 * Otherwise, 0 is returned.
 */
int radio_check_recv(radio_packet * packet) {
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ec 01       	movw	r28, r24
	/*
	 * If a packet has been received.
	 */
	if (!Mirf.isSending() && Mirf.dataReady()) {
     92c:	84 e4       	ldi	r24, 0x44	; 68
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN6Nrf24l9isSendingEv>
     934:	88 23       	and	r24, r24
     936:	71 f4       	brne	.+28     	; 0x954 <_Z16radio_check_recvP12radio_packet+0x2e>
     938:	84 e4       	ldi	r24, 0x44	; 68
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN6Nrf24l9dataReadyEv>
     940:	88 23       	and	r24, r24
     942:	41 f0       	breq	.+16     	; 0x954 <_Z16radio_check_recvP12radio_packet+0x2e>
		/*
		 * Get load the packet into the buffer.
		 */
		Mirf.getData(packet->data);
     944:	84 e4       	ldi	r24, 0x44	; 68
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	be 01       	movw	r22, r28
     94a:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN6Nrf24l7getDataEPh>
     94e:	21 e0       	ldi	r18, 0x01	; 1
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	02 c0       	rjmp	.+4      	; 0x958 <_Z16radio_check_recvP12radio_packet+0x32>
		return 1;
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		/* No data */
		return 0;
	}
}
     958:	c9 01       	movw	r24, r18
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <_Z10radio_initPcii>:
 */

/**
 * Initializes nRF24L01 Radio
 */
void radio_init(char * addr, int channel, int payload) {
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	7c 01       	movw	r14, r24
     96e:	c6 2e       	mov	r12, r22
     970:	d4 2e       	mov	r13, r20

	// Reset Radio in case it is in a bad state
	pinMode(4, OUTPUT);
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pinMode>
	digitalWrite(4, LOW);
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
	delay(100);
     982:	64 e6       	ldi	r22, 0x64	; 100
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 4d 0a 	call	0x149a	; 0x149a <delay>
	digitalWrite(4, HIGH);
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	0e 94 07 0b 	call	0x160e	; 0x160e <digitalWrite>
	delay(100);
     996:	64 e6       	ldi	r22, 0x64	; 100
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 4d 0a 	call	0x149a	; 0x149a <delay>

	/*
	 * Setup pins / SPI.
	 */
	Mirf.cePin = 8;
     9a2:	88 e0       	ldi	r24, 0x08	; 8
     9a4:	80 93 45 01 	sts	0x0145, r24
	Mirf.csnPin = 9;
     9a8:	89 e0       	ldi	r24, 0x09	; 9
     9aa:	80 93 46 01 	sts	0x0146, r24

	Mirf.spi = &MirfHardwareSpi;
     9ae:	8c e4       	ldi	r24, 0x4C	; 76
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	90 93 4b 01 	sts	0x014B, r25
     9b6:	80 93 4a 01 	sts	0x014A, r24
	Mirf.init();
     9ba:	04 e4       	ldi	r16, 0x44	; 68
     9bc:	11 e0       	ldi	r17, 0x01	; 1
     9be:	c8 01       	movw	r24, r16
     9c0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN6Nrf24l4initEv>

	/*
	 * Configure reciving address.
	 */
	Mirf.setRADDR((byte *)addr);
     9c4:	c8 01       	movw	r24, r16
     9c6:	b7 01       	movw	r22, r14
     9c8:	0e 94 48 02 	call	0x490	; 0x490 <_ZN6Nrf24l8setRADDREPh>
	 * Set the payload length to sizeof(unsigned long) the
	 * return type of millis().
	 *
	 * NB: payload on client and server must be the same.
	 */
	Mirf.payload = payload;
     9cc:	d0 92 49 01 	sts	0x0149, r13
	 *
	 * Mirf.channel = 10;
	 *
	 * NB: Make sure channel is legal in your area.
	 */
	Mirf.channel = channel;
     9d0:	c0 92 48 01 	sts	0x0148, r12

	Mirf.config();
     9d4:	c8 01       	movw	r24, r16
     9d6:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN6Nrf24l6configEv>
}
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	08 95       	ret

000009e8 <_Z9radio_irqv>:
Servo motor1;
Servo motor2;
Servo motor3;

void radio_irq() {
	radio_flag = 1;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 7d 01 	sts	0x017D, r25
     9f0:	80 93 7c 01 	sts	0x017C, r24
}
     9f4:	08 95       	ret

000009f6 <_GLOBAL__I_mSpeeds>:
#include "copter_control.h"

int mSpeeds[4];
volatile int radio_flag = 0;

Servo motor0;
     9f6:	8e e7       	ldi	r24, 0x7E	; 126
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN5ServoC1Ev>
Servo motor1;
     9fe:	81 e8       	ldi	r24, 0x81	; 129
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN5ServoC1Ev>
Servo motor2;
     a06:	84 e8       	ldi	r24, 0x84	; 132
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN5ServoC1Ev>
Servo motor3;
     a0e:	87 e8       	ldi	r24, 0x87	; 135
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN5ServoC1Ev>
//	packet.vars.ack = 1;
//
//	radio_send_nowait(&packet, BASE_ADDR);
//	// I think it can only send every 10ms... read the spec
//	delay(100); // Quick fix - wait for radio. Later check time since last sent with millis() in send?
}
     a16:	08 95       	ret

00000a18 <_Z18motor_write_speedsv>:

	delay(200);
}

void motor_write_speeds() {
	motor0.writeMicroseconds(mSpeeds[0]);
     a18:	60 91 74 01 	lds	r22, 0x0174
     a1c:	70 91 75 01 	lds	r23, 0x0175
     a20:	8e e7       	ldi	r24, 0x7E	; 126
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Servo17writeMicrosecondsEi>
	motor1.writeMicroseconds(mSpeeds[1]);
     a28:	60 91 76 01 	lds	r22, 0x0176
     a2c:	70 91 77 01 	lds	r23, 0x0177
     a30:	81 e8       	ldi	r24, 0x81	; 129
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Servo17writeMicrosecondsEi>
	motor2.writeMicroseconds(mSpeeds[2]);
     a38:	60 91 78 01 	lds	r22, 0x0178
     a3c:	70 91 79 01 	lds	r23, 0x0179
     a40:	84 e8       	ldi	r24, 0x84	; 132
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Servo17writeMicrosecondsEi>
	motor3.writeMicroseconds(mSpeeds[3]);
     a48:	60 91 7a 01 	lds	r22, 0x017A
     a4c:	70 91 7b 01 	lds	r23, 0x017B
     a50:	87 e8       	ldi	r24, 0x87	; 135
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Servo17writeMicrosecondsEi>
}
     a58:	08 95       	ret

00000a5a <_Z13motor_set_alli>:

void motor_set_all(int setSpeed) {
	for (int i=0; i<4; i++)
		mSpeeds[i] = setSpeed;
     a5a:	90 93 75 01 	sts	0x0175, r25
     a5e:	80 93 74 01 	sts	0x0174, r24
     a62:	90 93 77 01 	sts	0x0177, r25
     a66:	80 93 76 01 	sts	0x0176, r24
     a6a:	90 93 79 01 	sts	0x0179, r25
     a6e:	80 93 78 01 	sts	0x0178, r24
     a72:	90 93 7b 01 	sts	0x017B, r25
     a76:	80 93 7a 01 	sts	0x017A, r24

	motor_write_speeds();
     a7a:	0e 94 0c 05 	call	0xa18	; 0xa18 <_Z18motor_write_speedsv>
}
     a7e:	08 95       	ret

00000a80 <loop>:

	// DEBUG
	Serial.println("Listening...");
}

void loop() {
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	00 d0       	rcall	.+0      	; 0xa86 <loop+0x6>
     a86:	00 d0       	rcall	.+0      	; 0xa88 <loop+0x8>
     a88:	0f 92       	push	r0
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
//		motor_stop_all();
//		Serial.println("no ack recvd");
//	}

	// Check if data received
	if (!radio_check_recv(&packet)) {
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	0e 94 93 04 	call	0x926	; 0x926 <_Z16radio_check_recvP12radio_packet>
     a96:	89 2b       	or	r24, r25
     a98:	09 f4       	brne	.+2      	; 0xa9c <loop+0x1c>
     a9a:	5b c0       	rjmp	.+182    	; 0xb52 <loop+0xd2>
//	if (packet.vars.ack == 1) {
//		ackRecvd = millis();
//		return;
//	}

	switch (packet.vars.motor) {
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	83 33       	cpi	r24, 0x33	; 51
     aa0:	b9 f1       	breq	.+110    	; 0xb10 <loop+0x90>
     aa2:	84 33       	cpi	r24, 0x34	; 52
     aa4:	3c f4       	brge	.+14     	; 0xab4 <loop+0x34>
     aa6:	81 33       	cpi	r24, 0x31	; 49
     aa8:	29 f1       	breq	.+74     	; 0xaf4 <loop+0x74>
     aaa:	82 33       	cpi	r24, 0x32	; 50
     aac:	54 f5       	brge	.+84     	; 0xb02 <loop+0x82>
     aae:	80 33       	cpi	r24, 0x30	; 48
     ab0:	b9 f5       	brne	.+110    	; 0xb20 <loop+0xa0>
     ab2:	19 c0       	rjmp	.+50     	; 0xae6 <loop+0x66>
     ab4:	83 36       	cpi	r24, 0x63	; 99
     ab6:	49 f0       	breq	.+18     	; 0xaca <loop+0x4a>
     ab8:	86 37       	cpi	r24, 0x76	; 118
     aba:	71 f0       	breq	.+28     	; 0xad8 <loop+0x58>
     abc:	81 36       	cpi	r24, 0x61	; 97
     abe:	81 f5       	brne	.+96     	; 0xb20 <loop+0xa0>
	case 'a':
		motor_set_all(packet.vars.speed);
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z13motor_set_alli>
     ac8:	2b c0       	rjmp	.+86     	; 0xb20 <loop+0xa0>
		break;

	case 'c': // clockwise
		mSpeeds[0] = packet.vars.speed;
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	9b 81       	ldd	r25, Y+3	; 0x03
     ace:	90 93 75 01 	sts	0x0175, r25
     ad2:	80 93 74 01 	sts	0x0174, r24
     ad6:	17 c0       	rjmp	.+46     	; 0xb06 <loop+0x86>
		mSpeeds[2] = packet.vars.speed;
		motor_write_speeds();
		break;
	case 'v': // counter clockwise
		mSpeeds[1] = packet.vars.speed;
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	9b 81       	ldd	r25, Y+3	; 0x03
     adc:	90 93 77 01 	sts	0x0177, r25
     ae0:	80 93 76 01 	sts	0x0176, r24
     ae4:	17 c0       	rjmp	.+46     	; 0xb14 <loop+0x94>
		mSpeeds[3] = packet.vars.speed;
		motor_write_speeds();
		break;

	case '0':
		mSpeeds[0] = packet.vars.speed;
     ae6:	8a 81       	ldd	r24, Y+2	; 0x02
     ae8:	9b 81       	ldd	r25, Y+3	; 0x03
     aea:	90 93 75 01 	sts	0x0175, r25
     aee:	80 93 74 01 	sts	0x0174, r24
     af2:	14 c0       	rjmp	.+40     	; 0xb1c <loop+0x9c>
		motor_write_speeds();
		break;
	case '1':
		mSpeeds[1] = packet.vars.speed;
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	9b 81       	ldd	r25, Y+3	; 0x03
     af8:	90 93 77 01 	sts	0x0177, r25
     afc:	80 93 76 01 	sts	0x0176, r24
     b00:	0d c0       	rjmp	.+26     	; 0xb1c <loop+0x9c>
		motor_write_speeds();
		break;
	case '2':
		mSpeeds[2] = packet.vars.speed;
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	9b 81       	ldd	r25, Y+3	; 0x03
     b06:	90 93 79 01 	sts	0x0179, r25
     b0a:	80 93 78 01 	sts	0x0178, r24
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <loop+0x9c>
		motor_write_speeds();
		break;
	case '3':
		mSpeeds[3] = packet.vars.speed;
     b10:	8a 81       	ldd	r24, Y+2	; 0x02
     b12:	9b 81       	ldd	r25, Y+3	; 0x03
     b14:	90 93 7b 01 	sts	0x017B, r25
     b18:	80 93 7a 01 	sts	0x017A, r24
		motor_write_speeds();
     b1c:	0e 94 0c 05 	call	0xa18	; 0xa18 <_Z18motor_write_speedsv>
		break;
	}

	// DEBUG print packet details
	Serial.print("speed: ");
     b20:	82 e1       	ldi	r24, 0x12	; 18
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	66 e0       	ldi	r22, 0x06	; 6
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN5Print5printEPKc>
	Serial.print(packet.vars.speed);
     b2c:	6a 81       	ldd	r22, Y+2	; 0x02
     b2e:	7b 81       	ldd	r23, Y+3	; 0x03
     b30:	82 e1       	ldi	r24, 0x12	; 18
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	4a e0       	ldi	r20, 0x0A	; 10
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN5Print5printEii>
	Serial.print(" motor: ");
     b3c:	82 e1       	ldi	r24, 0x12	; 18
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	6e e0       	ldi	r22, 0x0E	; 14
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN5Print5printEPKc>
	Serial.println(packet.vars.motor);
     b48:	82 e1       	ldi	r24, 0x12	; 18
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	69 81       	ldd	r22, Y+1	; 0x01
     b4e:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN5Print7printlnEc>

	delay(100);
     b52:	64 e6       	ldi	r22, 0x64	; 100
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 4d 0a 	call	0x149a	; 0x149a <delay>
//	packet.vars.ack = 1;
//
//	radio_send_nowait(&packet, BASE_ADDR);
//	// I think it can only send every 10ms... read the spec
//	delay(100); // Quick fix - wait for radio. Later check time since last sent with millis() in send?
}
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <_Z14motor_stop_allv>:
void radio_irq() {
	radio_flag = 1;
}

void motor_stop_all() {
	motor0.writeMicroseconds(MOTOR_MIN_SPEED);
     b6e:	8e e7       	ldi	r24, 0x7E	; 126
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	6c eb       	ldi	r22, 0xBC	; 188
     b74:	72 e0       	ldi	r23, 0x02	; 2
     b76:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Servo17writeMicrosecondsEi>
	motor1.writeMicroseconds(MOTOR_MIN_SPEED);
     b7a:	81 e8       	ldi	r24, 0x81	; 129
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	6c eb       	ldi	r22, 0xBC	; 188
     b80:	72 e0       	ldi	r23, 0x02	; 2
     b82:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Servo17writeMicrosecondsEi>
	motor2.writeMicroseconds(MOTOR_MIN_SPEED);
     b86:	84 e8       	ldi	r24, 0x84	; 132
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	6c eb       	ldi	r22, 0xBC	; 188
     b8c:	72 e0       	ldi	r23, 0x02	; 2
     b8e:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Servo17writeMicrosecondsEi>
	motor3.writeMicroseconds(MOTOR_MIN_SPEED);
     b92:	87 e8       	ldi	r24, 0x87	; 135
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	6c eb       	ldi	r22, 0xBC	; 188
     b98:	72 e0       	ldi	r23, 0x02	; 2
     b9a:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Servo17writeMicrosecondsEi>

	for (int i=0; i<4; i++)
		mSpeeds[i] = MOTOR_MIN_SPEED;
     b9e:	8c eb       	ldi	r24, 0xBC	; 188
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	90 93 75 01 	sts	0x0175, r25
     ba6:	80 93 74 01 	sts	0x0174, r24
     baa:	90 93 77 01 	sts	0x0177, r25
     bae:	80 93 76 01 	sts	0x0176, r24
     bb2:	90 93 79 01 	sts	0x0179, r25
     bb6:	80 93 78 01 	sts	0x0178, r24
     bba:	90 93 7b 01 	sts	0x017B, r25
     bbe:	80 93 7a 01 	sts	0x017A, r24
}
     bc2:	08 95       	ret

00000bc4 <_Z9motor_armv>:

void motor_arm() {
	motor0.attach(MOTOR0);
     bc4:	8e e7       	ldi	r24, 0x7E	; 126
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	63 e0       	ldi	r22, 0x03	; 3
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN5Servo6attachEi>
	motor1.attach(MOTOR1);
     bd0:	81 e8       	ldi	r24, 0x81	; 129
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	65 e0       	ldi	r22, 0x05	; 5
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN5Servo6attachEi>
	motor2.attach(MOTOR2);
     bdc:	84 e8       	ldi	r24, 0x84	; 132
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	66 e0       	ldi	r22, 0x06	; 6
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN5Servo6attachEi>
	motor3.attach(MOTOR3);
     be8:	87 e8       	ldi	r24, 0x87	; 135
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	6a e0       	ldi	r22, 0x0A	; 10
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN5Servo6attachEi>

	motor_stop_all();
     bf4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_Z14motor_stop_allv>

	delay(200);
     bf8:	68 ec       	ldi	r22, 0xC8	; 200
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 4d 0a 	call	0x149a	; 0x149a <delay>
}
     c04:	08 95       	ret

00000c06 <setup>:

	packet.vars.ack = 0;
	radio_send_nowait(&packet, BASE_ADDR);
}

void setup() {
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
	// DEBUG
	Serial.begin(9600);
     c0a:	02 e1       	ldi	r16, 0x12	; 18
     c0c:	12 e0       	ldi	r17, 0x02	; 2
     c0e:	c8 01       	movw	r24, r16
     c10:	40 e8       	ldi	r20, 0x80	; 128
     c12:	55 e2       	ldi	r21, 0x25	; 37
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN14HardwareSerial5beginEm>

	motor_arm();
     c1c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9motor_armv>

	radio_init(COPTER_ADDR, RADIO_CHANNEL, RADIO_PAYLOAD);
     c20:	87 e1       	ldi	r24, 0x17	; 23
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	6c e6       	ldi	r22, 0x6C	; 108
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	45 e0       	ldi	r20, 0x05	; 5
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	0e 94 b0 04 	call	0x960	; 0x960 <_Z10radio_initPcii>
	attachInterrupt(0,radio_irq,LOW);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	64 ef       	ldi	r22, 0xF4	; 244
     c34:	74 e0       	ldi	r23, 0x04	; 4
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <attachInterrupt>

	// DEBUG
	Serial.println("Listening...");
     c3e:	c8 01       	movw	r24, r16
     c40:	6d e1       	ldi	r22, 0x1D	; 29
     c42:	71 e0       	ldi	r23, 0x01	; 1
     c44:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN5Print7printlnEPKc>
}
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	08 95       	ret

00000c4e <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     c4e:	08 95       	ret

00000c50 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	8f 93       	push	r24
     c62:	9f 93       	push	r25
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     c68:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     c6c:	20 91 ca 01 	lds	r18, 0x01CA
     c70:	30 91 cb 01 	lds	r19, 0x01CB
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	2f 73       	andi	r18, 0x3F	; 63
     c7a:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     c7c:	80 91 cc 01 	lds	r24, 0x01CC
     c80:	90 91 cd 01 	lds	r25, 0x01CD
     c84:	28 17       	cp	r18, r24
     c86:	39 07       	cpc	r19, r25
     c88:	59 f0       	breq	.+22     	; 0xca0 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
     c8a:	e0 91 ca 01 	lds	r30, 0x01CA
     c8e:	f0 91 cb 01 	lds	r31, 0x01CB
     c92:	e6 57       	subi	r30, 0x76	; 118
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	40 83       	st	Z, r20
    buffer->head = i;
     c98:	30 93 cb 01 	sts	0x01CB, r19
     c9c:	20 93 ca 01 	sts	0x01CA, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     cb8:	e0 91 1e 02 	lds	r30, 0x021E
     cbc:	f0 91 1f 02 	lds	r31, 0x021F
     cc0:	e0 5c       	subi	r30, 0xC0	; 192
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	81 91       	ld	r24, Z+
     cc6:	91 91       	ld	r25, Z+
     cc8:	20 81       	ld	r18, Z
     cca:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     ccc:	82 1b       	sub	r24, r18
     cce:	93 0b       	sbc	r25, r19
     cd0:	8f 73       	andi	r24, 0x3F	; 63
     cd2:	90 70       	andi	r25, 0x00	; 0
     cd4:	89 2b       	or	r24, r25
     cd6:	11 f0       	breq	.+4      	; 0xcdc <_Z14serialEventRunv+0x24>
     cd8:	0e 94 27 06 	call	0xc4e	; 0xc4e <_Z11serialEventv>
     cdc:	08 95       	ret

00000cde <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     d00:	20 91 0e 02 	lds	r18, 0x020E
     d04:	30 91 0f 02 	lds	r19, 0x020F
     d08:	80 91 10 02 	lds	r24, 0x0210
     d0c:	90 91 11 02 	lds	r25, 0x0211
     d10:	28 17       	cp	r18, r24
     d12:	39 07       	cpc	r19, r25
     d14:	31 f4       	brne	.+12     	; 0xd22 <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     d16:	80 91 c1 00 	lds	r24, 0x00C1
     d1a:	8f 7d       	andi	r24, 0xDF	; 223
     d1c:	80 93 c1 00 	sts	0x00C1, r24
     d20:	16 c0       	rjmp	.+44     	; 0xd4e <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     d22:	e0 91 10 02 	lds	r30, 0x0210
     d26:	f0 91 11 02 	lds	r31, 0x0211
     d2a:	e2 53       	subi	r30, 0x32	; 50
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     d30:	80 91 10 02 	lds	r24, 0x0210
     d34:	90 91 11 02 	lds	r25, 0x0211
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	60 e4       	ldi	r22, 0x40	; 64
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	0e 94 86 0b 	call	0x170c	; 0x170c <__divmodhi4>
     d42:	90 93 11 02 	sts	0x0211, r25
     d46:	80 93 10 02 	sts	0x0210, r24
	
  #if defined(UDR0)
    UDR0 = c;
     d4a:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     d70:	af 92       	push	r10
     d72:	bf 92       	push	r11
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	ec 01       	movw	r28, r24
     d84:	7a 01       	movw	r14, r20
     d86:	8b 01       	movw	r16, r22
     d88:	dd 24       	eor	r13, r13
     d8a:	40 30       	cpi	r20, 0x00	; 0
     d8c:	81 ee       	ldi	r24, 0xE1	; 225
     d8e:	58 07       	cpc	r21, r24
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	68 07       	cpc	r22, r24
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	78 07       	cpc	r23, r24
     d98:	11 f0       	breq	.+4      	; 0xd9e <_ZN14HardwareSerial5beginEm+0x2e>
     d9a:	dd 24       	eor	r13, r13
     d9c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	a9 2e       	mov	r10, r25
     da2:	b1 2c       	mov	r11, r1
     da4:	ec 89       	ldd	r30, Y+20	; 0x14
     da6:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     da8:	dd 20       	and	r13, r13
     daa:	69 f0       	breq	.+26     	; 0xdc6 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     dac:	c5 01       	movw	r24, r10
     dae:	0e 8c       	ldd	r0, Y+30	; 0x1e
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <_ZN14HardwareSerial5beginEm+0x46>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <_ZN14HardwareSerial5beginEm+0x42>
     dba:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	79 e0       	ldi	r23, 0x09	; 9
     dc0:	8d e3       	ldi	r24, 0x3D	; 61
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     dc6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     dc8:	60 e8       	ldi	r22, 0x80	; 128
     dca:	74 e8       	ldi	r23, 0x84	; 132
     dcc:	8e e1       	ldi	r24, 0x1E	; 30
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a8 01       	movw	r20, r16
     dd2:	97 01       	movw	r18, r14
     dd4:	0e 94 99 0b 	call	0x1732	; 0x1732 <__udivmodsi4>
     dd8:	21 50       	subi	r18, 0x01	; 1
     dda:	30 40       	sbci	r19, 0x00	; 0
     ddc:	40 40       	sbci	r20, 0x00	; 0
     dde:	50 40       	sbci	r21, 0x00	; 0
     de0:	56 95       	lsr	r21
     de2:	47 95       	ror	r20
     de4:	37 95       	ror	r19
     de6:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     de8:	80 e1       	ldi	r24, 0x10	; 16
     dea:	20 30       	cpi	r18, 0x00	; 0
     dec:	38 07       	cpc	r19, r24
     dee:	20 f0       	brcs	.+8      	; 0xdf8 <_ZN14HardwareSerial5beginEm+0x88>
     df0:	dd 20       	and	r13, r13
     df2:	11 f0       	breq	.+4      	; 0xdf8 <_ZN14HardwareSerial5beginEm+0x88>
     df4:	dd 24       	eor	r13, r13
     df6:	d6 cf       	rjmp	.-84     	; 0xda4 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     df8:	e8 89       	ldd	r30, Y+16	; 0x10
     dfa:	f9 89       	ldd	r31, Y+17	; 0x11
     dfc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     dfe:	ea 89       	ldd	r30, Y+18	; 0x12
     e00:	fb 89       	ldd	r31, Y+19	; 0x13
     e02:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     e04:	ee 89       	ldd	r30, Y+22	; 0x16
     e06:	ff 89       	ldd	r31, Y+23	; 0x17
     e08:	40 81       	ld	r20, Z
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	c9 01       	movw	r24, r18
     e10:	0a 8c       	ldd	r0, Y+26	; 0x1a
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <_ZN14HardwareSerial5beginEm+0xa8>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <_ZN14HardwareSerial5beginEm+0xa4>
     e1c:	48 2b       	or	r20, r24
     e1e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     e20:	ee 89       	ldd	r30, Y+22	; 0x16
     e22:	ff 89       	ldd	r31, Y+23	; 0x17
     e24:	40 81       	ld	r20, Z
     e26:	c9 01       	movw	r24, r18
     e28:	0b 8c       	ldd	r0, Y+27	; 0x1b
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <_ZN14HardwareSerial5beginEm+0xc0>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <_ZN14HardwareSerial5beginEm+0xbc>
     e34:	48 2b       	or	r20, r24
     e36:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     e38:	ee 89       	ldd	r30, Y+22	; 0x16
     e3a:	ff 89       	ldd	r31, Y+23	; 0x17
     e3c:	40 81       	ld	r20, Z
     e3e:	c9 01       	movw	r24, r18
     e40:	0c 8c       	ldd	r0, Y+28	; 0x1c
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <_ZN14HardwareSerial5beginEm+0xd8>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <_ZN14HardwareSerial5beginEm+0xd4>
     e4c:	48 2b       	or	r20, r24
     e4e:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     e50:	ee 89       	ldd	r30, Y+22	; 0x16
     e52:	ff 89       	ldd	r31, Y+23	; 0x17
     e54:	80 81       	ld	r24, Z
     e56:	0d 8c       	ldd	r0, Y+29	; 0x1d
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <_ZN14HardwareSerial5beginEm+0xee>
     e5a:	22 0f       	add	r18, r18
     e5c:	33 1f       	adc	r19, r19
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <_ZN14HardwareSerial5beginEm+0xea>
     e62:	20 95       	com	r18
     e64:	28 23       	and	r18, r24
     e66:	20 83       	st	Z, r18
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	08 95       	ret

00000e7c <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     e7c:	dc 01       	movw	r26, r24
     e7e:	1c 96       	adiw	r26, 0x0c	; 12
     e80:	ed 91       	ld	r30, X+
     e82:	fc 91       	ld	r31, X
     e84:	1d 97       	sbiw	r26, 0x0d	; 13
     e86:	e0 5c       	subi	r30, 0xC0	; 192
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	21 91       	ld	r18, Z+
     e8c:	31 91       	ld	r19, Z+
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	28 1b       	sub	r18, r24
     e94:	39 0b       	sbc	r19, r25
     e96:	2f 73       	andi	r18, 0x3F	; 63
     e98:	30 70       	andi	r19, 0x00	; 0
}
     e9a:	c9 01       	movw	r24, r18
     e9c:	08 95       	ret

00000e9e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     e9e:	dc 01       	movw	r26, r24
     ea0:	1c 96       	adiw	r26, 0x0c	; 12
     ea2:	ed 91       	ld	r30, X+
     ea4:	fc 91       	ld	r31, X
     ea6:	1d 97       	sbiw	r26, 0x0d	; 13
     ea8:	e0 5c       	subi	r30, 0xC0	; 192
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	20 81       	ld	r18, Z
     eae:	31 81       	ldd	r19, Z+1	; 0x01
     eb0:	e0 54       	subi	r30, 0x40	; 64
     eb2:	f0 40       	sbci	r31, 0x00	; 0
     eb4:	df 01       	movw	r26, r30
     eb6:	ae 5b       	subi	r26, 0xBE	; 190
     eb8:	bf 4f       	sbci	r27, 0xFF	; 255
     eba:	8d 91       	ld	r24, X+
     ebc:	9c 91       	ld	r25, X
     ebe:	11 97       	sbiw	r26, 0x01	; 1
     ec0:	28 17       	cp	r18, r24
     ec2:	39 07       	cpc	r19, r25
     ec4:	19 f4       	brne	.+6      	; 0xecc <_ZN14HardwareSerial4peekEv+0x2e>
     ec6:	2f ef       	ldi	r18, 0xFF	; 255
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	07 c0       	rjmp	.+14     	; 0xeda <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     ecc:	8d 91       	ld	r24, X+
     ece:	9c 91       	ld	r25, X
     ed0:	e8 0f       	add	r30, r24
     ed2:	f9 1f       	adc	r31, r25
     ed4:	80 81       	ld	r24, Z
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     eda:	c9 01       	movw	r24, r18
     edc:	08 95       	ret

00000ede <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     ede:	dc 01       	movw	r26, r24
     ee0:	1c 96       	adiw	r26, 0x0c	; 12
     ee2:	ed 91       	ld	r30, X+
     ee4:	fc 91       	ld	r31, X
     ee6:	1d 97       	sbiw	r26, 0x0d	; 13
     ee8:	e0 5c       	subi	r30, 0xC0	; 192
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	20 81       	ld	r18, Z
     eee:	31 81       	ldd	r19, Z+1	; 0x01
     ef0:	e0 54       	subi	r30, 0x40	; 64
     ef2:	f0 40       	sbci	r31, 0x00	; 0
     ef4:	df 01       	movw	r26, r30
     ef6:	ae 5b       	subi	r26, 0xBE	; 190
     ef8:	bf 4f       	sbci	r27, 0xFF	; 255
     efa:	8d 91       	ld	r24, X+
     efc:	9c 91       	ld	r25, X
     efe:	11 97       	sbiw	r26, 0x01	; 1
     f00:	28 17       	cp	r18, r24
     f02:	39 07       	cpc	r19, r25
     f04:	19 f4       	brne	.+6      	; 0xf0c <_ZN14HardwareSerial4readEv+0x2e>
     f06:	2f ef       	ldi	r18, 0xFF	; 255
     f08:	3f ef       	ldi	r19, 0xFF	; 255
     f0a:	10 c0       	rjmp	.+32     	; 0xf2c <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     f0c:	8d 91       	ld	r24, X+
     f0e:	9c 91       	ld	r25, X
     f10:	11 97       	sbiw	r26, 0x01	; 1
     f12:	e8 0f       	add	r30, r24
     f14:	f9 1f       	adc	r31, r25
     f16:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     f18:	8d 91       	ld	r24, X+
     f1a:	9c 91       	ld	r25, X
     f1c:	11 97       	sbiw	r26, 0x01	; 1
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	8f 73       	andi	r24, 0x3F	; 63
     f22:	90 70       	andi	r25, 0x00	; 0
     f24:	11 96       	adiw	r26, 0x01	; 1
     f26:	9c 93       	st	X, r25
     f28:	8e 93       	st	-X, r24
    return c;
     f2a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     f2c:	c9 01       	movw	r24, r18
     f2e:	08 95       	ret

00000f30 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     f30:	fc 01       	movw	r30, r24
     f32:	86 85       	ldd	r24, Z+14	; 0x0e
     f34:	97 85       	ldd	r25, Z+15	; 0x0f
     f36:	dc 01       	movw	r26, r24
     f38:	a0 5c       	subi	r26, 0xC0	; 192
     f3a:	bf 4f       	sbci	r27, 0xFF	; 255
     f3c:	fc 01       	movw	r30, r24
     f3e:	ee 5b       	subi	r30, 0xBE	; 190
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	2d 91       	ld	r18, X+
     f44:	3c 91       	ld	r19, X
     f46:	11 97       	sbiw	r26, 0x01	; 1
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	c1 f7       	brne	.-16     	; 0xf42 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
     f52:	08 95       	ret

00000f54 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	ec 01       	movw	r28, r24
     f5a:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     f5c:	ee 85       	ldd	r30, Y+14	; 0x0e
     f5e:	ff 85       	ldd	r31, Y+15	; 0x0f
     f60:	e0 5c       	subi	r30, 0xC0	; 192
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	e0 54       	subi	r30, 0x40	; 64
     f6a:	f0 40       	sbci	r31, 0x00	; 0
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	60 e4       	ldi	r22, 0x40	; 64
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	0e 94 86 0b 	call	0x170c	; 0x170c <__divmodhi4>
     f76:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     f78:	df 01       	movw	r26, r30
     f7a:	ae 5b       	subi	r26, 0xBE	; 190
     f7c:	bf 4f       	sbci	r27, 0xFF	; 255
     f7e:	8d 91       	ld	r24, X+
     f80:	9c 91       	ld	r25, X
     f82:	11 97       	sbiw	r26, 0x01	; 1
     f84:	28 17       	cp	r18, r24
     f86:	39 07       	cpc	r19, r25
     f88:	d1 f3       	breq	.-12     	; 0xf7e <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     f8a:	e0 5c       	subi	r30, 0xC0	; 192
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	e0 54       	subi	r30, 0x40	; 64
     f94:	f0 40       	sbci	r31, 0x00	; 0
     f96:	e8 0f       	add	r30, r24
     f98:	f9 1f       	adc	r31, r25
     f9a:	40 83       	st	Z, r20
  _tx_buffer->head = i;
     f9c:	ee 85       	ldd	r30, Y+14	; 0x0e
     f9e:	ff 85       	ldd	r31, Y+15	; 0x0f
     fa0:	e0 5c       	subi	r30, 0xC0	; 192
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	31 83       	std	Z+1, r19	; 0x01
     fa6:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     fa8:	ee 89       	ldd	r30, Y+22	; 0x16
     faa:	ff 89       	ldd	r31, Y+23	; 0x17
     fac:	20 81       	ld	r18, Z
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0d 8c       	ldd	r0, Y+29	; 0x1d
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <_ZN14HardwareSerial5writeEh+0x66>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <_ZN14HardwareSerial5writeEh+0x62>
     fbe:	28 2b       	or	r18, r24
     fc0:	20 83       	st	Z, r18
  
  return 1;
}
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     fcc:	10 92 15 02 	sts	0x0215, r1
     fd0:	10 92 14 02 	sts	0x0214, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     fd4:	88 ee       	ldi	r24, 0xE8	; 232
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	80 93 16 02 	sts	0x0216, r24
     fe0:	90 93 17 02 	sts	0x0217, r25
     fe4:	a0 93 18 02 	sts	0x0218, r26
     fe8:	b0 93 19 02 	sts	0x0219, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     fec:	88 e3       	ldi	r24, 0x38	; 56
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	90 93 13 02 	sts	0x0213, r25
     ff4:	80 93 12 02 	sts	0x0212, r24
{
  _rx_buffer = rx_buffer;
     ff8:	8a e8       	ldi	r24, 0x8A	; 138
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	90 93 1f 02 	sts	0x021F, r25
    1000:	80 93 1e 02 	sts	0x021E, r24
  _tx_buffer = tx_buffer;
    1004:	8e ec       	ldi	r24, 0xCE	; 206
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	90 93 21 02 	sts	0x0221, r25
    100c:	80 93 20 02 	sts	0x0220, r24
  _ubrrh = ubrrh;
    1010:	85 ec       	ldi	r24, 0xC5	; 197
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	90 93 23 02 	sts	0x0223, r25
    1018:	80 93 22 02 	sts	0x0222, r24
  _ubrrl = ubrrl;
    101c:	84 ec       	ldi	r24, 0xC4	; 196
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	90 93 25 02 	sts	0x0225, r25
    1024:	80 93 24 02 	sts	0x0224, r24
  _ucsra = ucsra;
    1028:	80 ec       	ldi	r24, 0xC0	; 192
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	90 93 27 02 	sts	0x0227, r25
    1030:	80 93 26 02 	sts	0x0226, r24
  _ucsrb = ucsrb;
    1034:	81 ec       	ldi	r24, 0xC1	; 193
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	90 93 29 02 	sts	0x0229, r25
    103c:	80 93 28 02 	sts	0x0228, r24
  _udr = udr;
    1040:	86 ec       	ldi	r24, 0xC6	; 198
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	90 93 2b 02 	sts	0x022B, r25
    1048:	80 93 2a 02 	sts	0x022A, r24
  _rxen = rxen;
    104c:	84 e0       	ldi	r24, 0x04	; 4
    104e:	80 93 2c 02 	sts	0x022C, r24
  _txen = txen;
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	80 93 2d 02 	sts	0x022D, r24
  _rxcie = rxcie;
    1058:	87 e0       	ldi	r24, 0x07	; 7
    105a:	80 93 2e 02 	sts	0x022E, r24
  _udrie = udrie;
    105e:	85 e0       	ldi	r24, 0x05	; 5
    1060:	80 93 2f 02 	sts	0x022F, r24
  _u2x = u2x;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 30 02 	sts	0x0230, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    106a:	08 95       	ret

0000106c <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	7c 01       	movw	r14, r24
    107e:	6b 01       	movw	r12, r22
    1080:	8a 01       	movw	r16, r20
    1082:	c0 e0       	ldi	r28, 0x00	; 0
    1084:	d0 e0       	ldi	r29, 0x00	; 0
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1088:	d6 01       	movw	r26, r12
    108a:	6d 91       	ld	r22, X+
    108c:	6d 01       	movw	r12, r26
    108e:	d7 01       	movw	r26, r14
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	01 90       	ld	r0, Z+
    1096:	f0 81       	ld	r31, Z
    1098:	e0 2d       	mov	r30, r0
    109a:	c7 01       	movw	r24, r14
    109c:	09 95       	icall
    109e:	c8 0f       	add	r28, r24
    10a0:	d9 1f       	adc	r29, r25
    10a2:	01 50       	subi	r16, 0x01	; 1
    10a4:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    10a6:	01 15       	cp	r16, r1
    10a8:	11 05       	cpc	r17, r1
    10aa:	71 f7       	brne	.-36     	; 0x1088 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    10ac:	ce 01       	movw	r24, r28
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	08 95       	ret

000010c0 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    10ca:	dc 01       	movw	r26, r24
    10cc:	ed 91       	ld	r30, X+
    10ce:	fc 91       	ld	r31, X
    10d0:	01 90       	ld	r0, Z+
    10d2:	f0 81       	ld	r31, Z
    10d4:	e0 2d       	mov	r30, r0
    10d6:	6d e0       	ldi	r22, 0x0D	; 13
    10d8:	09 95       	icall
    10da:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    10dc:	d8 01       	movw	r26, r16
    10de:	ed 91       	ld	r30, X+
    10e0:	fc 91       	ld	r31, X
    10e2:	01 90       	ld	r0, Z+
    10e4:	f0 81       	ld	r31, Z
    10e6:	e0 2d       	mov	r30, r0
    10e8:	c8 01       	movw	r24, r16
    10ea:	6a e0       	ldi	r22, 0x0A	; 10
    10ec:	09 95       	icall
    10ee:	9c 01       	movw	r18, r24
    10f0:	2e 0d       	add	r18, r14
    10f2:	3f 1d       	adc	r19, r15
    10f4:	c9 01       	movw	r24, r18
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	08 95       	ret

00001100 <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	7c 01       	movw	r14, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    110a:	dc 01       	movw	r26, r24
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	01 90       	ld	r0, Z+
    1112:	f0 81       	ld	r31, Z
    1114:	e0 2d       	mov	r30, r0
    1116:	09 95       	icall
    1118:	8c 01       	movw	r16, r24
}

size_t Print::println(char c)
{
  size_t n = print(c);
  n += println();
    111a:	c7 01       	movw	r24, r14
    111c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN5Print7printlnEv>
    1120:	08 0f       	add	r16, r24
    1122:	19 1f       	adc	r17, r25
  return n;
}
    1124:	c8 01       	movw	r24, r16
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	08 95       	ret

00001130 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	db 01       	movw	r26, r22
    1136:	0d 90       	ld	r0, X+
    1138:	00 20       	and	r0, r0
    113a:	e9 f7       	brne	.-6      	; 0x1136 <_ZN5Print5writeEPKc+0x6>
    113c:	11 97       	sbiw	r26, 0x01	; 1
    113e:	a6 1b       	sub	r26, r22
    1140:	b7 0b       	sbc	r27, r23
    1142:	ec 01       	movw	r28, r24
    1144:	e8 81       	ld	r30, Y
    1146:	f9 81       	ldd	r31, Y+1	; 0x01
    1148:	02 80       	ldd	r0, Z+2	; 0x02
    114a:	f3 81       	ldd	r31, Z+3	; 0x03
    114c:	e0 2d       	mov	r30, r0
    114e:	ad 01       	movw	r20, r26
    1150:	09 95       	icall
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1158:	4f 92       	push	r4
    115a:	5f 92       	push	r5
    115c:	7f 92       	push	r7
    115e:	8f 92       	push	r8
    1160:	9f 92       	push	r9
    1162:	af 92       	push	r10
    1164:	bf 92       	push	r11
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	a1 97       	sbiw	r28, 0x21	; 33
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	2c 01       	movw	r4, r24
    1188:	74 2e       	mov	r7, r20
    118a:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	08 f4       	brcc	.+2      	; 0x1192 <_ZN5Print11printNumberEmh+0x3a>
    1190:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1192:	19 a2       	std	Y+33, r1	; 0x21
    1194:	31 e2       	ldi	r19, 0x21	; 33
    1196:	c3 2e       	mov	r12, r19
    1198:	d1 2c       	mov	r13, r1
    119a:	cc 0e       	add	r12, r28
    119c:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    119e:	82 2e       	mov	r8, r18
    11a0:	99 24       	eor	r9, r9
    11a2:	aa 24       	eor	r10, r10
    11a4:	bb 24       	eor	r11, r11
    11a6:	67 2d       	mov	r22, r7
    11a8:	75 2f       	mov	r23, r21
    11aa:	a5 01       	movw	r20, r10
    11ac:	94 01       	movw	r18, r8
    11ae:	0e 94 99 0b 	call	0x1732	; 0x1732 <__udivmodsi4>
    11b2:	79 01       	movw	r14, r18
    11b4:	8a 01       	movw	r16, r20
    char c = m - base * n;
    11b6:	c8 01       	movw	r24, r16
    11b8:	b7 01       	movw	r22, r14
    11ba:	a5 01       	movw	r20, r10
    11bc:	94 01       	movw	r18, r8
    11be:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__mulsi3>
    11c2:	47 2d       	mov	r20, r7
    11c4:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    11c6:	08 94       	sec
    11c8:	c1 08       	sbc	r12, r1
    11ca:	d1 08       	sbc	r13, r1
    11cc:	4a 30       	cpi	r20, 0x0A	; 10
    11ce:	14 f4       	brge	.+4      	; 0x11d4 <_ZN5Print11printNumberEmh+0x7c>
    11d0:	40 5d       	subi	r20, 0xD0	; 208
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <_ZN5Print11printNumberEmh+0x7e>
    11d4:	49 5c       	subi	r20, 0xC9	; 201
    11d6:	f6 01       	movw	r30, r12
    11d8:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    11da:	e1 14       	cp	r14, r1
    11dc:	f1 04       	cpc	r15, r1
    11de:	01 05       	cpc	r16, r1
    11e0:	11 05       	cpc	r17, r1
    11e2:	21 f0       	breq	.+8      	; 0x11ec <_ZN5Print11printNumberEmh+0x94>
    11e4:	7e 2c       	mov	r7, r14
    11e6:	5f 2d       	mov	r21, r15
    11e8:	c8 01       	movw	r24, r16
    11ea:	dd cf       	rjmp	.-70     	; 0x11a6 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    11ec:	c2 01       	movw	r24, r4
    11ee:	b6 01       	movw	r22, r12
    11f0:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN5Print5writeEPKc>
}
    11f4:	a1 96       	adiw	r28, 0x21	; 33
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	bf 90       	pop	r11
    1212:	af 90       	pop	r10
    1214:	9f 90       	pop	r9
    1216:	8f 90       	pop	r8
    1218:	7f 90       	pop	r7
    121a:	5f 90       	pop	r5
    121c:	4f 90       	pop	r4
    121e:	08 95       	ret

00001220 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
    1232:	6a 01       	movw	r12, r20
    1234:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    1236:	21 15       	cp	r18, r1
    1238:	31 05       	cpc	r19, r1
    123a:	41 f4       	brne	.+16     	; 0x124c <_ZN5Print5printEli+0x2c>
    return write(n);
    123c:	e8 81       	ld	r30, Y
    123e:	f9 81       	ldd	r31, Y+1	; 0x01
    1240:	01 90       	ld	r0, Z+
    1242:	f0 81       	ld	r31, Z
    1244:	e0 2d       	mov	r30, r0
    1246:	64 2f       	mov	r22, r20
    1248:	09 95       	icall
    124a:	1f c0       	rjmp	.+62     	; 0x128a <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    124c:	2a 30       	cpi	r18, 0x0A	; 10
    124e:	31 05       	cpc	r19, r1
    1250:	d1 f4       	brne	.+52     	; 0x1286 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    1252:	77 ff       	sbrs	r23, 7
    1254:	17 c0       	rjmp	.+46     	; 0x1284 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1256:	e8 81       	ld	r30, Y
    1258:	f9 81       	ldd	r31, Y+1	; 0x01
    125a:	01 90       	ld	r0, Z+
    125c:	f0 81       	ld	r31, Z
    125e:	e0 2d       	mov	r30, r0
    1260:	6d e2       	ldi	r22, 0x2D	; 45
    1262:	09 95       	icall
    1264:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    1266:	44 27       	eor	r20, r20
    1268:	55 27       	eor	r21, r21
    126a:	ba 01       	movw	r22, r20
    126c:	4c 19       	sub	r20, r12
    126e:	5d 09       	sbc	r21, r13
    1270:	6e 09       	sbc	r22, r14
    1272:	7f 09       	sbc	r23, r15
    1274:	ce 01       	movw	r24, r28
    1276:	2a e0       	ldi	r18, 0x0A	; 10
    1278:	0e 94 ac 08 	call	0x1158	; 0x1158 <_ZN5Print11printNumberEmh>
    127c:	98 01       	movw	r18, r16
    127e:	28 0f       	add	r18, r24
    1280:	39 1f       	adc	r19, r25
    1282:	04 c0       	rjmp	.+8      	; 0x128c <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    1284:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1286:	0e 94 ac 08 	call	0x1158	; 0x1158 <_ZN5Print11printNumberEmh>
    128a:	9c 01       	movw	r18, r24
  }
}
    128c:	c9 01       	movw	r24, r18
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	08 95       	ret

000012a0 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	7b 01       	movw	r14, r22
    12aa:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    12ac:	00 27       	eor	r16, r16
    12ae:	f7 fc       	sbrc	r15, 7
    12b0:	00 95       	com	r16
    12b2:	10 2f       	mov	r17, r16
    12b4:	b8 01       	movw	r22, r16
    12b6:	a7 01       	movw	r20, r14
    12b8:	0e 94 10 09 	call	0x1220	; 0x1220 <_ZN5Print5printEli>
}
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	08 95       	ret

000012c6 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    12c6:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN5Print5writeEPKc>
}
    12ca:	08 95       	ret

000012cc <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    12d6:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN5Print5writeEPKc>
    12da:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    12dc:	c7 01       	movw	r24, r14
    12de:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN5Print7printlnEv>
    12e2:	08 0f       	add	r16, r24
    12e4:	19 1f       	adc	r17, r25
  return n;
}
    12e6:	c8 01       	movw	r24, r16
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	08 95       	ret

000012f2 <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	00 f5       	brcc	.+64     	; 0x1336 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    12f6:	e8 2f       	mov	r30, r24
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ef 5c       	subi	r30, 0xCF	; 207
    1300:	fd 4f       	sbci	r31, 0xFD	; 253
    1302:	71 83       	std	Z+1, r23	; 0x01
    1304:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1306:	88 23       	and	r24, r24
    1308:	19 f0       	breq	.+6      	; 0x1310 <attachInterrupt+0x1e>
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	a1 f4       	brne	.+40     	; 0x1336 <attachInterrupt+0x44>
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1310:	80 91 69 00 	lds	r24, 0x0069
    1314:	8c 7f       	andi	r24, 0xFC	; 252
    1316:	84 2b       	or	r24, r20
    1318:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    131c:	e8 9a       	sbi	0x1d, 0	; 29
    131e:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1320:	80 91 69 00 	lds	r24, 0x0069
    1324:	44 0f       	add	r20, r20
    1326:	55 1f       	adc	r21, r21
    1328:	44 0f       	add	r20, r20
    132a:	55 1f       	adc	r21, r21
    132c:	83 7f       	andi	r24, 0xF3	; 243
    132e:	84 2b       	or	r24, r20
    1330:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    1334:	e9 9a       	sbi	0x1d, 1	; 29
    1336:	08 95       	ret

00001338 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	2f 93       	push	r18
    1344:	3f 93       	push	r19
    1346:	4f 93       	push	r20
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	af 93       	push	r26
    1354:	bf 93       	push	r27
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    135a:	80 91 31 02 	lds	r24, 0x0231
    135e:	90 91 32 02 	lds	r25, 0x0232
    1362:	89 2b       	or	r24, r25
    1364:	29 f0       	breq	.+10     	; 0x1370 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    1366:	e0 91 31 02 	lds	r30, 0x0231
    136a:	f0 91 32 02 	lds	r31, 0x0232
    136e:	09 95       	icall
}
    1370:	ff 91       	pop	r31
    1372:	ef 91       	pop	r30
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	7f 91       	pop	r23
    137e:	6f 91       	pop	r22
    1380:	5f 91       	pop	r21
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	0f 90       	pop	r0
    138e:	1f 90       	pop	r1
    1390:	18 95       	reti

00001392 <__vector_2>:

SIGNAL(INT1_vect) {
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	2f 93       	push	r18
    139e:	3f 93       	push	r19
    13a0:	4f 93       	push	r20
    13a2:	5f 93       	push	r21
    13a4:	6f 93       	push	r22
    13a6:	7f 93       	push	r23
    13a8:	8f 93       	push	r24
    13aa:	9f 93       	push	r25
    13ac:	af 93       	push	r26
    13ae:	bf 93       	push	r27
    13b0:	ef 93       	push	r30
    13b2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    13b4:	80 91 33 02 	lds	r24, 0x0233
    13b8:	90 91 34 02 	lds	r25, 0x0234
    13bc:	89 2b       	or	r24, r25
    13be:	29 f0       	breq	.+10     	; 0x13ca <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    13c0:	e0 91 33 02 	lds	r30, 0x0233
    13c4:	f0 91 34 02 	lds	r31, 0x0234
    13c8:	09 95       	icall
}
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <main>:
#include <Arduino.h>

int main(void)
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
{
	init();
    13f0:	0e 94 a6 0a 	call	0x154c	; 0x154c <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    13f4:	0e 94 03 06 	call	0xc06	; 0xc06 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    13f8:	cc e5       	ldi	r28, 0x5C	; 92
    13fa:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    13fc:	0e 94 40 05 	call	0xa80	; 0xa80 <loop>
		if (serialEventRun) serialEventRun();
    1400:	20 97       	sbiw	r28, 0x00	; 0
    1402:	e1 f3       	breq	.-8      	; 0x13fc <main+0x10>
    1404:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_Z14serialEventRunv>
    1408:	f9 cf       	rjmp	.-14     	; 0x13fc <main+0x10>

0000140a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1420:	80 91 39 02 	lds	r24, 0x0239
    1424:	90 91 3a 02 	lds	r25, 0x023A
    1428:	a0 91 3b 02 	lds	r26, 0x023B
    142c:	b0 91 3c 02 	lds	r27, 0x023C
	unsigned char f = timer0_fract;
    1430:	30 91 3d 02 	lds	r19, 0x023D

	m += MILLIS_INC;
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	a1 1d       	adc	r26, r1
    1438:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    143a:	23 2f       	mov	r18, r19
    143c:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    143e:	2d 37       	cpi	r18, 0x7D	; 125
    1440:	20 f0       	brcs	.+8      	; 0x144a <__vector_16+0x40>
		f -= FRACT_MAX;
    1442:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	a1 1d       	adc	r26, r1
    1448:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    144a:	20 93 3d 02 	sts	0x023D, r18
	timer0_millis = m;
    144e:	80 93 39 02 	sts	0x0239, r24
    1452:	90 93 3a 02 	sts	0x023A, r25
    1456:	a0 93 3b 02 	sts	0x023B, r26
    145a:	b0 93 3c 02 	sts	0x023C, r27
	timer0_overflow_count++;
    145e:	80 91 35 02 	lds	r24, 0x0235
    1462:	90 91 36 02 	lds	r25, 0x0236
    1466:	a0 91 37 02 	lds	r26, 0x0237
    146a:	b0 91 38 02 	lds	r27, 0x0238
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	a1 1d       	adc	r26, r1
    1472:	b1 1d       	adc	r27, r1
    1474:	80 93 35 02 	sts	0x0235, r24
    1478:	90 93 36 02 	sts	0x0236, r25
    147c:	a0 93 37 02 	sts	0x0237, r26
    1480:	b0 93 38 02 	sts	0x0238, r27
}
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	0f 90       	pop	r0
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	0f 90       	pop	r0
    1496:	1f 90       	pop	r1
    1498:	18 95       	reti

0000149a <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    149a:	9b 01       	movw	r18, r22
    149c:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    149e:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    14a0:	f8 94       	cli
	m = timer0_overflow_count;
    14a2:	80 91 35 02 	lds	r24, 0x0235
    14a6:	90 91 36 02 	lds	r25, 0x0236
    14aa:	a0 91 37 02 	lds	r26, 0x0237
    14ae:	b0 91 38 02 	lds	r27, 0x0238
#if defined(TCNT0)
	t = TCNT0;
    14b2:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    14b4:	a8 9b       	sbis	0x15, 0	; 21
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <delay+0x28>
    14b8:	6f 3f       	cpi	r22, 0xFF	; 255
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <delay+0x28>
		m++;
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	a1 1d       	adc	r26, r1
    14c0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    14c2:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    14c4:	ba 2f       	mov	r27, r26
    14c6:	a9 2f       	mov	r26, r25
    14c8:	98 2f       	mov	r25, r24
    14ca:	88 27       	eor	r24, r24
    14cc:	86 0f       	add	r24, r22
    14ce:	91 1d       	adc	r25, r1
    14d0:	a1 1d       	adc	r26, r1
    14d2:	b1 1d       	adc	r27, r1
    14d4:	62 e0       	ldi	r22, 0x02	; 2
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	aa 1f       	adc	r26, r26
    14dc:	bb 1f       	adc	r27, r27
    14de:	6a 95       	dec	r22
    14e0:	d1 f7       	brne	.-12     	; 0x14d6 <delay+0x3c>
    14e2:	bc 01       	movw	r22, r24
    14e4:	2d c0       	rjmp	.+90     	; 0x1540 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    14e6:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    14e8:	f8 94       	cli
	m = timer0_overflow_count;
    14ea:	80 91 35 02 	lds	r24, 0x0235
    14ee:	90 91 36 02 	lds	r25, 0x0236
    14f2:	a0 91 37 02 	lds	r26, 0x0237
    14f6:	b0 91 38 02 	lds	r27, 0x0238
#if defined(TCNT0)
	t = TCNT0;
    14fa:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    14fc:	a8 9b       	sbis	0x15, 0	; 21
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <delay+0x70>
    1500:	ef 3f       	cpi	r30, 0xFF	; 255
    1502:	19 f0       	breq	.+6      	; 0x150a <delay+0x70>
		m++;
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	a1 1d       	adc	r26, r1
    1508:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    150a:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    150c:	ba 2f       	mov	r27, r26
    150e:	a9 2f       	mov	r26, r25
    1510:	98 2f       	mov	r25, r24
    1512:	88 27       	eor	r24, r24
    1514:	8e 0f       	add	r24, r30
    1516:	91 1d       	adc	r25, r1
    1518:	a1 1d       	adc	r26, r1
    151a:	b1 1d       	adc	r27, r1
    151c:	e2 e0       	ldi	r30, 0x02	; 2
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	aa 1f       	adc	r26, r26
    1524:	bb 1f       	adc	r27, r27
    1526:	ea 95       	dec	r30
    1528:	d1 f7       	brne	.-12     	; 0x151e <delay+0x84>
    152a:	86 1b       	sub	r24, r22
    152c:	97 0b       	sbc	r25, r23
    152e:	88 5e       	subi	r24, 0xE8	; 232
    1530:	93 40       	sbci	r25, 0x03	; 3
    1532:	c8 f2       	brcs	.-78     	; 0x14e6 <delay+0x4c>
			ms--;
    1534:	21 50       	subi	r18, 0x01	; 1
    1536:	30 40       	sbci	r19, 0x00	; 0
    1538:	40 40       	sbci	r20, 0x00	; 0
    153a:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    153c:	68 51       	subi	r22, 0x18	; 24
    153e:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1540:	21 15       	cp	r18, r1
    1542:	31 05       	cpc	r19, r1
    1544:	41 05       	cpc	r20, r1
    1546:	51 05       	cpc	r21, r1
    1548:	71 f6       	brne	.-100    	; 0x14e6 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    154a:	08 95       	ret

0000154c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    154c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    154e:	84 b5       	in	r24, 0x24	; 36
    1550:	82 60       	ori	r24, 0x02	; 2
    1552:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1554:	84 b5       	in	r24, 0x24	; 36
    1556:	81 60       	ori	r24, 0x01	; 1
    1558:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    155a:	85 b5       	in	r24, 0x25	; 37
    155c:	82 60       	ori	r24, 0x02	; 2
    155e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1560:	85 b5       	in	r24, 0x25	; 37
    1562:	81 60       	ori	r24, 0x01	; 1
    1564:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1566:	ee e6       	ldi	r30, 0x6E	; 110
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	81 60       	ori	r24, 0x01	; 1
    156e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1570:	e1 e8       	ldi	r30, 0x81	; 129
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1576:	80 81       	ld	r24, Z
    1578:	82 60       	ori	r24, 0x02	; 2
    157a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    157c:	80 81       	ld	r24, Z
    157e:	81 60       	ori	r24, 0x01	; 1
    1580:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1582:	e0 e8       	ldi	r30, 0x80	; 128
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	81 60       	ori	r24, 0x01	; 1
    158a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    158c:	e1 eb       	ldi	r30, 0xB1	; 177
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	84 60       	ori	r24, 0x04	; 4
    1594:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1596:	e0 eb       	ldi	r30, 0xB0	; 176
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    15a0:	ea e7       	ldi	r30, 0x7A	; 122
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	84 60       	ori	r24, 0x04	; 4
    15a8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    15aa:	80 81       	ld	r24, Z
    15ac:	82 60       	ori	r24, 0x02	; 2
    15ae:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    15b0:	80 81       	ld	r24, Z
    15b2:	81 60       	ori	r24, 0x01	; 1
    15b4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    15b6:	80 81       	ld	r24, Z
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    15bc:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    15c0:	08 95       	ret

000015c2 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    15c2:	48 2f       	mov	r20, r24
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	ca 01       	movw	r24, r20
    15c8:	86 56       	subi	r24, 0x66	; 102
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	fc 01       	movw	r30, r24
    15ce:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    15d0:	4a 57       	subi	r20, 0x7A	; 122
    15d2:	5f 4f       	sbci	r21, 0xFF	; 255
    15d4:	fa 01       	movw	r30, r20
    15d6:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    15d8:	88 23       	and	r24, r24
    15da:	c1 f0       	breq	.+48     	; 0x160c <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    15dc:	e8 2f       	mov	r30, r24
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	e8 59       	subi	r30, 0x98	; 152
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	a5 91       	lpm	r26, Z+
    15ea:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    15ec:	66 23       	and	r22, r22
    15ee:	41 f4       	brne	.+16     	; 0x1600 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    15f0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    15f2:	f8 94       	cli
		*reg &= ~bit;
    15f4:	8c 91       	ld	r24, X
    15f6:	20 95       	com	r18
    15f8:	82 23       	and	r24, r18
    15fa:	8c 93       	st	X, r24
		SREG = oldSREG;
    15fc:	9f bf       	out	0x3f, r25	; 63
    15fe:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    1600:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1602:	f8 94       	cli
		*reg |= bit;
    1604:	8c 91       	ld	r24, X
    1606:	82 2b       	or	r24, r18
    1608:	8c 93       	st	X, r24
		SREG = oldSREG;
    160a:	9f bf       	out	0x3f, r25	; 63
    160c:	08 95       	ret

0000160e <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    160e:	48 2f       	mov	r20, r24
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	ca 01       	movw	r24, r20
    1614:	82 55       	subi	r24, 0x52	; 82
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	fc 01       	movw	r30, r24
    161a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    161c:	ca 01       	movw	r24, r20
    161e:	86 56       	subi	r24, 0x66	; 102
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	fc 01       	movw	r30, r24
    1624:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1626:	4a 57       	subi	r20, 0x7A	; 122
    1628:	5f 4f       	sbci	r21, 0xFF	; 255
    162a:	fa 01       	movw	r30, r20
    162c:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    162e:	33 23       	and	r19, r19
    1630:	09 f4       	brne	.+2      	; 0x1634 <digitalWrite+0x26>
    1632:	40 c0       	rjmp	.+128    	; 0x16b4 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1634:	22 23       	and	r18, r18
    1636:	51 f1       	breq	.+84     	; 0x168c <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1638:	23 30       	cpi	r18, 0x03	; 3
    163a:	71 f0       	breq	.+28     	; 0x1658 <digitalWrite+0x4a>
    163c:	24 30       	cpi	r18, 0x04	; 4
    163e:	28 f4       	brcc	.+10     	; 0x164a <digitalWrite+0x3c>
    1640:	21 30       	cpi	r18, 0x01	; 1
    1642:	a1 f0       	breq	.+40     	; 0x166c <digitalWrite+0x5e>
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	11 f5       	brne	.+68     	; 0x168c <digitalWrite+0x7e>
    1648:	14 c0       	rjmp	.+40     	; 0x1672 <digitalWrite+0x64>
    164a:	26 30       	cpi	r18, 0x06	; 6
    164c:	b1 f0       	breq	.+44     	; 0x167a <digitalWrite+0x6c>
    164e:	27 30       	cpi	r18, 0x07	; 7
    1650:	c1 f0       	breq	.+48     	; 0x1682 <digitalWrite+0x74>
    1652:	24 30       	cpi	r18, 0x04	; 4
    1654:	d9 f4       	brne	.+54     	; 0x168c <digitalWrite+0x7e>
    1656:	04 c0       	rjmp	.+8      	; 0x1660 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1658:	80 91 80 00 	lds	r24, 0x0080
    165c:	8f 77       	andi	r24, 0x7F	; 127
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1660:	80 91 80 00 	lds	r24, 0x0080
    1664:	8f 7d       	andi	r24, 0xDF	; 223
    1666:	80 93 80 00 	sts	0x0080, r24
    166a:	10 c0       	rjmp	.+32     	; 0x168c <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    166c:	84 b5       	in	r24, 0x24	; 36
    166e:	8f 77       	andi	r24, 0x7F	; 127
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1672:	84 b5       	in	r24, 0x24	; 36
    1674:	8f 7d       	andi	r24, 0xDF	; 223
    1676:	84 bd       	out	0x24, r24	; 36
    1678:	09 c0       	rjmp	.+18     	; 0x168c <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    167a:	80 91 b0 00 	lds	r24, 0x00B0
    167e:	8f 77       	andi	r24, 0x7F	; 127
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1682:	80 91 b0 00 	lds	r24, 0x00B0
    1686:	8f 7d       	andi	r24, 0xDF	; 223
    1688:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    168c:	e3 2f       	mov	r30, r19
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 58       	subi	r30, 0x8E	; 142
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	a5 91       	lpm	r26, Z+
    169a:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    169c:	2f b7       	in	r18, 0x3f	; 63
	cli();
    169e:	f8 94       	cli

	if (val == LOW) {
    16a0:	66 23       	and	r22, r22
    16a2:	21 f4       	brne	.+8      	; 0x16ac <digitalWrite+0x9e>
		*out &= ~bit;
    16a4:	8c 91       	ld	r24, X
    16a6:	90 95       	com	r25
    16a8:	89 23       	and	r24, r25
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    16ac:	8c 91       	ld	r24, X
    16ae:	89 2b       	or	r24, r25
    16b0:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    16b2:	2f bf       	out	0x3f, r18	; 63
    16b4:	08 95       	ret

000016b6 <__mulsi3>:
    16b6:	62 9f       	mul	r22, r18
    16b8:	d0 01       	movw	r26, r0
    16ba:	73 9f       	mul	r23, r19
    16bc:	f0 01       	movw	r30, r0
    16be:	82 9f       	mul	r24, r18
    16c0:	e0 0d       	add	r30, r0
    16c2:	f1 1d       	adc	r31, r1
    16c4:	64 9f       	mul	r22, r20
    16c6:	e0 0d       	add	r30, r0
    16c8:	f1 1d       	adc	r31, r1
    16ca:	92 9f       	mul	r25, r18
    16cc:	f0 0d       	add	r31, r0
    16ce:	83 9f       	mul	r24, r19
    16d0:	f0 0d       	add	r31, r0
    16d2:	74 9f       	mul	r23, r20
    16d4:	f0 0d       	add	r31, r0
    16d6:	65 9f       	mul	r22, r21
    16d8:	f0 0d       	add	r31, r0
    16da:	99 27       	eor	r25, r25
    16dc:	72 9f       	mul	r23, r18
    16de:	b0 0d       	add	r27, r0
    16e0:	e1 1d       	adc	r30, r1
    16e2:	f9 1f       	adc	r31, r25
    16e4:	63 9f       	mul	r22, r19
    16e6:	b0 0d       	add	r27, r0
    16e8:	e1 1d       	adc	r30, r1
    16ea:	f9 1f       	adc	r31, r25
    16ec:	bd 01       	movw	r22, r26
    16ee:	cf 01       	movw	r24, r30
    16f0:	11 24       	eor	r1, r1
    16f2:	08 95       	ret

000016f4 <__udivmodqi4>:
    16f4:	99 1b       	sub	r25, r25
    16f6:	79 e0       	ldi	r23, 0x09	; 9
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__udivmodqi4_ep>

000016fa <__udivmodqi4_loop>:
    16fa:	99 1f       	adc	r25, r25
    16fc:	96 17       	cp	r25, r22
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <__udivmodqi4_ep>
    1700:	96 1b       	sub	r25, r22

00001702 <__udivmodqi4_ep>:
    1702:	88 1f       	adc	r24, r24
    1704:	7a 95       	dec	r23
    1706:	c9 f7       	brne	.-14     	; 0x16fa <__udivmodqi4_loop>
    1708:	80 95       	com	r24
    170a:	08 95       	ret

0000170c <__divmodhi4>:
    170c:	97 fb       	bst	r25, 7
    170e:	09 2e       	mov	r0, r25
    1710:	07 26       	eor	r0, r23
    1712:	0a d0       	rcall	.+20     	; 0x1728 <__divmodhi4_neg1>
    1714:	77 fd       	sbrc	r23, 7
    1716:	04 d0       	rcall	.+8      	; 0x1720 <__divmodhi4_neg2>
    1718:	2e d0       	rcall	.+92     	; 0x1776 <__udivmodhi4>
    171a:	06 d0       	rcall	.+12     	; 0x1728 <__divmodhi4_neg1>
    171c:	00 20       	and	r0, r0
    171e:	1a f4       	brpl	.+6      	; 0x1726 <__divmodhi4_exit>

00001720 <__divmodhi4_neg2>:
    1720:	70 95       	com	r23
    1722:	61 95       	neg	r22
    1724:	7f 4f       	sbci	r23, 0xFF	; 255

00001726 <__divmodhi4_exit>:
    1726:	08 95       	ret

00001728 <__divmodhi4_neg1>:
    1728:	f6 f7       	brtc	.-4      	; 0x1726 <__divmodhi4_exit>
    172a:	90 95       	com	r25
    172c:	81 95       	neg	r24
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	08 95       	ret

00001732 <__udivmodsi4>:
    1732:	a1 e2       	ldi	r26, 0x21	; 33
    1734:	1a 2e       	mov	r1, r26
    1736:	aa 1b       	sub	r26, r26
    1738:	bb 1b       	sub	r27, r27
    173a:	fd 01       	movw	r30, r26
    173c:	0d c0       	rjmp	.+26     	; 0x1758 <__udivmodsi4_ep>

0000173e <__udivmodsi4_loop>:
    173e:	aa 1f       	adc	r26, r26
    1740:	bb 1f       	adc	r27, r27
    1742:	ee 1f       	adc	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	a2 17       	cp	r26, r18
    1748:	b3 07       	cpc	r27, r19
    174a:	e4 07       	cpc	r30, r20
    174c:	f5 07       	cpc	r31, r21
    174e:	20 f0       	brcs	.+8      	; 0x1758 <__udivmodsi4_ep>
    1750:	a2 1b       	sub	r26, r18
    1752:	b3 0b       	sbc	r27, r19
    1754:	e4 0b       	sbc	r30, r20
    1756:	f5 0b       	sbc	r31, r21

00001758 <__udivmodsi4_ep>:
    1758:	66 1f       	adc	r22, r22
    175a:	77 1f       	adc	r23, r23
    175c:	88 1f       	adc	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	1a 94       	dec	r1
    1762:	69 f7       	brne	.-38     	; 0x173e <__udivmodsi4_loop>
    1764:	60 95       	com	r22
    1766:	70 95       	com	r23
    1768:	80 95       	com	r24
    176a:	90 95       	com	r25
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	bd 01       	movw	r22, r26
    1772:	cf 01       	movw	r24, r30
    1774:	08 95       	ret

00001776 <__udivmodhi4>:
    1776:	aa 1b       	sub	r26, r26
    1778:	bb 1b       	sub	r27, r27
    177a:	51 e1       	ldi	r21, 0x11	; 17
    177c:	07 c0       	rjmp	.+14     	; 0x178c <__udivmodhi4_ep>

0000177e <__udivmodhi4_loop>:
    177e:	aa 1f       	adc	r26, r26
    1780:	bb 1f       	adc	r27, r27
    1782:	a6 17       	cp	r26, r22
    1784:	b7 07       	cpc	r27, r23
    1786:	10 f0       	brcs	.+4      	; 0x178c <__udivmodhi4_ep>
    1788:	a6 1b       	sub	r26, r22
    178a:	b7 0b       	sbc	r27, r23

0000178c <__udivmodhi4_ep>:
    178c:	88 1f       	adc	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	5a 95       	dec	r21
    1792:	a9 f7       	brne	.-22     	; 0x177e <__udivmodhi4_loop>
    1794:	80 95       	com	r24
    1796:	90 95       	com	r25
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	08 95       	ret

0000179e <__tablejump2__>:
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31

000017a2 <__tablejump__>:
    17a2:	05 90       	lpm	r0, Z+
    17a4:	f4 91       	lpm	r31, Z+
    17a6:	e0 2d       	mov	r30, r0
    17a8:	09 94       	ijmp

000017aa <_exit>:
    17aa:	f8 94       	cli

000017ac <__stop_program>:
    17ac:	ff cf       	rjmp	.-2      	; 0x17ac <__stop_program>
