In archive libArduino_Uno.a:

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000063  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000137  00000000  00000000  00000097  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000012a  00000000  00000000  000001ce  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_str    0000010f  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000063  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000137  00000000  00000000  00000097  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000012a  00000000  00000000  000001ce  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_str    0000010f  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000003f6  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d1b  00000000  00000000  0000042a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000006a0  00000000  00000000  00001145  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._Z11serialEventv 00000002  00000000  00000000  000017e5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.__vector_18 00000068  00000000  00000000  000017e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z14serialEventRunv 00000026  00000000  00000000  0000184f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__vector_19 00000092  00000000  00000000  00001875  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh 0000007e  00000000  00000000  00001907  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh 0000007e  00000000  00000000  00001985  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN14HardwareSerial5beginEm 0000010c  00000000  00000000  00001a03  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN14HardwareSerial3endEv 000000cc  00000000  00000000  00001b0f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN14HardwareSerial9availableEv 00000022  00000000  00000000  00001bdb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text._ZN14HardwareSerial4peekEv 00000040  00000000  00000000  00001bfd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14HardwareSerial4readEv 00000052  00000000  00000000  00001c3d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN14HardwareSerial5flushEv 00000024  00000000  00000000  00001c8f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14HardwareSerial5writeEh 00000078  00000000  00000000  00001cb3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._GLOBAL__I_rx_buffer 000000a0  00000000  00000000  00001d2b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .ctors        00000002  00000000  00000000  00001dcb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 21 .bss.rx_buffer 00000044  00000000  00000000  00001dcd  2**0
                  ALLOC
 22 .bss.tx_buffer 00000044  00000000  00000000  00001dcd  2**0
                  ALLOC
 23 .bss.Serial   0000001f  00000000  00000000  00001dcd  2**0
                  ALLOC
 24 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  00001dcd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 25 .rodata._ZTV6Stream 00000010  00000000  00000000  00001ddd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 26 .debug_frame  000000f0  00000000  00000000  00001df0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 27 .debug_loc    0000039a  00000000  00000000  00001ee0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 28 .debug_pubnames 00000178  00000000  00000000  0000227a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 29 .debug_aranges 00000088  00000000  00000000  000023f2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 30 .debug_ranges 00000080  00000000  00000000  0000247a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 31 .debug_str    000005ef  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._Z11serialEventv:

00000000 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
   0:	08 95       	ret

Disassembly of section .text.__vector_18:

00000000 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	8f 93       	push	r24
  12:	9f 93       	push	r25
  14:	ef 93       	push	r30
  16:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
  18:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
  1c:	20 91 00 00 	lds	r18, 0x0000
  20:	30 91 00 00 	lds	r19, 0x0000
  24:	2f 5f       	subi	r18, 0xFF	; 255
  26:	3f 4f       	sbci	r19, 0xFF	; 255
  28:	2f 73       	andi	r18, 0x3F	; 63
  2a:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	28 17       	cp	r18, r24
  36:	39 07       	cpc	r19, r25
  38:	01 f0       	breq	.+0      	; 0x3a <__vector_18+0x3a>
    buffer->buffer[buffer->head] = c;
  3a:	e0 91 00 00 	lds	r30, 0x0000
  3e:	f0 91 00 00 	lds	r31, 0x0000
  42:	e0 50       	subi	r30, 0x00	; 0
  44:	f0 40       	sbci	r31, 0x00	; 0
  46:	40 83       	st	Z, r20
    buffer->head = i;
  48:	30 93 00 00 	sts	0x0000, r19
  4c:	20 93 00 00 	sts	0x0000, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
  50:	ff 91       	pop	r31
  52:	ef 91       	pop	r30
  54:	9f 91       	pop	r25
  56:	8f 91       	pop	r24
  58:	4f 91       	pop	r20
  5a:	3f 91       	pop	r19
  5c:	2f 91       	pop	r18
  5e:	0f 90       	pop	r0
  60:	0f be       	out	0x3f, r0	; 63
  62:	0f 90       	pop	r0
  64:	1f 90       	pop	r1
  66:	18 95       	reti

Disassembly of section .text._Z14serialEventRunv:

00000000 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
   0:	e0 91 00 00 	lds	r30, 0x0000
   4:	f0 91 00 00 	lds	r31, 0x0000
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	81 91       	ld	r24, Z+
   e:	91 91       	ld	r25, Z+
  10:	20 81       	ld	r18, Z
  12:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
  14:	82 1b       	sub	r24, r18
  16:	93 0b       	sbc	r25, r19
  18:	8f 73       	andi	r24, 0x3F	; 63
  1a:	90 70       	andi	r25, 0x00	; 0
  1c:	89 2b       	or	r24, r25
  1e:	01 f0       	breq	.+0      	; 0x20 <_Z14serialEventRunv+0x20>
  20:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  24:	08 95       	ret

Disassembly of section .text.__vector_19:

00000000 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
  22:	20 91 00 00 	lds	r18, 0x0000
  26:	30 91 00 00 	lds	r19, 0x0000
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	28 17       	cp	r18, r24
  34:	39 07       	cpc	r19, r25
  36:	01 f4       	brne	.+0      	; 0x38 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
  38:	80 91 c1 00 	lds	r24, 0x00C1
  3c:	8f 7d       	andi	r24, 0xDF	; 223
  3e:	80 93 c1 00 	sts	0x00C1, r24
  42:	00 c0       	rjmp	.+0      	; 0x44 <__vector_19+0x44>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
  44:	e0 91 00 00 	lds	r30, 0x0000
  48:	f0 91 00 00 	lds	r31, 0x0000
  4c:	e0 50       	subi	r30, 0x00	; 0
  4e:	f0 40       	sbci	r31, 0x00	; 0
  50:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
  52:	80 91 00 00 	lds	r24, 0x0000
  56:	90 91 00 00 	lds	r25, 0x0000
  5a:	01 96       	adiw	r24, 0x01	; 1
  5c:	60 e4       	ldi	r22, 0x40	; 64
  5e:	70 e0       	ldi	r23, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <__vector_19>
  64:	90 93 00 00 	sts	0x0000, r25
  68:	80 93 00 00 	sts	0x0000, r24
	
  #if defined(UDR0)
    UDR0 = c;
  6c:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
  70:	ff 91       	pop	r31
  72:	ef 91       	pop	r30
  74:	bf 91       	pop	r27
  76:	af 91       	pop	r26
  78:	9f 91       	pop	r25
  7a:	8f 91       	pop	r24
  7c:	7f 91       	pop	r23
  7e:	6f 91       	pop	r22
  80:	5f 91       	pop	r21
  82:	4f 91       	pop	r20
  84:	3f 91       	pop	r19
  86:	2f 91       	pop	r18
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   0:	8f 92       	push	r8
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
  1c:	13 82       	std	Z+3, r1	; 0x03
  1e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  20:	88 ee       	ldi	r24, 0xE8	; 232
  22:	93 e0       	ldi	r25, 0x03	; 3
  24:	a0 e0       	ldi	r26, 0x00	; 0
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	84 83       	std	Z+4, r24	; 0x04
  2a:	95 83       	std	Z+5, r25	; 0x05
  2c:	a6 83       	std	Z+6, r26	; 0x06
  2e:	b7 83       	std	Z+7, r27	; 0x07
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	91 83       	std	Z+1, r25	; 0x01
  36:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
  38:	75 87       	std	Z+13, r23	; 0x0d
  3a:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
  3c:	57 87       	std	Z+15, r21	; 0x0f
  3e:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
  40:	31 8b       	std	Z+17, r19	; 0x11
  42:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
  44:	13 8b       	std	Z+19, r17	; 0x13
  46:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
  48:	f5 8a       	std	Z+21, r15	; 0x15
  4a:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
  4c:	d7 8a       	std	Z+23, r13	; 0x17
  4e:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
  50:	b1 8e       	std	Z+25, r11	; 0x19
  52:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
  54:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
  56:	8e 85       	ldd	r24, Y+14	; 0x0e
  58:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
  5a:	8f 85       	ldd	r24, Y+15	; 0x0f
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
  5e:	88 89       	ldd	r24, Y+16	; 0x10
  60:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
  62:	89 89       	ldd	r24, Y+17	; 0x11
  64:	86 8f       	std	Z+30, r24	; 0x1e
}
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	ff 90       	pop	r15
  70:	ef 90       	pop	r14
  72:	df 90       	pop	r13
  74:	cf 90       	pop	r12
  76:	bf 90       	pop	r11
  78:	af 90       	pop	r10
  7a:	8f 90       	pop	r8
  7c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   0:	8f 92       	push	r8
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	fc 01       	movw	r30, r24
  1c:	13 82       	std	Z+3, r1	; 0x03
  1e:	12 82       	std	Z+2, r1	; 0x02
  20:	88 ee       	ldi	r24, 0xE8	; 232
  22:	93 e0       	ldi	r25, 0x03	; 3
  24:	a0 e0       	ldi	r26, 0x00	; 0
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	84 83       	std	Z+4, r24	; 0x04
  2a:	95 83       	std	Z+5, r25	; 0x05
  2c:	a6 83       	std	Z+6, r26	; 0x06
  2e:	b7 83       	std	Z+7, r27	; 0x07
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	91 83       	std	Z+1, r25	; 0x01
  36:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
  38:	75 87       	std	Z+13, r23	; 0x0d
  3a:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
  3c:	57 87       	std	Z+15, r21	; 0x0f
  3e:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
  40:	31 8b       	std	Z+17, r19	; 0x11
  42:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
  44:	13 8b       	std	Z+19, r17	; 0x13
  46:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
  48:	f5 8a       	std	Z+21, r15	; 0x15
  4a:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
  4c:	d7 8a       	std	Z+23, r13	; 0x17
  4e:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
  50:	b1 8e       	std	Z+25, r11	; 0x19
  52:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
  54:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
  56:	8e 85       	ldd	r24, Y+14	; 0x0e
  58:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
  5a:	8f 85       	ldd	r24, Y+15	; 0x0f
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
  5e:	88 89       	ldd	r24, Y+16	; 0x10
  60:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
  62:	89 89       	ldd	r24, Y+17	; 0x11
  64:	86 8f       	std	Z+30, r24	; 0x1e
}
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	ff 90       	pop	r15
  70:	ef 90       	pop	r14
  72:	df 90       	pop	r13
  74:	cf 90       	pop	r12
  76:	bf 90       	pop	r11
  78:	af 90       	pop	r10
  7a:	8f 90       	pop	r8
  7c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEm:

00000000 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	ec 01       	movw	r28, r24
  14:	7a 01       	movw	r14, r20
  16:	8b 01       	movw	r16, r22
  18:	dd 24       	eor	r13, r13
  1a:	40 30       	cpi	r20, 0x00	; 0
  1c:	81 ee       	ldi	r24, 0xE1	; 225
  1e:	58 07       	cpc	r21, r24
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	68 07       	cpc	r22, r24
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	78 07       	cpc	r23, r24
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN14HardwareSerial5beginEm+0x2a>
  2a:	dd 24       	eor	r13, r13
  2c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
  2e:	91 e0       	ldi	r25, 0x01	; 1
  30:	a9 2e       	mov	r10, r25
  32:	b1 2c       	mov	r11, r1
  34:	ec 89       	ldd	r30, Y+20	; 0x14
  36:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
  38:	dd 20       	and	r13, r13
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN14HardwareSerial5beginEm+0x3c>
    *_ucsra = 1 << _u2x;
  3c:	c5 01       	movw	r24, r10
  3e:	0e 8c       	ldd	r0, Y+30	; 0x1e
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN14HardwareSerial5beginEm+0x42>
  42:	88 0f       	add	r24, r24
  44:	99 1f       	adc	r25, r25
  46:	0a 94       	dec	r0
  48:	02 f4       	brpl	.+0      	; 0x4a <_ZN14HardwareSerial5beginEm+0x4a>
  4a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  4c:	60 e0       	ldi	r22, 0x00	; 0
  4e:	79 e0       	ldi	r23, 0x09	; 9
  50:	8d e3       	ldi	r24, 0x3D	; 61
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN14HardwareSerial5beginEm+0x56>
  } else {
    *_ucsra = 0;
  56:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  58:	60 e8       	ldi	r22, 0x80	; 128
  5a:	74 e8       	ldi	r23, 0x84	; 132
  5c:	8e e1       	ldi	r24, 0x1E	; 30
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	a8 01       	movw	r20, r16
  62:	97 01       	movw	r18, r14
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  68:	21 50       	subi	r18, 0x01	; 1
  6a:	30 40       	sbci	r19, 0x00	; 0
  6c:	40 40       	sbci	r20, 0x00	; 0
  6e:	50 40       	sbci	r21, 0x00	; 0
  70:	56 95       	lsr	r21
  72:	47 95       	ror	r20
  74:	37 95       	ror	r19
  76:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	20 30       	cpi	r18, 0x00	; 0
  7c:	38 07       	cpc	r19, r24
  7e:	00 f0       	brcs	.+0      	; 0x80 <_ZN14HardwareSerial5beginEm+0x80>
  80:	dd 20       	and	r13, r13
  82:	01 f0       	breq	.+0      	; 0x84 <_ZN14HardwareSerial5beginEm+0x84>
  84:	dd 24       	eor	r13, r13
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN14HardwareSerial5beginEm+0x88>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
  88:	e8 89       	ldd	r30, Y+16	; 0x10
  8a:	f9 89       	ldd	r31, Y+17	; 0x11
  8c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
  8e:	ea 89       	ldd	r30, Y+18	; 0x12
  90:	fb 89       	ldd	r31, Y+19	; 0x13
  92:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
  94:	ee 89       	ldd	r30, Y+22	; 0x16
  96:	ff 89       	ldd	r31, Y+23	; 0x17
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	c9 01       	movw	r24, r18
  a0:	0a 8c       	ldd	r0, Y+26	; 0x1a
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN14HardwareSerial5beginEm+0xa4>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	0a 94       	dec	r0
  aa:	02 f4       	brpl	.+0      	; 0xac <_ZN14HardwareSerial5beginEm+0xac>
  ac:	48 2b       	or	r20, r24
  ae:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
  b0:	ee 89       	ldd	r30, Y+22	; 0x16
  b2:	ff 89       	ldd	r31, Y+23	; 0x17
  b4:	40 81       	ld	r20, Z
  b6:	c9 01       	movw	r24, r18
  b8:	0b 8c       	ldd	r0, Y+27	; 0x1b
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_ZN14HardwareSerial5beginEm+0xbc>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	0a 94       	dec	r0
  c2:	02 f4       	brpl	.+0      	; 0xc4 <_ZN14HardwareSerial5beginEm+0xc4>
  c4:	48 2b       	or	r20, r24
  c6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
  c8:	ee 89       	ldd	r30, Y+22	; 0x16
  ca:	ff 89       	ldd	r31, Y+23	; 0x17
  cc:	40 81       	ld	r20, Z
  ce:	c9 01       	movw	r24, r18
  d0:	0c 8c       	ldd	r0, Y+28	; 0x1c
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN14HardwareSerial5beginEm+0xd4>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	0a 94       	dec	r0
  da:	02 f4       	brpl	.+0      	; 0xdc <_ZN14HardwareSerial5beginEm+0xdc>
  dc:	48 2b       	or	r20, r24
  de:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
  e0:	ee 89       	ldd	r30, Y+22	; 0x16
  e2:	ff 89       	ldd	r31, Y+23	; 0x17
  e4:	80 81       	ld	r24, Z
  e6:	0d 8c       	ldd	r0, Y+29	; 0x1d
  e8:	00 c0       	rjmp	.+0      	; 0xea <_ZN14HardwareSerial5beginEm+0xea>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	0a 94       	dec	r0
  f0:	02 f4       	brpl	.+0      	; 0xf2 <_ZN14HardwareSerial5beginEm+0xf2>
  f2:	20 95       	com	r18
  f4:	28 23       	and	r18, r24
  f6:	20 83       	st	Z, r18
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	ff 90       	pop	r15
 102:	ef 90       	pop	r14
 104:	df 90       	pop	r13
 106:	bf 90       	pop	r11
 108:	af 90       	pop	r10
 10a:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

00000000 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
   6:	1e 96       	adiw	r26, 0x0e	; 14
   8:	8d 91       	ld	r24, X+
   a:	9c 91       	ld	r25, X
   c:	1f 97       	sbiw	r26, 0x0f	; 15
   e:	ec 01       	movw	r28, r24
  10:	c0 5c       	subi	r28, 0xC0	; 192
  12:	df 4f       	sbci	r29, 0xFF	; 255
  14:	fc 01       	movw	r30, r24
  16:	ee 5b       	subi	r30, 0xBE	; 190
  18:	ff 4f       	sbci	r31, 0xFF	; 255
  1a:	28 81       	ld	r18, Y
  1c:	39 81       	ldd	r19, Y+1	; 0x01
  1e:	80 81       	ld	r24, Z
  20:	91 81       	ldd	r25, Z+1	; 0x01
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial3endEv+0x28>
    ;

  cbi(*_ucsrb, _rxen);
  28:	56 96       	adiw	r26, 0x16	; 22
  2a:	ed 91       	ld	r30, X+
  2c:	fc 91       	ld	r31, X
  2e:	57 97       	sbiw	r26, 0x17	; 23
  30:	40 81       	ld	r20, Z
  32:	21 e0       	ldi	r18, 0x01	; 1
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	c9 01       	movw	r24, r18
  38:	5a 96       	adiw	r26, 0x1a	; 26
  3a:	0c 90       	ld	r0, X
  3c:	5a 97       	sbiw	r26, 0x1a	; 26
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN14HardwareSerial3endEv+0x40>
  40:	88 0f       	add	r24, r24
  42:	99 1f       	adc	r25, r25
  44:	0a 94       	dec	r0
  46:	02 f4       	brpl	.+0      	; 0x48 <_ZN14HardwareSerial3endEv+0x48>
  48:	80 95       	com	r24
  4a:	84 23       	and	r24, r20
  4c:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
  4e:	56 96       	adiw	r26, 0x16	; 22
  50:	ed 91       	ld	r30, X+
  52:	fc 91       	ld	r31, X
  54:	57 97       	sbiw	r26, 0x17	; 23
  56:	40 81       	ld	r20, Z
  58:	c9 01       	movw	r24, r18
  5a:	5b 96       	adiw	r26, 0x1b	; 27
  5c:	0c 90       	ld	r0, X
  5e:	5b 97       	sbiw	r26, 0x1b	; 27
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN14HardwareSerial3endEv+0x62>
  62:	88 0f       	add	r24, r24
  64:	99 1f       	adc	r25, r25
  66:	0a 94       	dec	r0
  68:	02 f4       	brpl	.+0      	; 0x6a <_ZN14HardwareSerial3endEv+0x6a>
  6a:	80 95       	com	r24
  6c:	84 23       	and	r24, r20
  6e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
  70:	56 96       	adiw	r26, 0x16	; 22
  72:	ed 91       	ld	r30, X+
  74:	fc 91       	ld	r31, X
  76:	57 97       	sbiw	r26, 0x17	; 23
  78:	40 81       	ld	r20, Z
  7a:	c9 01       	movw	r24, r18
  7c:	5c 96       	adiw	r26, 0x1c	; 28
  7e:	0c 90       	ld	r0, X
  80:	5c 97       	sbiw	r26, 0x1c	; 28
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN14HardwareSerial3endEv+0x84>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	0a 94       	dec	r0
  8a:	02 f4       	brpl	.+0      	; 0x8c <_ZN14HardwareSerial3endEv+0x8c>
  8c:	80 95       	com	r24
  8e:	84 23       	and	r24, r20
  90:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
  92:	56 96       	adiw	r26, 0x16	; 22
  94:	ed 91       	ld	r30, X+
  96:	fc 91       	ld	r31, X
  98:	57 97       	sbiw	r26, 0x17	; 23
  9a:	80 81       	ld	r24, Z
  9c:	5d 96       	adiw	r26, 0x1d	; 29
  9e:	0c 90       	ld	r0, X
  a0:	5d 97       	sbiw	r26, 0x1d	; 29
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN14HardwareSerial3endEv+0xa4>
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	0a 94       	dec	r0
  aa:	02 f4       	brpl	.+0      	; 0xac <_ZN14HardwareSerial3endEv+0xac>
  ac:	20 95       	com	r18
  ae:	28 23       	and	r18, r24
  b0:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
  b2:	1c 96       	adiw	r26, 0x0c	; 12
  b4:	ed 91       	ld	r30, X+
  b6:	fc 91       	ld	r31, X
  b8:	1d 97       	sbiw	r26, 0x0d	; 13
  ba:	ee 5b       	subi	r30, 0xBE	; 190
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	80 81       	ld	r24, Z
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	92 93       	st	-Z, r25
  c4:	82 93       	st	-Z, r24
}
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	21 91       	ld	r18, Z+
  10:	31 91       	ld	r19, Z+
  12:	80 81       	ld	r24, Z
  14:	91 81       	ldd	r25, Z+1	; 0x01
  16:	28 1b       	sub	r18, r24
  18:	39 0b       	sbc	r19, r25
  1a:	2f 73       	andi	r18, 0x3F	; 63
  1c:	30 70       	andi	r19, 0x00	; 0
}
  1e:	c9 01       	movw	r24, r18
  20:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000000 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	e0 54       	subi	r30, 0x40	; 64
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	df 01       	movw	r26, r30
  18:	ae 5b       	subi	r26, 0xBE	; 190
  1a:	bf 4f       	sbci	r27, 0xFF	; 255
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial4peekEv+0x28>
  28:	2f ef       	ldi	r18, 0xFF	; 255
  2a:	3f ef       	ldi	r19, 0xFF	; 255
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN14HardwareSerial4peekEv+0x2e>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  2e:	8d 91       	ld	r24, X+
  30:	9c 91       	ld	r25, X
  32:	e8 0f       	add	r30, r24
  34:	f9 1f       	adc	r31, r25
  36:	80 81       	ld	r24, Z
  38:	28 2f       	mov	r18, r24
  3a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
  3c:	c9 01       	movw	r24, r18
  3e:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000000 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	e0 54       	subi	r30, 0x40	; 64
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	df 01       	movw	r26, r30
  18:	ae 5b       	subi	r26, 0xBE	; 190
  1a:	bf 4f       	sbci	r27, 0xFF	; 255
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial4readEv+0x28>
  28:	2f ef       	ldi	r18, 0xFF	; 255
  2a:	3f ef       	ldi	r19, 0xFF	; 255
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN14HardwareSerial4readEv+0x2e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
  2e:	8d 91       	ld	r24, X+
  30:	9c 91       	ld	r25, X
  32:	11 97       	sbiw	r26, 0x01	; 1
  34:	e8 0f       	add	r30, r24
  36:	f9 1f       	adc	r31, r25
  38:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
  3a:	8d 91       	ld	r24, X+
  3c:	9c 91       	ld	r25, X
  3e:	11 97       	sbiw	r26, 0x01	; 1
  40:	01 96       	adiw	r24, 0x01	; 1
  42:	8f 73       	andi	r24, 0x3F	; 63
  44:	90 70       	andi	r25, 0x00	; 0
  46:	11 96       	adiw	r26, 0x01	; 1
  48:	9c 93       	st	X, r25
  4a:	8e 93       	st	-X, r24
    return c;
  4c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
  4e:	c9 01       	movw	r24, r18
  50:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000000 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
   0:	fc 01       	movw	r30, r24
   2:	86 85       	ldd	r24, Z+14	; 0x0e
   4:	97 85       	ldd	r25, Z+15	; 0x0f
   6:	dc 01       	movw	r26, r24
   8:	a0 5c       	subi	r26, 0xC0	; 192
   a:	bf 4f       	sbci	r27, 0xFF	; 255
   c:	fc 01       	movw	r30, r24
   e:	ee 5b       	subi	r30, 0xBE	; 190
  10:	ff 4f       	sbci	r31, 0xFF	; 255
  12:	2d 91       	ld	r18, X+
  14:	3c 91       	ld	r19, X
  16:	11 97       	sbiw	r26, 0x01	; 1
  18:	80 81       	ld	r24, Z
  1a:	91 81       	ldd	r25, Z+1	; 0x01
  1c:	28 17       	cp	r18, r24
  1e:	39 07       	cpc	r19, r25
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN14HardwareSerial5flushEv+0x22>
    ;
}
  22:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

00000000 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
   8:	ee 85       	ldd	r30, Y+14	; 0x0e
   a:	ff 85       	ldd	r31, Y+15	; 0x0f
   c:	e0 5c       	subi	r30, 0xC0	; 192
   e:	ff 4f       	sbci	r31, 0xFF	; 255
  10:	80 81       	ld	r24, Z
  12:	91 81       	ldd	r25, Z+1	; 0x01
  14:	e0 54       	subi	r30, 0x40	; 64
  16:	f0 40       	sbci	r31, 0x00	; 0
  18:	01 96       	adiw	r24, 0x01	; 1
  1a:	60 e4       	ldi	r22, 0x40	; 64
  1c:	70 e0       	ldi	r23, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5writeEh>
  22:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
  24:	df 01       	movw	r26, r30
  26:	ae 5b       	subi	r26, 0xBE	; 190
  28:	bf 4f       	sbci	r27, 0xFF	; 255
  2a:	8d 91       	ld	r24, X+
  2c:	9c 91       	ld	r25, X
  2e:	11 97       	sbiw	r26, 0x01	; 1
  30:	28 17       	cp	r18, r24
  32:	39 07       	cpc	r19, r25
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN14HardwareSerial5writeEh+0x36>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
  36:	e0 5c       	subi	r30, 0xC0	; 192
  38:	ff 4f       	sbci	r31, 0xFF	; 255
  3a:	80 81       	ld	r24, Z
  3c:	91 81       	ldd	r25, Z+1	; 0x01
  3e:	e0 54       	subi	r30, 0x40	; 64
  40:	f0 40       	sbci	r31, 0x00	; 0
  42:	e8 0f       	add	r30, r24
  44:	f9 1f       	adc	r31, r25
  46:	40 83       	st	Z, r20
  _tx_buffer->head = i;
  48:	ee 85       	ldd	r30, Y+14	; 0x0e
  4a:	ff 85       	ldd	r31, Y+15	; 0x0f
  4c:	e0 5c       	subi	r30, 0xC0	; 192
  4e:	ff 4f       	sbci	r31, 0xFF	; 255
  50:	31 83       	std	Z+1, r19	; 0x01
  52:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
  54:	ee 89       	ldd	r30, Y+22	; 0x16
  56:	ff 89       	ldd	r31, Y+23	; 0x17
  58:	20 81       	ld	r18, Z
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	0d 8c       	ldd	r0, Y+29	; 0x1d
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN14HardwareSerial5writeEh+0x62>
  62:	88 0f       	add	r24, r24
  64:	99 1f       	adc	r25, r25
  66:	0a 94       	dec	r0
  68:	02 f4       	brpl	.+0      	; 0x6a <_ZN14HardwareSerial5writeEh+0x6a>
  6a:	28 2b       	or	r18, r24
  6c:	20 83       	st	Z, r18
  
  return 1;
}
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	08 95       	ret

Disassembly of section .text._GLOBAL__I_rx_buffer:

00000000 <_GLOBAL__I_rx_buffer>:
   0:	10 92 00 00 	sts	0x0000, r1
   4:	10 92 00 00 	sts	0x0000, r1
   8:	88 ee       	ldi	r24, 0xE8	; 232
   a:	93 e0       	ldi	r25, 0x03	; 3
   c:	a0 e0       	ldi	r26, 0x00	; 0
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	80 93 00 00 	sts	0x0000, r24
  14:	90 93 00 00 	sts	0x0000, r25
  18:	a0 93 00 00 	sts	0x0000, r26
  1c:	b0 93 00 00 	sts	0x0000, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	90 93 00 00 	sts	0x0000, r25
  28:	80 93 00 00 	sts	0x0000, r24
{
  _rx_buffer = rx_buffer;
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	90 93 00 00 	sts	0x0000, r25
  34:	80 93 00 00 	sts	0x0000, r24
  _tx_buffer = tx_buffer;
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	90 93 00 00 	sts	0x0000, r25
  40:	80 93 00 00 	sts	0x0000, r24
  _ubrrh = ubrrh;
  44:	85 ec       	ldi	r24, 0xC5	; 197
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	90 93 00 00 	sts	0x0000, r25
  4c:	80 93 00 00 	sts	0x0000, r24
  _ubrrl = ubrrl;
  50:	84 ec       	ldi	r24, 0xC4	; 196
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	90 93 00 00 	sts	0x0000, r25
  58:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
  5c:	80 ec       	ldi	r24, 0xC0	; 192
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	90 93 00 00 	sts	0x0000, r25
  64:	80 93 00 00 	sts	0x0000, r24
  _ucsrb = ucsrb;
  68:	81 ec       	ldi	r24, 0xC1	; 193
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	90 93 00 00 	sts	0x0000, r25
  70:	80 93 00 00 	sts	0x0000, r24
  _udr = udr;
  74:	86 ec       	ldi	r24, 0xC6	; 198
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	90 93 00 00 	sts	0x0000, r25
  7c:	80 93 00 00 	sts	0x0000, r24
  _rxen = rxen;
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	80 93 00 00 	sts	0x0000, r24
  _txen = txen;
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	80 93 00 00 	sts	0x0000, r24
  _rxcie = rxcie;
  8c:	87 e0       	ldi	r24, 0x07	; 7
  8e:	80 93 00 00 	sts	0x0000, r24
  _udrie = udrie;
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	80 93 00 00 	sts	0x0000, r24
  _u2x = u2x;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 93 00 00 	sts	0x0000, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
  9e:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000296  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000839  00000000  00000000  000002ca  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000004b7  00000000  00000000  00000b03  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  00000fba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9IPAddressC1Ehhhh 00000018  00000000  00000000  00000fd2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._GLOBAL__I__ZN9IPAddressC2Ev 0000001e  00000000  00000000  00000fea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .ctors        00000002  00000000  00000000  00001008  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 10 .text._ZNK9IPAddress7printToER5Print 00000084  00000000  00000000  0000100a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9IPAddresseqEPKh 0000001e  00000000  00000000  0000108e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9IPAddressaSEm 00000024  00000000  00000000  000010ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN9IPAddressaSEPKh 0000001a  00000000  00000000  000010d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZN9IPAddressC1EPKh 00000022  00000000  00000000  000010ea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN9IPAddressC2EPKh 00000022  00000000  00000000  0000110c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN9IPAddressC1Em 0000002c  00000000  00000000  0000112e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN9IPAddressC2Em 0000002c  00000000  00000000  0000115a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN9IPAddressC1Ev 00000014  00000000  00000000  00001186  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  0000119a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .rodata._ZTV9IPAddress 00000006  00000000  00000000  000011ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 21 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  000011b4  2**0
                  ALLOC
 22 .rodata._ZTV9Printable 00000006  00000000  00000000  000011b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 23 .debug_frame  000000e0  00000000  00000000  000011bc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 24 .debug_loc    000002d6  00000000  00000000  0000129c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 25 .debug_pubnames 0000013d  00000000  00000000  00001572  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 26 .debug_aranges 00000080  00000000  00000000  000016af  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 27 .debug_ranges 00000078  00000000  00000000  0000172f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 28 .debug_str    00000373  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

00000000 <_ZN9IPAddressC2Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
   c:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
   e:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
  10:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
  12:	05 83       	std	Z+5, r16	; 0x05
}
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Ehhhh:

00000000 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
   c:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
   e:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
  10:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
  12:	05 83       	std	Z+5, r16	; 0x05
}
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._GLOBAL__I__ZN9IPAddressC2Ev:

00000000 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	90 93 00 00 	sts	0x0000, r25
   8:	80 93 00 00 	sts	0x0000, r24
{
    _address[0] = first_octet;
   c:	10 92 00 00 	sts	0x0000, r1
    _address[1] = second_octet;
  10:	10 92 00 00 	sts	0x0000, r1
    _address[2] = third_octet;
  14:	10 92 00 00 	sts	0x0000, r1
    _address[3] = fourth_octet;
  18:	10 92 00 00 	sts	0x0000, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	08 95       	ret

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	4c 01       	movw	r8, r24
  1a:	6b 01       	movw	r12, r22
  1c:	7c 01       	movw	r14, r24
  1e:	aa 24       	eor	r10, r10
  20:	bb 24       	eor	r11, r11
  22:	c0 e0       	ldi	r28, 0x00	; 0
  24:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
  26:	c6 01       	movw	r24, r12
  28:	f7 01       	movw	r30, r14
  2a:	62 81       	ldd	r22, Z+2	; 0x02
  2c:	4a e0       	ldi	r20, 0x0A	; 10
  2e:	50 e0       	ldi	r21, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  34:	8c 01       	movw	r16, r24
        n += p.print('.');
  36:	c6 01       	movw	r24, r12
  38:	6e e2       	ldi	r22, 0x2E	; 46
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
  3e:	08 0f       	add	r16, r24
  40:	19 1f       	adc	r17, r25
        n += p.print('.');
  42:	a0 0e       	add	r10, r16
  44:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
  46:	21 96       	adiw	r28, 0x01	; 1
  48:	08 94       	sec
  4a:	e1 1c       	adc	r14, r1
  4c:	f1 1c       	adc	r15, r1
  4e:	c3 30       	cpi	r28, 0x03	; 3
  50:	d1 05       	cpc	r29, r1
  52:	01 f4       	brne	.+0      	; 0x54 <_ZNK9IPAddress7printToER5Print+0x54>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
  54:	c6 01       	movw	r24, r12
  56:	f4 01       	movw	r30, r8
  58:	65 81       	ldd	r22, Z+5	; 0x05
  5a:	4a e0       	ldi	r20, 0x0A	; 10
  5c:	50 e0       	ldi	r21, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  62:	95 01       	movw	r18, r10
  64:	28 0f       	add	r18, r24
  66:	39 1f       	adc	r19, r25
    return n;
}
  68:	c9 01       	movw	r24, r18
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	df 90       	pop	r13
  78:	cf 90       	pop	r12
  7a:	bf 90       	pop	r11
  7c:	af 90       	pop	r10
  7e:	9f 90       	pop	r9
  80:	8f 90       	pop	r8
  82:	08 95       	ret

Disassembly of section .text._ZN9IPAddresseqEPKh:

00000000 <_ZN9IPAddresseqEPKh>:
    return *this;
}

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
   0:	9c 01       	movw	r18, r24
   2:	2e 5f       	subi	r18, 0xFE	; 254
   4:	3f 4f       	sbci	r19, 0xFF	; 255
   6:	cb 01       	movw	r24, r22
   8:	b9 01       	movw	r22, r18
   a:	44 e0       	ldi	r20, 0x04	; 4
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresseqEPKh>
  12:	9c 01       	movw	r18, r24
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	23 2b       	or	r18, r19
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN9IPAddresseqEPKh+0x1a>
  1a:	81 e0       	ldi	r24, 0x01	; 1
}
  1c:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00000000 <_ZN9IPAddressaSEm>:
{
    memcpy(_address, address, sizeof(_address));
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t address)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressaSEm+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressaSEm+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
   e:	42 83       	std	Z+2, r20	; 0x02
  10:	53 83       	std	Z+3, r21	; 0x03
  12:	64 83       	std	Z+4, r22	; 0x04
  14:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	0f 90       	pop	r0
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
  22:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000000 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
}

IPAddress& IPAddress::operator=(const uint8_t *address)
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
{
    memcpy(_address, address, sizeof(_address));
   4:	80 81       	ld	r24, Z
   6:	91 81       	ldd	r25, Z+1	; 0x01
   8:	a2 81       	ldd	r26, Z+2	; 0x02
   a:	b3 81       	ldd	r27, Z+3	; 0x03
   c:	f9 01       	movw	r30, r18
   e:	82 83       	std	Z+2, r24	; 0x02
  10:	93 83       	std	Z+3, r25	; 0x03
  12:	a4 83       	std	Z+4, r26	; 0x04
  14:	b5 83       	std	Z+5, r27	; 0x05
    return *this;
}
  16:	c9 01       	movw	r24, r18
  18:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1EPKh:

00000000 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	d9 01       	movw	r26, r18
   a:	8d 93       	st	X+, r24
   c:	9c 93       	st	X, r25
{
    memcpy(_address, address, sizeof(_address));
   e:	80 81       	ld	r24, Z
  10:	91 81       	ldd	r25, Z+1	; 0x01
  12:	a2 81       	ldd	r26, Z+2	; 0x02
  14:	b3 81       	ldd	r27, Z+3	; 0x03
  16:	f9 01       	movw	r30, r18
  18:	82 83       	std	Z+2, r24	; 0x02
  1a:	93 83       	std	Z+3, r25	; 0x03
  1c:	a4 83       	std	Z+4, r26	; 0x04
  1e:	b5 83       	std	Z+5, r27	; 0x05
}
  20:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000000 <_ZN9IPAddressC2EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	d9 01       	movw	r26, r18
   a:	8d 93       	st	X+, r24
   c:	9c 93       	st	X, r25
{
    memcpy(_address, address, sizeof(_address));
   e:	80 81       	ld	r24, Z
  10:	91 81       	ldd	r25, Z+1	; 0x01
  12:	a2 81       	ldd	r26, Z+2	; 0x02
  14:	b3 81       	ldd	r27, Z+3	; 0x03
  16:	f9 01       	movw	r30, r18
  18:	82 83       	std	Z+2, r24	; 0x02
  1a:	93 83       	std	Z+3, r25	; 0x03
  1c:	a4 83       	std	Z+4, r26	; 0x04
  1e:	b5 83       	std	Z+5, r27	; 0x05
}
  20:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Em:

00000000 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC1Em+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC1Em+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	91 83       	std	Z+1, r25	; 0x01
  14:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
  16:	42 83       	std	Z+2, r20	; 0x02
  18:	53 83       	std	Z+3, r21	; 0x03
  1a:	64 83       	std	Z+4, r22	; 0x04
  1c:	75 83       	std	Z+5, r23	; 0x05
}
  1e:	0f 90       	pop	r0
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000000 <_ZN9IPAddressC2Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC2Em+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC2Em+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	91 83       	std	Z+1, r25	; 0x01
  14:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
  16:	42 83       	std	Z+2, r20	; 0x02
  18:	53 83       	std	Z+3, r21	; 0x03
  1a:	64 83       	std	Z+4, r22	; 0x04
  1c:	75 83       	std	Z+5, r23	; 0x05
}
  1e:	0f 90       	pop	r0
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Ev:

00000000 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
   a:	12 82       	std	Z+2, r1	; 0x02
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
  10:	15 82       	std	Z+5, r1	; 0x05
}
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000000 <_ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
   a:	12 82       	std	Z+2, r1	; 0x02
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
  10:	15 82       	std	Z+5, r1	; 0x05
}
  12:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000036  2**0
                  ALLOC
  3 .debug_abbrev 00000336  00000000  00000000  00000036  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001a8d  00000000  00000000  0000036c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000007ec  00000000  00000000  00001df9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZN5Print5writeEPKhj 00000054  00000000  00000000  000025e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN5Print5printEPK19__FlashStringHelper 00000046  00000000  00000000  00002639  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5printEc 00000010  00000000  00000000  0000267f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN5Print5printERK9Printable 00000016  00000000  00000000  0000268f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._ZN5Print7printlnEv 00000040  00000000  00000000  000026a5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000028  00000000  00000000  000026e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print7printlnEc 00000030  00000000  00000000  0000270d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN5Print7printlnERK9Printable 00000034  00000000  00000000  0000273d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN5Print5writeEPKc 00000028  00000000  00000000  00002771  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print11printNumberEmh 000000c8  00000000  00000000  00002799  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print5printEmi 0000001e  00000000  00000000  00002861  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print7printlnEmi 00000028  00000000  00000000  0000287f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print5printEji 00000022  00000000  00000000  000028a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print7printlnEji 0000003a  00000000  00000000  000028c9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print5printEhi 00000024  00000000  00000000  00002903  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print7printlnEhi 0000003c  00000000  00000000  00002927  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print5printEli 00000080  00000000  00000000  00002963  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print7printlnEli 00000028  00000000  00000000  000029e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print5printEii 00000026  00000000  00000000  00002a0b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print7printlnEii 0000003e  00000000  00000000  00002a31  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print5printEPKc 00000006  00000000  00000000  00002a6f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print10printFloatEdh 00000136  00000000  00000000  00002a75  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print5printEdi 00000006  00000000  00000000  00002bab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print7printlnEdi 00000026  00000000  00000000  00002bb1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print7printlnEPKc 00000026  00000000  00000000  00002bd7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN5Print5printERK6String 00000066  00000000  00000000  00002bfd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN5Print7printlnERK6String 00000028  00000000  00000000  00002c63  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .rodata._ZTV5Print 00000008  00000000  00000000  00002c8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 34 .debug_frame  000001c0  00000000  00000000  00002c94  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 35 .debug_loc    00000d88  00000000  00000000  00002e54  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 36 .debug_pubnames 00000200  00000000  00000000  00003bdc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 37 .debug_aranges 000000f0  00000000  00000000  00003ddc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 38 .debug_ranges 000000e8  00000000  00000000  00003ecc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 39 .debug_str    00000c16  00000000  00000000  00003fb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	6b 01       	movw	r12, r22
  14:	8a 01       	movw	r16, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN5Print5writeEPKhj+0x1c>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
  1c:	d6 01       	movw	r26, r12
  1e:	6d 91       	ld	r22, X+
  20:	6d 01       	movw	r12, r26
  22:	d7 01       	movw	r26, r14
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	01 90       	ld	r0, Z+
  2a:	f0 81       	ld	r31, Z
  2c:	e0 2d       	mov	r30, r0
  2e:	c7 01       	movw	r24, r14
  30:	09 95       	icall
  32:	c8 0f       	add	r28, r24
  34:	d9 1f       	adc	r29, r25
  36:	01 50       	subi	r16, 0x01	; 1
  38:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
  3a:	01 15       	cp	r16, r1
  3c:	11 05       	cpc	r17, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN5Print5writeEPKhj+0x40>
    n += write(*buffer++);
  }
  return n;
}
  40:	ce 01       	movw	r24, r28
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	df 90       	pop	r13
  50:	cf 90       	pop	r12
  52:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

00000000 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
{
  const prog_char *p = (const prog_char *)ifsh;
   e:	8b 01       	movw	r16, r22
  10:	c0 e0       	ldi	r28, 0x00	; 0
  12:	d0 e0       	ldi	r29, 0x00	; 0
  14:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
  16:	0f 5f       	subi	r16, 0xFF	; 255
  18:	1f 4f       	sbci	r17, 0xFF	; 255
  1a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
  1c:	66 23       	and	r22, r22
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN5Print5printEPK19__FlashStringHelper+0x20>
    n += write(c);
  20:	d7 01       	movw	r26, r14
  22:	ed 91       	ld	r30, X+
  24:	fc 91       	ld	r31, X
  26:	01 90       	ld	r0, Z+
  28:	f0 81       	ld	r31, Z
  2a:	e0 2d       	mov	r30, r0
  2c:	c7 01       	movw	r24, r14
  2e:	09 95       	icall
  30:	c8 0f       	add	r28, r24
  32:	d9 1f       	adc	r29, r25
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
  }
  return n;
}
  36:	ce 01       	movw	r24, r28
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	1f 91       	pop	r17
  3e:	0f 91       	pop	r16
  40:	ff 90       	pop	r15
  42:	ef 90       	pop	r14
  44:	08 95       	ret

Disassembly of section .text._ZN5Print5printEc:

00000000 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
   0:	dc 01       	movw	r26, r24
{
  return write(c);
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	01 90       	ld	r0, Z+
   8:	f0 81       	ld	r31, Z
   a:	e0 2d       	mov	r30, r0
   c:	09 95       	icall
}
   e:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK9Printable:

00000000 <_ZN5Print5printERK9Printable>:
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
   0:	9c 01       	movw	r18, r24
   2:	db 01       	movw	r26, r22
{
  return x.printTo(*this);
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	01 90       	ld	r0, Z+
   a:	f0 81       	ld	r31, Z
   c:	e0 2d       	mov	r30, r0
   e:	cb 01       	movw	r24, r22
  10:	b9 01       	movw	r22, r18
  12:	09 95       	icall
}
  14:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEv:

00000000 <_ZN5Print7printlnEv>:

size_t Print::println(void)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   a:	dc 01       	movw	r26, r24
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	6d e0       	ldi	r22, 0x0D	; 13
  18:	09 95       	icall
  1a:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
  1c:	d8 01       	movw	r26, r16
  1e:	ed 91       	ld	r30, X+
  20:	fc 91       	ld	r31, X
  22:	01 90       	ld	r0, Z+
  24:	f0 81       	ld	r31, Z
  26:	e0 2d       	mov	r30, r0
  28:	c8 01       	movw	r24, r16
  2a:	6a e0       	ldi	r22, 0x0A	; 10
  2c:	09 95       	icall
  2e:	9c 01       	movw	r18, r24
  30:	2e 0d       	add	r18, r14
  32:	3f 1d       	adc	r19, r15
  34:	c9 01       	movw	r24, r18
  36:	1f 91       	pop	r17
  38:	0f 91       	pop	r16
  3a:	ff 90       	pop	r15
  3c:	ef 90       	pop	r14
  3e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00000000 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

00000000 <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   a:	dc 01       	movw	r26, r24
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	09 95       	icall
  18:	8c 01       	movw	r16, r24
}

size_t Print::println(char c)
{
  size_t n = print(c);
  n += println();
  1a:	c7 01       	movw	r24, r14
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  20:	08 0f       	add	r16, r24
  22:	19 1f       	adc	r17, r25
  return n;
}
  24:	c8 01       	movw	r24, r16
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	ff 90       	pop	r15
  2c:	ef 90       	pop	r14
  2e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

00000000 <_ZN5Print7printlnERK9Printable>:
  size_t n = print(num, digits);
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
   a:	db 01       	movw	r26, r22
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	cb 01       	movw	r24, r22
  18:	b7 01       	movw	r22, r14
  1a:	09 95       	icall
  1c:	8c 01       	movw	r16, r24
}

size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  1e:	c7 01       	movw	r24, r14
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  24:	08 0f       	add	r16, r24
  26:	19 1f       	adc	r17, r25
  return n;
}
  28:	c8 01       	movw	r24, r16
  2a:	1f 91       	pop	r17
  2c:	0f 91       	pop	r16
  2e:	ff 90       	pop	r15
  30:	ef 90       	pop	r14
  32:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKc:

00000000 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	db 01       	movw	r26, r22
   6:	0d 90       	ld	r0, X+
   8:	00 20       	and	r0, r0
   a:	01 f4       	brne	.+0      	; 0xc <_ZN5Print5writeEPKc+0xc>
   c:	11 97       	sbiw	r26, 0x01	; 1
   e:	a6 1b       	sub	r26, r22
  10:	b7 0b       	sbc	r27, r23
  12:	ec 01       	movw	r28, r24
  14:	e8 81       	ld	r30, Y
  16:	f9 81       	ldd	r31, Y+1	; 0x01
  18:	02 80       	ldd	r0, Z+2	; 0x02
  1a:	f3 81       	ldd	r31, Z+3	; 0x03
  1c:	e0 2d       	mov	r30, r0
  1e:	ad 01       	movw	r20, r26
  20:	09 95       	icall
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

00000000 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	7f 92       	push	r7
   6:	8f 92       	push	r8
   8:	9f 92       	push	r9
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	a1 97       	sbiw	r28, 0x21	; 33
  24:	0f b6       	in	r0, 0x3f	; 63
  26:	f8 94       	cli
  28:	de bf       	out	0x3e, r29	; 62
  2a:	0f be       	out	0x3f, r0	; 63
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	2c 01       	movw	r4, r24
  30:	74 2e       	mov	r7, r20
  32:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
  34:	22 30       	cpi	r18, 0x02	; 2
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZN5Print11printNumberEmh+0x38>
  38:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
  3a:	19 a2       	std	Y+33, r1	; 0x21
  3c:	31 e2       	ldi	r19, 0x21	; 33
  3e:	c3 2e       	mov	r12, r19
  40:	d1 2c       	mov	r13, r1
  42:	cc 0e       	add	r12, r28
  44:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
  46:	82 2e       	mov	r8, r18
  48:	99 24       	eor	r9, r9
  4a:	aa 24       	eor	r10, r10
  4c:	bb 24       	eor	r11, r11
  4e:	67 2d       	mov	r22, r7
  50:	75 2f       	mov	r23, r21
  52:	a5 01       	movw	r20, r10
  54:	94 01       	movw	r18, r8
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  5a:	79 01       	movw	r14, r18
  5c:	8a 01       	movw	r16, r20
    char c = m - base * n;
  5e:	c8 01       	movw	r24, r16
  60:	b7 01       	movw	r22, r14
  62:	a5 01       	movw	r20, r10
  64:	94 01       	movw	r18, r8
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  6a:	47 2d       	mov	r20, r7
  6c:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  6e:	08 94       	sec
  70:	c1 08       	sbc	r12, r1
  72:	d1 08       	sbc	r13, r1
  74:	4a 30       	cpi	r20, 0x0A	; 10
  76:	04 f4       	brge	.+0      	; 0x78 <_ZN5Print11printNumberEmh+0x78>
  78:	40 5d       	subi	r20, 0xD0	; 208
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN5Print11printNumberEmh+0x7c>
  7c:	49 5c       	subi	r20, 0xC9	; 201
  7e:	f6 01       	movw	r30, r12
  80:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
  82:	e1 14       	cp	r14, r1
  84:	f1 04       	cpc	r15, r1
  86:	01 05       	cpc	r16, r1
  88:	11 05       	cpc	r17, r1
  8a:	01 f0       	breq	.+0      	; 0x8c <_ZN5Print11printNumberEmh+0x8c>
  8c:	7e 2c       	mov	r7, r14
  8e:	5f 2d       	mov	r21, r15
  90:	c8 01       	movw	r24, r16
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN5Print11printNumberEmh+0x94>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
  94:	c2 01       	movw	r24, r4
  96:	b6 01       	movw	r22, r12
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
}
  9c:	a1 96       	adiw	r28, 0x21	; 33
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	9f 90       	pop	r9
  be:	8f 90       	pop	r8
  c0:	7f 90       	pop	r7
  c2:	5f 90       	pop	r5
  c4:	4f 90       	pop	r4
  c6:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

00000000 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
   0:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
   2:	21 15       	cp	r18, r1
   4:	31 05       	cpc	r19, r1
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN5Print5printEmi+0x8>
   8:	ed 91       	ld	r30, X+
   a:	fc 91       	ld	r31, X
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	64 2f       	mov	r22, r20
  14:	09 95       	icall
  16:	08 95       	ret
  else return printNumber(n, base);
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEmi>
}
  1c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEmi:

00000000 <_ZN5Print7printlnEmi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

00000000 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
   a:	7b 01       	movw	r14, r22
   c:	00 e0       	ldi	r16, 0x00	; 0
   e:	10 e0       	ldi	r17, 0x00	; 0
  10:	b8 01       	movw	r22, r16
  12:	a7 01       	movw	r20, r14
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEji>
}
  18:	1f 91       	pop	r17
  1a:	0f 91       	pop	r16
  1c:	ff 90       	pop	r15
  1e:	ef 90       	pop	r14
  20:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEji:

00000000 <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	7b 01       	movw	r14, r22
  10:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
  12:	00 e0       	ldi	r16, 0x00	; 0
  14:	10 e0       	ldi	r17, 0x00	; 0
  16:	b8 01       	movw	r22, r16
  18:	a7 01       	movw	r20, r14
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  1e:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  20:	c6 01       	movw	r24, r12
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  26:	08 0f       	add	r16, r24
  28:	19 1f       	adc	r17, r25
  return n;
}
  2a:	c8 01       	movw	r24, r16
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	ff 90       	pop	r15
  32:	ef 90       	pop	r14
  34:	df 90       	pop	r13
  36:	cf 90       	pop	r12
  38:	08 95       	ret

Disassembly of section .text._ZN5Print5printEhi:

00000000 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
   a:	e6 2e       	mov	r14, r22
   c:	ff 24       	eor	r15, r15
   e:	00 e0       	ldi	r16, 0x00	; 0
  10:	10 e0       	ldi	r17, 0x00	; 0
  12:	b8 01       	movw	r22, r16
  14:	a7 01       	movw	r20, r14
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEhi>
}
  1a:	1f 91       	pop	r17
  1c:	0f 91       	pop	r16
  1e:	ff 90       	pop	r15
  20:	ef 90       	pop	r14
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEhi:

00000000 <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	e6 2e       	mov	r14, r22
  10:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
  12:	ff 24       	eor	r15, r15
  14:	00 e0       	ldi	r16, 0x00	; 0
  16:	10 e0       	ldi	r17, 0x00	; 0
  18:	b8 01       	movw	r22, r16
  1a:	a7 01       	movw	r20, r14
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  20:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  22:	c6 01       	movw	r24, r12
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  28:	08 0f       	add	r16, r24
  2a:	19 1f       	adc	r17, r25
  return n;
}
  2c:	c8 01       	movw	r24, r16
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	ff 90       	pop	r15
  34:	ef 90       	pop	r14
  36:	df 90       	pop	r13
  38:	cf 90       	pop	r12
  3a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

00000000 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
{
  if (base == 0) {
  16:	21 15       	cp	r18, r1
  18:	31 05       	cpc	r19, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN5Print5printEli+0x1c>
    return write(n);
  1c:	e8 81       	ld	r30, Y
  1e:	f9 81       	ldd	r31, Y+1	; 0x01
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	64 2f       	mov	r22, r20
  28:	09 95       	icall
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN5Print5printEli+0x2c>
  } else if (base == 10) {
  2c:	2a 30       	cpi	r18, 0x0A	; 10
  2e:	31 05       	cpc	r19, r1
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN5Print5printEli+0x32>
    if (n < 0) {
  32:	77 ff       	sbrs	r23, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEli+0x36>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
  36:	e8 81       	ld	r30, Y
  38:	f9 81       	ldd	r31, Y+1	; 0x01
  3a:	01 90       	ld	r0, Z+
  3c:	f0 81       	ld	r31, Z
  3e:	e0 2d       	mov	r30, r0
  40:	6d e2       	ldi	r22, 0x2D	; 45
  42:	09 95       	icall
  44:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
  46:	44 27       	eor	r20, r20
  48:	55 27       	eor	r21, r21
  4a:	ba 01       	movw	r22, r20
  4c:	4c 19       	sub	r20, r12
  4e:	5d 09       	sbc	r21, r13
  50:	6e 09       	sbc	r22, r14
  52:	7f 09       	sbc	r23, r15
  54:	ce 01       	movw	r24, r28
  56:	2a e0       	ldi	r18, 0x0A	; 10
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  5c:	98 01       	movw	r18, r16
  5e:	28 0f       	add	r18, r24
  60:	39 1f       	adc	r19, r25
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN5Print5printEli+0x64>
    }
    return printNumber(n, 10);
  64:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  6a:	9c 01       	movw	r18, r24
  }
}
  6c:	c9 01       	movw	r24, r18
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

00000000 <_ZN5Print7printlnEli>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Disassembly of section .text._ZN5Print5printEii:

00000000 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
   c:	00 27       	eor	r16, r16
   e:	f7 fc       	sbrc	r15, 7
  10:	00 95       	com	r16
  12:	10 2f       	mov	r17, r16
  14:	b8 01       	movw	r22, r16
  16:	a7 01       	movw	r20, r14
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEii>
}
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEii:

00000000 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	7b 01       	movw	r14, r22
  10:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
  12:	00 27       	eor	r16, r16
  14:	f7 fc       	sbrc	r15, 7
  16:	00 95       	com	r16
  18:	10 2f       	mov	r17, r16
  1a:	b8 01       	movw	r22, r16
  1c:	a7 01       	movw	r20, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  22:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  24:	c6 01       	movw	r24, r12
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  2a:	08 0f       	add	r16, r24
  2c:	19 1f       	adc	r17, r25
  return n;
}
  2e:	c8 01       	movw	r24, r16
  30:	1f 91       	pop	r17
  32:	0f 91       	pop	r16
  34:	ff 90       	pop	r15
  36:	ef 90       	pop	r14
  38:	df 90       	pop	r13
  3a:	cf 90       	pop	r12
  3c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPKc:

00000000 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEPKc>
}
   4:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

00000000 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	4c 01       	movw	r8, r24
  1c:	7a 01       	movw	r14, r20
  1e:	8b 01       	movw	r16, r22
  20:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
  22:	cb 01       	movw	r24, r22
  24:	ba 01       	movw	r22, r20
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	40 e0       	ldi	r20, 0x00	; 0
  2c:	50 e0       	ldi	r21, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  32:	87 fd       	sbrc	r24, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print10printFloatEdh+0x36>
  36:	c0 e0       	ldi	r28, 0x00	; 0
  38:	d0 e0       	ldi	r29, 0x00	; 0
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN5Print10printFloatEdh+0x3c>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
  3c:	d4 01       	movw	r26, r8
  3e:	ed 91       	ld	r30, X+
  40:	fc 91       	ld	r31, X
  42:	01 90       	ld	r0, Z+
  44:	f0 81       	ld	r31, Z
  46:	e0 2d       	mov	r30, r0
  48:	c4 01       	movw	r24, r8
  4a:	6d e2       	ldi	r22, 0x2D	; 45
  4c:	09 95       	icall
  4e:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
  50:	17 fb       	bst	r17, 7
  52:	10 95       	com	r17
  54:	17 f9       	bld	r17, 7
  56:	10 95       	com	r17
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	5f e3       	ldi	r21, 0x3F	; 63
  60:	aa 24       	eor	r10, r10
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN5Print10printFloatEdh+0x64>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  64:	ca 01       	movw	r24, r20
  66:	b9 01       	movw	r22, r18
  68:	20 e0       	ldi	r18, 0x00	; 0
  6a:	30 e0       	ldi	r19, 0x00	; 0
  6c:	40 e2       	ldi	r20, 0x20	; 32
  6e:	51 e4       	ldi	r21, 0x41	; 65
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  74:	9b 01       	movw	r18, r22
  76:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
  78:	a3 94       	inc	r10
  7a:	a7 14       	cp	r10, r7
  7c:	00 f0       	brcs	.+0      	; 0x7e <_ZN5Print10printFloatEdh+0x7e>
    rounding /= 10.0;
  
  number += rounding;
  7e:	c8 01       	movw	r24, r16
  80:	b7 01       	movw	r22, r14
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  86:	5b 01       	movw	r10, r22
  88:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  8e:	7b 01       	movw	r14, r22
  90:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
  92:	c4 01       	movw	r24, r8
  94:	b8 01       	movw	r22, r16
  96:	a7 01       	movw	r20, r14
  98:	2a e0       	ldi	r18, 0x0A	; 10
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  a0:	c8 0f       	add	r28, r24
  a2:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
  a4:	77 20       	and	r7, r7
  a6:	01 f0       	breq	.+0      	; 0xa8 <_ZN5Print10printFloatEdh+0xa8>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
  a8:	c4 01       	movw	r24, r8
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
  b2:	c8 0f       	add	r28, r24
  b4:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  b6:	c8 01       	movw	r24, r16
  b8:	b7 01       	movw	r22, r14
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  be:	9b 01       	movw	r18, r22
  c0:	ac 01       	movw	r20, r24
  c2:	c6 01       	movw	r24, r12
  c4:	b5 01       	movw	r22, r10
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN5Print10printFloatEdh+0xcc>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	40 e2       	ldi	r20, 0x20	; 32
  d2:	51 e4       	ldi	r21, 0x41	; 65
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  d8:	7b 01       	movw	r14, r22
  da:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  e0:	5b 01       	movw	r10, r22
  e2:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
  e4:	cc 24       	eor	r12, r12
  e6:	b7 fc       	sbrc	r11, 7
  e8:	c0 94       	com	r12
  ea:	dc 2c       	mov	r13, r12
  ec:	c4 01       	movw	r24, r8
  ee:	b6 01       	movw	r22, r12
  f0:	a5 01       	movw	r20, r10
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
  fa:	c8 0f       	add	r28, r24
  fc:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
  fe:	c6 01       	movw	r24, r12
 100:	b5 01       	movw	r22, r10
 102:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 106:	9b 01       	movw	r18, r22
 108:	ac 01       	movw	r20, r24
 10a:	c8 01       	movw	r24, r16
 10c:	b7 01       	movw	r22, r14
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 112:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 114:	77 20       	and	r7, r7
 116:	01 f4       	brne	.+0      	; 0x118 <_ZN5Print10printFloatEdh+0x118>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
 118:	ce 01       	movw	r24, r28
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	df 90       	pop	r13
 128:	cf 90       	pop	r12
 12a:	bf 90       	pop	r11
 12c:	af 90       	pop	r10
 12e:	9f 90       	pop	r9
 130:	8f 90       	pop	r8
 132:	7f 90       	pop	r7
 134:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

00000000 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEdi>
}
   4:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEdi:

00000000 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

00000000 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

00000000 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	6b 01       	movw	r12, r22
  18:	ee 24       	eor	r14, r14
  1a:	ff 24       	eor	r15, r15
  1c:	c0 e0       	ldi	r28, 0x00	; 0
  1e:	d0 e0       	ldi	r29, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN5Print5printERK6String+0x22>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
  22:	d5 01       	movw	r26, r10
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	00 81       	ld	r16, Z
  2a:	11 81       	ldd	r17, Z+1	; 0x01
  2c:	c6 01       	movw	r24, r12
  2e:	be 01       	movw	r22, r28
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printERK6String>
  34:	68 2f       	mov	r22, r24
  36:	c5 01       	movw	r24, r10
  38:	f8 01       	movw	r30, r16
  3a:	09 95       	icall
  3c:	e8 0e       	add	r14, r24
  3e:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
  40:	21 96       	adiw	r28, 0x01	; 1
  42:	f6 01       	movw	r30, r12
  44:	84 81       	ldd	r24, Z+4	; 0x04
  46:	95 81       	ldd	r25, Z+5	; 0x05
  48:	c8 17       	cp	r28, r24
  4a:	d9 07       	cpc	r29, r25
  4c:	00 f0       	brcs	.+0      	; 0x4e <_ZN5Print5printERK6String+0x4e>
    n += write(s[i]);
  }
  return n;
}
  4e:	c7 01       	movw	r24, r14
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	df 90       	pop	r13
  5e:	cf 90       	pop	r12
  60:	bf 90       	pop	r11
  62:	af 90       	pop	r10
  64:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00000000 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000001ce  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000860  00000000  00000000  00000202  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000005b3  00000000  00000000  00000a62  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  00001015  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text._ZN6Stream9timedPeekEv 00000058  00000000  00000000  00001021  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream13peekNextDigitEv 00000036  00000000  00000000  00001079  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6Stream10parseFloatEc 00000142  00000000  00000000  000010af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream10parseFloatEv 00000008  00000000  00000000  000011f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream8parseIntEc 000000e0  00000000  00000000  000011f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream8parseIntEv 00000008  00000000  00000000  000012d9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6Stream9timedReadEv 00000058  00000000  00000000  000012e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream14readBytesUntilEcPcj 0000006a  00000000  00000000  00001339  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream9readBytesEPcj 00000048  00000000  00000000  000013a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream9findUntilEPcjS0_j 000000b4  00000000  00000000  000013eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9findUntilEPcS0_ 00000032  00000000  00000000  0000149f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream4findEPc 0000000a  00000000  00000000  000014d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6Stream4findEPcj 00000016  00000000  00000000  000014db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .debug_frame  000000f0  00000000  00000000  000014f4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 21 .debug_loc    000007b0  00000000  00000000  000015e4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 22 .debug_pubnames 00000146  00000000  00000000  00001d94  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 23 .debug_aranges 00000088  00000000  00000000  00001eda  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 24 .debug_ranges 00000080  00000000  00000000  00001f62  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 25 .debug_str    000003f9  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000000 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   0:	fc 01       	movw	r30, r24
   2:	44 83       	std	Z+4, r20	; 0x04
   4:	55 83       	std	Z+5, r21	; 0x05
   6:	66 83       	std	Z+6, r22	; 0x06
   8:	77 83       	std	Z+7, r23	; 0x07
}
   a:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

00000000 <_ZN6Stream9timedPeekEv>:
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  int c;
  _startMillis = millis();
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
   a:	68 87       	std	Y+8, r22	; 0x08
   c:	79 87       	std	Y+9, r23	; 0x09
   e:	8a 87       	std	Y+10, r24	; 0x0a
  10:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = peek();
  12:	e8 81       	ld	r30, Y
  14:	f9 81       	ldd	r31, Y+1	; 0x01
  16:	00 84       	ldd	r0, Z+8	; 0x08
  18:	f1 85       	ldd	r31, Z+9	; 0x09
  1a:	e0 2d       	mov	r30, r0
  1c:	ce 01       	movw	r24, r28
  1e:	09 95       	icall
  20:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
  22:	97 ff       	sbrs	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9timedPeekEv+0x26>
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
  2a:	28 85       	ldd	r18, Y+8	; 0x08
  2c:	39 85       	ldd	r19, Y+9	; 0x09
  2e:	4a 85       	ldd	r20, Y+10	; 0x0a
  30:	5b 85       	ldd	r21, Y+11	; 0x0b
  32:	62 1b       	sub	r22, r18
  34:	73 0b       	sbc	r23, r19
  36:	84 0b       	sbc	r24, r20
  38:	95 0b       	sbc	r25, r21
  3a:	2c 81       	ldd	r18, Y+4	; 0x04
  3c:	3d 81       	ldd	r19, Y+5	; 0x05
  3e:	4e 81       	ldd	r20, Y+6	; 0x06
  40:	5f 81       	ldd	r21, Y+7	; 0x07
  42:	62 17       	cp	r22, r18
  44:	73 07       	cpc	r23, r19
  46:	84 07       	cpc	r24, r20
  48:	95 07       	cpc	r25, r21
  4a:	00 f0       	brcs	.+0      	; 0x4c <_ZN6Stream9timedPeekEv+0x4c>
  4c:	2f ef       	ldi	r18, 0xFF	; 255
  4e:	3f ef       	ldi	r19, 0xFF	; 255
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
  50:	c9 01       	movw	r24, r18
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000000 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  int c;
  while (1) {
    c = timedPeek();
   6:	ce 01       	movw	r24, r28
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream13peekNextDigitEv>
   c:	9c 01       	movw	r18, r24
    if (c < 0) return c;  // timeout
   e:	97 fd       	sbrc	r25, 7
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN6Stream13peekNextDigitEv+0x12>
    if (c == '-') return c;
  12:	8d 32       	cpi	r24, 0x2D	; 45
  14:	91 05       	cpc	r25, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6Stream13peekNextDigitEv+0x18>
    if (c >= '0' && c <= '9') return c;
  18:	c0 97       	sbiw	r24, 0x30	; 48
  1a:	0a 97       	sbiw	r24, 0x0a	; 10
  1c:	00 f0       	brcs	.+0      	; 0x1e <_ZN6Stream13peekNextDigitEv+0x1e>
    read();  // discard non-numeric
  1e:	e8 81       	ld	r30, Y
  20:	f9 81       	ldd	r31, Y+1	; 0x01
  22:	06 80       	ldd	r0, Z+6	; 0x06
  24:	f7 81       	ldd	r31, Z+7	; 0x07
  26:	e0 2d       	mov	r30, r0
  28:	ce 01       	movw	r24, r28
  2a:	09 95       	icall
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6Stream13peekNextDigitEv+0x2e>
  }
}
  2e:	c9 01       	movw	r24, r18
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEc:

00000000 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	ec 01       	movw	r28, r24
  1e:	66 2e       	mov	r6, r22
  boolean isFraction = false;
  long value = 0;
  char c;
  float fraction = 1.0;

  c = peekNextDigit();
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  24:	d8 2e       	mov	r13, r24
    // ignore non numeric leading characters
  if(c < 0)
  26:	87 ff       	sbrs	r24, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream10parseFloatEc+0x2a>
  2a:	60 e0       	ldi	r22, 0x00	; 0
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream10parseFloatEc+0x34>
  34:	77 24       	eor	r7, r7
  36:	cc 24       	eor	r12, r12
  38:	ee 24       	eor	r14, r14
  3a:	ff 24       	eor	r15, r15
  3c:	87 01       	movw	r16, r14
  3e:	0f 2e       	mov	r0, r31
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	8f 2e       	mov	r8, r31
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	9f 2e       	mov	r9, r31
  48:	f0 e8       	ldi	r31, 0x80	; 128
  4a:	af 2e       	mov	r10, r31
  4c:	ff e3       	ldi	r31, 0x3F	; 63
  4e:	bf 2e       	mov	r11, r31
  50:	f0 2d       	mov	r31, r0
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
  52:	d6 14       	cp	r13, r6
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN6Stream10parseFloatEc+0x56>
      ; // ignore
    else if(c == '-')
  56:	8d e2       	ldi	r24, 0x2D	; 45
  58:	d8 16       	cp	r13, r24
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6Stream10parseFloatEc+0x5c>
  5c:	77 24       	eor	r7, r7
  5e:	73 94       	inc	r7
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN6Stream10parseFloatEc+0x62>
      isNegative = true;
    else if (c == '.')
  62:	9e e2       	ldi	r25, 0x2E	; 46
  64:	d9 16       	cp	r13, r25
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN6Stream10parseFloatEc+0x68>
  68:	cc 24       	eor	r12, r12
  6a:	c3 94       	inc	r12
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6Stream10parseFloatEc+0x6e>
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
  6e:	8d 2d       	mov	r24, r13
  70:	80 53       	subi	r24, 0x30	; 48
  72:	8a 30       	cpi	r24, 0x0A	; 10
  74:	00 f4       	brcc	.+0      	; 0x76 <_ZN6Stream10parseFloatEc+0x76>
      value = value * 10 + c - '0';
  76:	c8 01       	movw	r24, r16
  78:	b7 01       	movw	r22, r14
  7a:	2a e0       	ldi	r18, 0x0A	; 10
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  86:	7b 01       	movw	r14, r22
  88:	8c 01       	movw	r16, r24
  8a:	8d 2d       	mov	r24, r13
  8c:	99 27       	eor	r25, r25
  8e:	87 fd       	sbrc	r24, 7
  90:	90 95       	com	r25
  92:	a9 2f       	mov	r26, r25
  94:	b9 2f       	mov	r27, r25
  96:	e8 0e       	add	r14, r24
  98:	f9 1e       	adc	r15, r25
  9a:	0a 1f       	adc	r16, r26
  9c:	1b 1f       	adc	r17, r27
  9e:	80 ed       	ldi	r24, 0xD0	; 208
  a0:	9f ef       	ldi	r25, 0xFF	; 255
  a2:	af ef       	ldi	r26, 0xFF	; 255
  a4:	bf ef       	ldi	r27, 0xFF	; 255
  a6:	e8 0e       	add	r14, r24
  a8:	f9 1e       	adc	r15, r25
  aa:	0a 1f       	adc	r16, r26
  ac:	1b 1f       	adc	r17, r27
      if(isFraction)
  ae:	cc 20       	and	r12, r12
  b0:	01 f0       	breq	.+0      	; 0xb2 <_ZN6Stream10parseFloatEc+0xb2>
         fraction *= 0.1;
  b2:	c5 01       	movw	r24, r10
  b4:	b4 01       	movw	r22, r8
  b6:	2d ec       	ldi	r18, 0xCD	; 205
  b8:	3c ec       	ldi	r19, 0xCC	; 204
  ba:	4c ec       	ldi	r20, 0xCC	; 204
  bc:	5d e3       	ldi	r21, 0x3D	; 61
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  c2:	4b 01       	movw	r8, r22
  c4:	5c 01       	movw	r10, r24
    }
    read();  // consume the character we got with peek
  c6:	e8 81       	ld	r30, Y
  c8:	f9 81       	ldd	r31, Y+1	; 0x01
  ca:	06 80       	ldd	r0, Z+6	; 0x06
  cc:	f7 81       	ldd	r31, Z+7	; 0x07
  ce:	e0 2d       	mov	r30, r0
  d0:	ce 01       	movw	r24, r28
  d2:	09 95       	icall
    c = timedPeek();
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  da:	98 2f       	mov	r25, r24
  dc:	d8 2e       	mov	r13, r24
  c = peekNextDigit();
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
  de:	80 53       	subi	r24, 0x30	; 48
  e0:	8a 30       	cpi	r24, 0x0A	; 10
  e2:	00 f4       	brcc	.+0      	; 0xe4 <_ZN6Stream10parseFloatEc+0xe4>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN6Stream10parseFloatEc+0xe6>
  e6:	9e 32       	cpi	r25, 0x2E	; 46
  e8:	01 f4       	brne	.+0      	; 0xea <_ZN6Stream10parseFloatEc+0xea>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN6Stream10parseFloatEc+0xec>
  ec:	96 15       	cp	r25, r6
  ee:	01 f4       	brne	.+0      	; 0xf0 <_ZN6Stream10parseFloatEc+0xf0>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN6Stream10parseFloatEc+0xf2>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );

  if(isNegative)
  f2:	77 20       	and	r7, r7
  f4:	01 f0       	breq	.+0      	; 0xf6 <_ZN6Stream10parseFloatEc+0xf6>
    value = -value;
  f6:	10 95       	com	r17
  f8:	00 95       	com	r16
  fa:	f0 94       	com	r15
  fc:	e0 94       	com	r14
  fe:	e1 1c       	adc	r14, r1
 100:	f1 1c       	adc	r15, r1
 102:	01 1d       	adc	r16, r1
 104:	11 1d       	adc	r17, r1
  if(isFraction)
 106:	cc 20       	and	r12, r12
 108:	01 f0       	breq	.+0      	; 0x10a <_ZN6Stream10parseFloatEc+0x10a>
    return value * fraction;
 10a:	c8 01       	movw	r24, r16
 10c:	b7 01       	movw	r22, r14
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 112:	a5 01       	movw	r20, r10
 114:	94 01       	movw	r18, r8
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_ZN6Stream10parseFloatEc+0x11c>
  else
    return value;
 11c:	c8 01       	movw	r24, r16
 11e:	b7 01       	movw	r22, r14
 120:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	df 90       	pop	r13
 132:	cf 90       	pop	r12
 134:	bf 90       	pop	r11
 136:	af 90       	pop	r10
 138:	9f 90       	pop	r9
 13a:	8f 90       	pop	r8
 13c:	7f 90       	pop	r7
 13e:	6f 90       	pop	r6
 140:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEv:

00000000 <_ZN6Stream10parseFloatEv>:


// as parseInt but returns a floating point value
float Stream::parseFloat()
{
  return parseFloat(NO_SKIP_CHAR);
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEv>
}
   6:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEc:

00000000 <_ZN6Stream8parseIntEc>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	6c 01       	movw	r12, r24
  18:	b6 2e       	mov	r11, r22
{
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  1e:	ec 01       	movw	r28, r24
  // ignore non numeric leading characters
  if(c < 0)
  20:	97 ff       	sbrs	r25, 7
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6Stream8parseIntEc+0x24>
  24:	ee 24       	eor	r14, r14
  26:	ff 24       	eor	r15, r15
  28:	87 01       	movw	r16, r14
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN6Stream8parseIntEc+0x2c>
  2c:	99 24       	eor	r9, r9
  2e:	ee 24       	eor	r14, r14
  30:	ff 24       	eor	r15, r15
  32:	87 01       	movw	r16, r14
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
  34:	ab 2c       	mov	r10, r11
  36:	bb 24       	eor	r11, r11
  38:	a7 fc       	sbrc	r10, 7
  3a:	b0 94       	com	r11
  3c:	ca 15       	cp	r28, r10
  3e:	db 05       	cpc	r29, r11
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN6Stream8parseIntEc+0x42>
      ; // ignore this charactor
    else if(c == '-')
  42:	cd 32       	cpi	r28, 0x2D	; 45
  44:	d1 05       	cpc	r29, r1
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6Stream8parseIntEc+0x48>
  48:	99 24       	eor	r9, r9
  4a:	93 94       	inc	r9
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6Stream8parseIntEc+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
  4e:	ce 01       	movw	r24, r28
  50:	c0 97       	sbiw	r24, 0x30	; 48
  52:	0a 97       	sbiw	r24, 0x0a	; 10
  54:	00 f4       	brcc	.+0      	; 0x56 <_ZN6Stream8parseIntEc+0x56>
      value = value * 10 + c - '0';
  56:	c8 01       	movw	r24, r16
  58:	b7 01       	movw	r22, r14
  5a:	2a e0       	ldi	r18, 0x0A	; 10
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	50 e0       	ldi	r21, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  66:	7b 01       	movw	r14, r22
  68:	8c 01       	movw	r16, r24
  6a:	ce 01       	movw	r24, r28
  6c:	aa 27       	eor	r26, r26
  6e:	97 fd       	sbrc	r25, 7
  70:	a0 95       	com	r26
  72:	ba 2f       	mov	r27, r26
  74:	e8 0e       	add	r14, r24
  76:	f9 1e       	adc	r15, r25
  78:	0a 1f       	adc	r16, r26
  7a:	1b 1f       	adc	r17, r27
  7c:	80 ed       	ldi	r24, 0xD0	; 208
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	af ef       	ldi	r26, 0xFF	; 255
  82:	bf ef       	ldi	r27, 0xFF	; 255
  84:	e8 0e       	add	r14, r24
  86:	f9 1e       	adc	r15, r25
  88:	0a 1f       	adc	r16, r26
  8a:	1b 1f       	adc	r17, r27
    read();  // consume the character we got with peek
  8c:	d6 01       	movw	r26, r12
  8e:	ed 91       	ld	r30, X+
  90:	fc 91       	ld	r31, X
  92:	06 80       	ldd	r0, Z+6	; 0x06
  94:	f7 81       	ldd	r31, Z+7	; 0x07
  96:	e0 2d       	mov	r30, r0
  98:	c6 01       	movw	r24, r12
  9a:	09 95       	icall
    c = timedPeek();
  9c:	c6 01       	movw	r24, r12
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  a2:	ec 01       	movw	r28, r24
  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
  a4:	c0 97       	sbiw	r24, 0x30	; 48
  a6:	0a 97       	sbiw	r24, 0x0a	; 10
  a8:	00 f0       	brcs	.+0      	; 0xaa <_ZN6Stream8parseIntEc+0xaa>
  aa:	ca 15       	cp	r28, r10
  ac:	db 05       	cpc	r29, r11
  ae:	01 f0       	breq	.+0      	; 0xb0 <_ZN6Stream8parseIntEc+0xb0>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
  b0:	99 20       	and	r9, r9
  b2:	01 f0       	breq	.+0      	; 0xb4 <_ZN6Stream8parseIntEc+0xb4>
    value = -value;
  b4:	10 95       	com	r17
  b6:	00 95       	com	r16
  b8:	f0 94       	com	r15
  ba:	e0 94       	com	r14
  bc:	e1 1c       	adc	r14, r1
  be:	f1 1c       	adc	r15, r1
  c0:	01 1d       	adc	r16, r1
  c2:	11 1d       	adc	r17, r1
  return value;
}
  c4:	b7 01       	movw	r22, r14
  c6:	c8 01       	movw	r24, r16
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	df 90       	pop	r13
  d6:	cf 90       	pop	r12
  d8:	bf 90       	pop	r11
  da:	af 90       	pop	r10
  dc:	9f 90       	pop	r9
  de:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEv:

00000000 <_ZN6Stream8parseIntEv>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEv>
}
   6:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  int c;
  _startMillis = millis();
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   a:	68 87       	std	Y+8, r22	; 0x08
   c:	79 87       	std	Y+9, r23	; 0x09
   e:	8a 87       	std	Y+10, r24	; 0x0a
  10:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
  12:	e8 81       	ld	r30, Y
  14:	f9 81       	ldd	r31, Y+1	; 0x01
  16:	06 80       	ldd	r0, Z+6	; 0x06
  18:	f7 81       	ldd	r31, Z+7	; 0x07
  1a:	e0 2d       	mov	r30, r0
  1c:	ce 01       	movw	r24, r28
  1e:	09 95       	icall
  20:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
  22:	97 ff       	sbrs	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9timedReadEv+0x26>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  2a:	28 85       	ldd	r18, Y+8	; 0x08
  2c:	39 85       	ldd	r19, Y+9	; 0x09
  2e:	4a 85       	ldd	r20, Y+10	; 0x0a
  30:	5b 85       	ldd	r21, Y+11	; 0x0b
  32:	62 1b       	sub	r22, r18
  34:	73 0b       	sbc	r23, r19
  36:	84 0b       	sbc	r24, r20
  38:	95 0b       	sbc	r25, r21
  3a:	2c 81       	ldd	r18, Y+4	; 0x04
  3c:	3d 81       	ldd	r19, Y+5	; 0x05
  3e:	4e 81       	ldd	r20, Y+6	; 0x06
  40:	5f 81       	ldd	r21, Y+7	; 0x07
  42:	62 17       	cp	r22, r18
  44:	73 07       	cpc	r23, r19
  46:	84 07       	cpc	r24, r20
  48:	95 07       	cpc	r25, r21
  4a:	00 f0       	brcs	.+0      	; 0x4c <_ZN6Stream9timedReadEv+0x4c>
  4c:	2f ef       	ldi	r18, 0xFF	; 255
  4e:	3f ef       	ldi	r19, 0xFF	; 255
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
  50:	c9 01       	movw	r24, r18
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

00000000 <_ZN6Stream14readBytesUntilEcPcj>:

// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	7a 01       	movw	r14, r20
  18:	89 01       	movw	r16, r18
{
  if (length < 1) return 0;
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream14readBytesUntilEcPcj+0x20>
  20:	c0 e0       	ldi	r28, 0x00	; 0
  22:	d0 e0       	ldi	r29, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream14readBytesUntilEcPcj+0x26>
  26:	c0 e0       	ldi	r28, 0x00	; 0
  28:	d0 e0       	ldi	r29, 0x00	; 0
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  2a:	c6 2e       	mov	r12, r22
  2c:	dd 24       	eor	r13, r13
  2e:	c7 fc       	sbrc	r12, 7
  30:	d0 94       	com	r13
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream14readBytesUntilEcPcj+0x34>
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  34:	c5 01       	movw	r24, r10
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream14readBytesUntilEcPcj>
    if (c < 0 || c == terminator) break;
  3a:	97 fd       	sbrc	r25, 7
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN6Stream14readBytesUntilEcPcj+0x3e>
  3e:	8c 15       	cp	r24, r12
  40:	9d 05       	cpc	r25, r13
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN6Stream14readBytesUntilEcPcj+0x44>
    *buffer++ = (char)c;
  44:	f7 01       	movw	r30, r14
  46:	81 93       	st	Z+, r24
  48:	7f 01       	movw	r14, r30
    index++;
  4a:	21 96       	adiw	r28, 0x01	; 1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  4c:	c0 17       	cp	r28, r16
  4e:	d1 07       	cpc	r29, r17
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZN6Stream14readBytesUntilEcPcj+0x52>
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
  52:	ce 01       	movw	r24, r28
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	df 90       	pop	r13
  62:	cf 90       	pop	r12
  64:	bf 90       	pop	r11
  66:	af 90       	pop	r10
  68:	08 95       	ret

Disassembly of section .text._ZN6Stream9readBytesEPcj:

00000000 <_ZN6Stream9readBytesEPcj>:
// read characters from stream into buffer
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
  12:	8b 01       	movw	r16, r22
  14:	7a 01       	movw	r14, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6Stream9readBytesEPcj+0x1c>
{
  size_t count = 0;
  while (count < length) {
    int c = timedRead();
  1c:	c6 01       	movw	r24, r12
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9readBytesEPcj>
    if (c < 0) break;
  22:	97 fd       	sbrc	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9readBytesEPcj+0x26>
    *buffer++ = (char)c;
  26:	f8 01       	movw	r30, r16
  28:	81 93       	st	Z+, r24
  2a:	8f 01       	movw	r16, r30
    count++;
  2c:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
  2e:	ce 15       	cp	r28, r14
  30:	df 05       	cpc	r29, r15
  32:	00 f0       	brcs	.+0      	; 0x34 <_ZN6Stream9readBytesEPcj+0x34>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
  34:	ce 01       	movw	r24, r28
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	ff 90       	pop	r15
  40:	ef 90       	pop	r14
  42:	df 90       	pop	r13
  44:	cf 90       	pop	r12
  46:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

00000000 <_ZN6Stream9findUntilEPcjS0_j>:
}

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	3c 01       	movw	r6, r24
  1e:	6b 01       	movw	r12, r22
  20:	4a 01       	movw	r8, r20
  22:	59 01       	movw	r10, r18
  24:	78 01       	movw	r14, r16
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
  26:	fb 01       	movw	r30, r22
  28:	80 81       	ld	r24, Z
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6Stream9findUntilEPcjS0_j+0x2e>
  2e:	00 e0       	ldi	r16, 0x00	; 0
  30:	10 e0       	ldi	r17, 0x00	; 0
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream9findUntilEPcjS0_j+0x34>
     return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    if( c == target[index]){
  34:	f6 01       	movw	r30, r12
  36:	e0 0f       	add	r30, r16
  38:	f1 1f       	adc	r31, r17
  3a:	80 81       	ld	r24, Z
  3c:	99 27       	eor	r25, r25
  3e:	87 fd       	sbrc	r24, 7
  40:	90 95       	com	r25
  42:	28 17       	cp	r18, r24
  44:	39 07       	cpc	r19, r25
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN6Stream9findUntilEPcjS0_j+0x48>
  48:	00 e0       	ldi	r16, 0x00	; 0
  4a:	10 e0       	ldi	r17, 0x00	; 0
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6Stream9findUntilEPcjS0_j+0x4e>
    //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
  4e:	0f 5f       	subi	r16, 0xFF	; 255
  50:	1f 4f       	sbci	r17, 0xFF	; 255
  52:	08 15       	cp	r16, r8
  54:	19 05       	cpc	r17, r9
  56:	00 f4       	brcc	.+0      	; 0x58 <_ZN6Stream9findUntilEPcjS0_j+0x58>
      }
    }
    else{
      index = 0;  // reset index if any char does not match
    }
    if(termLen > 0 && c == terminator[termIndex]){
  58:	e1 14       	cp	r14, r1
  5a:	f1 04       	cpc	r15, r1
  5c:	01 f0       	breq	.+0      	; 0x5e <_ZN6Stream9findUntilEPcjS0_j+0x5e>
  5e:	f5 01       	movw	r30, r10
  60:	ec 0f       	add	r30, r28
  62:	fd 1f       	adc	r31, r29
  64:	80 81       	ld	r24, Z
  66:	99 27       	eor	r25, r25
  68:	87 fd       	sbrc	r24, 7
  6a:	90 95       	com	r25
  6c:	28 17       	cp	r18, r24
  6e:	39 07       	cpc	r19, r25
  70:	01 f4       	brne	.+0      	; 0x72 <_ZN6Stream9findUntilEPcjS0_j+0x72>
       if(++termIndex >= termLen)
  72:	21 96       	adiw	r28, 0x01	; 1
  74:	ce 15       	cp	r28, r14
  76:	df 05       	cpc	r29, r15
  78:	00 f0       	brcs	.+0      	; 0x7a <_ZN6Stream9findUntilEPcjS0_j+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN6Stream9findUntilEPcjS0_j+0x7c>
  7c:	c0 e0       	ldi	r28, 0x00	; 0
  7e:	d0 e0       	ldi	r29, 0x00	; 0
  size_t termIndex = 0;
  int c;

  if( *target == 0)
     return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
  80:	c3 01       	movw	r24, r6
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
  86:	9c 01       	movw	r18, r24
  88:	18 16       	cp	r1, r24
  8a:	19 06       	cpc	r1, r25
  8c:	04 f0       	brlt	.+0      	; 0x8e <_ZN6Stream9findUntilEPcjS0_j+0x8e>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_ZN6Stream9findUntilEPcjS0_j+0x90>
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN6Stream9findUntilEPcjS0_j+0x94>
  94:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
        termIndex = 0;
  }
  return false;
}
  96:	df 91       	pop	r29
  98:	cf 91       	pop	r28
  9a:	1f 91       	pop	r17
  9c:	0f 91       	pop	r16
  9e:	ff 90       	pop	r15
  a0:	ef 90       	pop	r14
  a2:	df 90       	pop	r13
  a4:	cf 90       	pop	r12
  a6:	bf 90       	pop	r11
  a8:	af 90       	pop	r10
  aa:	9f 90       	pop	r9
  ac:	8f 90       	pop	r8
  ae:	7f 90       	pop	r7
  b0:	6f 90       	pop	r6
  b2:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

00000000 <_ZN6Stream9findUntilEPcS0_>:
{
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	9a 01       	movw	r18, r20
{
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	db 01       	movw	r26, r22
   8:	0d 90       	ld	r0, X+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6Stream9findUntilEPcS0_+0xe>
   e:	ad 01       	movw	r20, r26
  10:	41 50       	subi	r20, 0x01	; 1
  12:	50 40       	sbci	r21, 0x00	; 0
  14:	46 1b       	sub	r20, r22
  16:	57 0b       	sbc	r21, r23
  18:	d9 01       	movw	r26, r18
  1a:	0d 90       	ld	r0, X+
  1c:	00 20       	and	r0, r0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream9findUntilEPcS0_+0x20>
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	a2 1b       	sub	r26, r18
  24:	b3 0b       	sbc	r27, r19
  26:	8d 01       	movw	r16, r26
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
}
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPc:

00000000 <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, NULL);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPc>
}
   8:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPcj:

00000000 <_ZN6Stream4findEPcj>:

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
{
  return findUntil(target, length, NULL, 0);
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	00 e0       	ldi	r16, 0x00	; 0
   a:	10 e0       	ldi	r17, 0x00	; 0
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPcj>
}
  10:	1f 91       	pop	r17
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000001e3  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000687  00000000  00000000  00000217  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000488  00000000  00000000  0000089e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._Z12disableTimerh 00000042  00000000  00000000  00000d26  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000002e  00000000  00000000  00000d68  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_7 000000b8  00000000  00000000  00000d96  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z4tonehjm 0000042a  00000000  00000000  00000e4e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .bss.timer0_toggle_count 00000004  00000000  00000000  00001278  2**0
                  ALLOC
 11 .bss.timer0_pin_port 00000002  00000000  00000000  00001278  2**0
                  ALLOC
 12 .bss.timer0_pin_mask 00000001  00000000  00000000  00001278  2**0
                  ALLOC
 13 .bss.timer1_toggle_count 00000004  00000000  00000000  00001278  2**0
                  ALLOC
 14 .bss.timer1_pin_port 00000002  00000000  00000000  00001278  2**0
                  ALLOC
 15 .bss.timer1_pin_mask 00000001  00000000  00000000  00001278  2**0
                  ALLOC
 16 .bss.timer2_toggle_count 00000004  00000000  00000000  00001278  2**0
                  ALLOC
 17 .bss.timer2_pin_port 00000002  00000000  00000000  00001278  2**0
                  ALLOC
 18 .bss.timer2_pin_mask 00000001  00000000  00000000  00001278  2**0
                  ALLOC
 19 .data._ZL9tone_pins 00000001  00000000  00000000  00001278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .progmem.data 00000001  00000000  00000000  00001279  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .debug_frame  00000050  00000000  00000000  0000127c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 22 .debug_loc    00000346  00000000  00000000  000012cc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 23 .debug_pubnames 00000106  00000000  00000000  00001612  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 24 .debug_aranges 00000038  00000000  00000000  00001718  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 25 .debug_ranges 00000030  00000000  00000000  00001750  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 26 .debug_str    000002bb  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._Z12disableTimerh:

00000000 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
   0:	81 30       	cpi	r24, 0x01	; 1
   2:	01 f0       	breq	.+0      	; 0x4 <_Z12disableTimerh+0x4>
   4:	81 30       	cpi	r24, 0x01	; 1
   6:	00 f0       	brcs	.+0      	; 0x8 <_Z12disableTimerh+0x8>
   8:	82 30       	cpi	r24, 0x02	; 2
   a:	01 f4       	brne	.+0      	; 0xc <_Z12disableTimerh+0xc>
   c:	00 c0       	rjmp	.+0      	; 0xe <_Z12disableTimerh+0xe>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
   e:	10 92 6e 00 	sts	0x006E, r1
  12:	08 95       	ret
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
  14:	80 91 6f 00 	lds	r24, 0x006F
  18:	8d 7f       	andi	r24, 0xFD	; 253
  1a:	80 93 6f 00 	sts	0x006F, r24
  1e:	08 95       	ret
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
  20:	80 91 70 00 	lds	r24, 0x0070
  24:	8d 7f       	andi	r24, 0xFD	; 253
  26:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
  2a:	81 e0       	ldi	r24, 0x01	; 1
  2c:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
  30:	80 91 b1 00 	lds	r24, 0x00B1
  34:	88 7f       	andi	r24, 0xF8	; 248
  36:	84 60       	ori	r24, 0x04	; 4
  38:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
  3c:	10 92 b3 00 	sts	0x00B3, r1
  40:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000000 <_Z6noToneh>:
#endif
  }
}


void noTone(uint8_t _pin)
   0:	1f 93       	push	r17
   2:	18 2f       	mov	r17, r24
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
   4:	80 91 00 00 	lds	r24, 0x0000
   8:	81 17       	cp	r24, r17
   a:	01 f0       	breq	.+0      	; 0xc <_Z6noToneh+0xc>
   c:	9f ef       	ldi	r25, 0xFF	; 255
   e:	00 c0       	rjmp	.+0      	; 0x10 <_Z6noToneh+0x10>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  10:	e0 e0       	ldi	r30, 0x00	; 0
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	94 91       	lpm	r25, Z+
      tone_pins[i] = 255;
  16:	8f ef       	ldi	r24, 0xFF	; 255
  18:	80 93 00 00 	sts	0x0000, r24
    }
  }
  
  disableTimer(_timer);
  1c:	89 2f       	mov	r24, r25
  1e:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>

  digitalWrite(_pin, 0);
  22:	81 2f       	mov	r24, r17
  24:	60 e0       	ldi	r22, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
}
  2a:	1f 91       	pop	r17
  2c:	08 95       	ret

Disassembly of section .text.__vector_7:

00000000 <__vector_7>:
  }
}
#endif


ISR(TIMER2_COMPA_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
{

  if (timer2_toggle_count != 0)
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	a0 91 00 00 	lds	r26, 0x0000
  2e:	b0 91 00 00 	lds	r27, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	a1 05       	cpc	r26, r1
  36:	b1 05       	cpc	r27, r1
  38:	01 f0       	breq	.+0      	; 0x3a <__vector_7+0x3a>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3a:	e0 91 00 00 	lds	r30, 0x0000
  3e:	f0 91 00 00 	lds	r31, 0x0000
  42:	80 81       	ld	r24, Z
  44:	90 91 00 00 	lds	r25, 0x0000
  48:	89 27       	eor	r24, r25
  4a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
  4c:	80 91 00 00 	lds	r24, 0x0000
  50:	90 91 00 00 	lds	r25, 0x0000
  54:	a0 91 00 00 	lds	r26, 0x0000
  58:	b0 91 00 00 	lds	r27, 0x0000
  5c:	18 16       	cp	r1, r24
  5e:	19 06       	cpc	r1, r25
  60:	1a 06       	cpc	r1, r26
  62:	1b 06       	cpc	r1, r27
  64:	04 f4       	brge	.+0      	; 0x66 <__vector_7+0x66>
      timer2_toggle_count--;
  66:	80 91 00 00 	lds	r24, 0x0000
  6a:	90 91 00 00 	lds	r25, 0x0000
  6e:	a0 91 00 00 	lds	r26, 0x0000
  72:	b0 91 00 00 	lds	r27, 0x0000
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	a1 09       	sbc	r26, r1
  7a:	b1 09       	sbc	r27, r1
  7c:	80 93 00 00 	sts	0x0000, r24
  80:	90 93 00 00 	sts	0x0000, r25
  84:	a0 93 00 00 	sts	0x0000, r26
  88:	b0 93 00 00 	sts	0x0000, r27
  8c:	00 c0       	rjmp	.+0      	; 0x8e <__vector_7+0x8e>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  8e:	80 91 00 00 	lds	r24, 0x0000
  92:	0e 94 00 00 	call	0	; 0x0 <__vector_7>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  96:	ff 91       	pop	r31
  98:	ef 91       	pop	r30
  9a:	bf 91       	pop	r27
  9c:	af 91       	pop	r26
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	7f 91       	pop	r23
  a4:	6f 91       	pop	r22
  a6:	5f 91       	pop	r21
  a8:	4f 91       	pop	r20
  aa:	3f 91       	pop	r19
  ac:	2f 91       	pop	r18
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	5f 92       	push	r5
   6:	6f 92       	push	r6
   8:	7f 92       	push	r7
   a:	8f 92       	push	r8
   c:	9f 92       	push	r9
   e:	af 92       	push	r10
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	df 93       	push	r29
  20:	cf 93       	push	r28
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	00 d0       	rcall	.+0      	; 0x26 <_Z4tonehjm+0x26>
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	a8 2f       	mov	r26, r24
  2c:	1b 01       	movw	r2, r22
  2e:	29 83       	std	Y+1, r18	; 0x01
  30:	3a 83       	std	Y+2, r19	; 0x02
  32:	4b 83       	std	Y+3, r20	; 0x03
  34:	5c 83       	std	Y+4, r21	; 0x04
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
  36:	80 91 00 00 	lds	r24, 0x0000
  3a:	8a 17       	cp	r24, r26
  3c:	01 f4       	brne	.+0      	; 0x3e <_Z4tonehjm+0x3e>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  3e:	e0 e0       	ldi	r30, 0x00	; 0
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	54 90       	lpm	r5, Z+
  44:	00 c0       	rjmp	.+0      	; 0x46 <_Z4tonehjm+0x46>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
  46:	8f 3f       	cpi	r24, 0xFF	; 255
  48:	01 f0       	breq	.+0      	; 0x4a <_Z4tonehjm+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_Z4tonehjm+0x4c>
      tone_pins[i] = _pin;
  4c:	a0 93 00 00 	sts	0x0000, r26
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  50:	e0 e0       	ldi	r30, 0x00	; 0
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	54 90       	lpm	r5, Z+
      break;
    }
  }
  
  if (_timer != -1)
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	52 16       	cp	r5, r18
  5a:	01 f4       	brne	.+0      	; 0x5c <_Z4tonehjm+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_Z4tonehjm+0x5e>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	58 16       	cp	r5, r24
  62:	01 f0       	breq	.+0      	; 0x64 <_Z4tonehjm+0x64>
  64:	92 e0       	ldi	r25, 0x02	; 2
  66:	59 16       	cp	r5, r25
  68:	01 f4       	brne	.+0      	; 0x6a <_Z4tonehjm+0x6a>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_Z4tonehjm+0x6c>
  6c:	55 20       	and	r5, r5
  6e:	01 f0       	breq	.+0      	; 0x70 <_Z4tonehjm+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <_Z4tonehjm+0x72>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  72:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
  74:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
  76:	84 b5       	in	r24, 0x24	; 36
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	84 bd       	out	0x24, r24	; 36
        bitWrite(TCCR0B, CS00, 1);
  7c:	85 b5       	in	r24, 0x25	; 37
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	85 bd       	out	0x25, r24	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  82:	2a 2f       	mov	r18, r26
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	f9 01       	movw	r30, r18
  88:	e0 50       	subi	r30, 0x00	; 0
  8a:	f0 40       	sbci	r31, 0x00	; 0
  8c:	e4 91       	lpm	r30, Z+
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	ee 0f       	add	r30, r30
  92:	ff 1f       	adc	r31, r31
  94:	e0 50       	subi	r30, 0x00	; 0
  96:	f0 40       	sbci	r31, 0x00	; 0
  98:	85 91       	lpm	r24, Z+
  9a:	94 91       	lpm	r25, Z+
  9c:	90 93 00 00 	sts	0x0000, r25
  a0:	80 93 00 00 	sts	0x0000, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
  a4:	20 50       	subi	r18, 0x00	; 0
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	84 91       	lpm	r24, Z+
  ac:	80 93 00 00 	sts	0x0000, r24
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <_Z4tonehjm+0xb2>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
  b2:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
  b6:	10 92 81 00 	sts	0x0081, r1
        bitWrite(TCCR1B, WGM12, 1);
  ba:	80 91 81 00 	lds	r24, 0x0081
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 93 81 00 	sts	0x0081, r24
        bitWrite(TCCR1B, CS10, 1);
  c4:	80 91 81 00 	lds	r24, 0x0081
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 93 81 00 	sts	0x0081, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
  ce:	2a 2f       	mov	r18, r26
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	f0 40       	sbci	r31, 0x00	; 0
  d8:	e4 91       	lpm	r30, Z+
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	e0 50       	subi	r30, 0x00	; 0
  e2:	f0 40       	sbci	r31, 0x00	; 0
  e4:	85 91       	lpm	r24, Z+
  e6:	94 91       	lpm	r25, Z+
  e8:	90 93 00 00 	sts	0x0000, r25
  ec:	80 93 00 00 	sts	0x0000, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
  f0:	20 50       	subi	r18, 0x00	; 0
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	84 91       	lpm	r24, Z+
  f8:	80 93 00 00 	sts	0x0000, r24
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_Z4tonehjm+0xfe>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
  fe:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
 102:	10 92 b1 00 	sts	0x00B1, r1
        bitWrite(TCCR2A, WGM21, 1);
 106:	80 91 b0 00 	lds	r24, 0x00B0
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 93 b0 00 	sts	0x00B0, r24
        bitWrite(TCCR2B, CS20, 1);
 110:	80 91 b1 00 	lds	r24, 0x00B1
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 93 b1 00 	sts	0x00B1, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 11a:	2a 2f       	mov	r18, r26
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	e0 50       	subi	r30, 0x00	; 0
 122:	f0 40       	sbci	r31, 0x00	; 0
 124:	e4 91       	lpm	r30, Z+
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	f0 40       	sbci	r31, 0x00	; 0
 130:	85 91       	lpm	r24, Z+
 132:	94 91       	lpm	r25, Z+
 134:	90 93 00 00 	sts	0x0000, r25
 138:	80 93 00 00 	sts	0x0000, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
 13c:	20 50       	subi	r18, 0x00	; 0
 13e:	30 40       	sbci	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	84 91       	lpm	r24, Z+
 144:	80 93 00 00 	sts	0x0000, r24
 148:	00 c0       	rjmp	.+0      	; 0x14a <_Z4tonehjm+0x14a>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
 14a:	57 fc       	sbrc	r5, 7
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z4tonehjm+0x14e>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
 14e:	8a 2f       	mov	r24, r26
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
 156:	55 20       	and	r5, r5
 158:	01 f0       	breq	.+0      	; 0x15a <_Z4tonehjm+0x15a>
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	5f 16       	cp	r5, r31
 15e:	01 f0       	breq	.+0      	; 0x160 <_Z4tonehjm+0x160>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z4tonehjm+0x162>
    {
      ocr = F_CPU / frequency / 2 - 1;
 162:	31 01       	movw	r6, r2
 164:	88 24       	eor	r8, r8
 166:	99 24       	eor	r9, r9
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	72 e1       	ldi	r23, 0x12	; 18
 16c:	8a e7       	ldi	r24, 0x7A	; 122
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	a4 01       	movw	r20, r8
 172:	93 01       	movw	r18, r6
 174:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 178:	59 01       	movw	r10, r18
 17a:	6a 01       	movw	r12, r20
 17c:	86 01       	movw	r16, r12
 17e:	75 01       	movw	r14, r10
 180:	08 94       	sec
 182:	e1 08       	sbc	r14, r1
 184:	f1 08       	sbc	r15, r1
 186:	01 09       	sbc	r16, r1
 188:	11 09       	sbc	r17, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	e2 16       	cp	r14, r18
 18e:	f1 04       	cpc	r15, r1
 190:	01 05       	cpc	r16, r1
 192:	11 05       	cpc	r17, r1
 194:	01 f0       	breq	.+0      	; 0x196 <_Z4tonehjm+0x196>
 196:	00 f4       	brcc	.+0      	; 0x198 <_Z4tonehjm+0x198>
 198:	00 c0       	rjmp	.+0      	; 0x19a <_Z4tonehjm+0x19a>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
 19a:	60 e4       	ldi	r22, 0x40	; 64
 19c:	72 e4       	ldi	r23, 0x42	; 66
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	a4 01       	movw	r20, r8
 1a4:	93 01       	movw	r18, r6
 1a6:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1aa:	79 01       	movw	r14, r18
 1ac:	8a 01       	movw	r16, r20
 1ae:	08 94       	sec
 1b0:	e1 08       	sbc	r14, r1
 1b2:	f1 08       	sbc	r15, r1
 1b4:	01 09       	sbc	r16, r1
 1b6:	11 09       	sbc	r17, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	58 16       	cp	r5, r24
 1bc:	01 f4       	brne	.+0      	; 0x1be <_Z4tonehjm+0x1be>
 1be:	9f ef       	ldi	r25, 0xFF	; 255
 1c0:	e9 16       	cp	r14, r25
 1c2:	f1 04       	cpc	r15, r1
 1c4:	01 05       	cpc	r16, r1
 1c6:	11 05       	cpc	r17, r1
 1c8:	01 f0       	breq	.+0      	; 0x1ca <_Z4tonehjm+0x1ca>
 1ca:	00 f4       	brcc	.+0      	; 0x1cc <_Z4tonehjm+0x1cc>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_Z4tonehjm+0x1ce>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
 1ce:	60 e9       	ldi	r22, 0x90	; 144
 1d0:	70 ed       	ldi	r23, 0xD0	; 208
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	a4 01       	movw	r20, r8
 1d8:	93 01       	movw	r18, r6
 1da:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1de:	79 01       	movw	r14, r18
 1e0:	8a 01       	movw	r16, r20
 1e2:	08 94       	sec
 1e4:	e1 08       	sbc	r14, r1
 1e6:	f1 08       	sbc	r15, r1
 1e8:	01 09       	sbc	r16, r1
 1ea:	11 09       	sbc	r17, r1
 1ec:	83 e0       	ldi	r24, 0x03	; 3
          prescalarbits = 0b011;
        }

        if (ocr > 255)
 1ee:	af ef       	ldi	r26, 0xFF	; 255
 1f0:	ea 16       	cp	r14, r26
 1f2:	f1 04       	cpc	r15, r1
 1f4:	01 05       	cpc	r16, r1
 1f6:	11 05       	cpc	r17, r1
 1f8:	01 f0       	breq	.+0      	; 0x1fa <_Z4tonehjm+0x1fa>
 1fa:	00 f4       	brcc	.+0      	; 0x1fc <_Z4tonehjm+0x1fc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_Z4tonehjm+0x1fe>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 1fe:	68 e4       	ldi	r22, 0x48	; 72
 200:	78 ee       	ldi	r23, 0xE8	; 232
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	a4 01       	movw	r20, r8
 208:	93 01       	movw	r18, r6
 20a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 20e:	79 01       	movw	r14, r18
 210:	8a 01       	movw	r16, r20
 212:	08 94       	sec
 214:	e1 08       	sbc	r14, r1
 216:	f1 08       	sbc	r15, r1
 218:	01 09       	sbc	r16, r1
 21a:	11 09       	sbc	r17, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 21c:	55 20       	and	r5, r5
 21e:	01 f4       	brne	.+0      	; 0x220 <_Z4tonehjm+0x220>
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	00 c0       	rjmp	.+0      	; 0x224 <_Z4tonehjm+0x224>

          if (_timer == 2 && ocr > 255)
 224:	b2 e0       	ldi	r27, 0x02	; 2
 226:	5b 16       	cp	r5, r27
 228:	01 f0       	breq	.+0      	; 0x22a <_Z4tonehjm+0x22a>
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_Z4tonehjm+0x22e>
 22e:	ef ef       	ldi	r30, 0xFF	; 255
 230:	ee 16       	cp	r14, r30
 232:	f1 04       	cpc	r15, r1
 234:	01 05       	cpc	r16, r1
 236:	11 05       	cpc	r17, r1
 238:	01 f0       	breq	.+0      	; 0x23a <_Z4tonehjm+0x23a>
 23a:	00 f4       	brcc	.+0      	; 0x23c <_Z4tonehjm+0x23c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <_Z4tonehjm+0x23e>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
 23e:	64 e2       	ldi	r22, 0x24	; 36
 240:	74 ef       	ldi	r23, 0xF4	; 244
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	a4 01       	movw	r20, r8
 248:	93 01       	movw	r18, r6
 24a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 24e:	79 01       	movw	r14, r18
 250:	8a 01       	movw	r16, r20
 252:	08 94       	sec
 254:	e1 08       	sbc	r14, r1
 256:	f1 08       	sbc	r15, r1
 258:	01 09       	sbc	r16, r1
 25a:	11 09       	sbc	r17, r1
 25c:	85 e0       	ldi	r24, 0x05	; 5
            prescalarbits = 0b101;
          }

          if (ocr > 255)
 25e:	ff ef       	ldi	r31, 0xFF	; 255
 260:	ef 16       	cp	r14, r31
 262:	f1 04       	cpc	r15, r1
 264:	01 05       	cpc	r16, r1
 266:	11 05       	cpc	r17, r1
 268:	01 f0       	breq	.+0      	; 0x26a <_Z4tonehjm+0x26a>
 26a:	00 f0       	brcs	.+0      	; 0x26c <_Z4tonehjm+0x26c>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 26c:	62 e1       	ldi	r22, 0x12	; 18
 26e:	7a e7       	ldi	r23, 0x7A	; 122
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	a4 01       	movw	r20, r8
 276:	93 01       	movw	r18, r6
 278:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 27c:	79 01       	movw	r14, r18
 27e:	8a 01       	movw	r16, r20
 280:	08 94       	sec
 282:	e1 08       	sbc	r14, r1
 284:	f1 08       	sbc	r15, r1
 286:	01 09       	sbc	r16, r1
 288:	11 09       	sbc	r17, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 28a:	55 20       	and	r5, r5
 28c:	01 f0       	breq	.+0      	; 0x28e <_Z4tonehjm+0x28e>
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	00 c0       	rjmp	.+0      	; 0x292 <_Z4tonehjm+0x292>
 292:	84 e0       	ldi	r24, 0x04	; 4
            if (ocr > 255)
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	e2 16       	cp	r14, r18
 298:	f1 04       	cpc	r15, r1
 29a:	01 05       	cpc	r16, r1
 29c:	11 05       	cpc	r17, r1
 29e:	01 f0       	breq	.+0      	; 0x2a0 <_Z4tonehjm+0x2a0>
 2a0:	00 f0       	brcs	.+0      	; 0x2a2 <_Z4tonehjm+0x2a2>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 2a2:	86 01       	movw	r16, r12
 2a4:	75 01       	movw	r14, r10
 2a6:	9a e0       	ldi	r25, 0x0A	; 10
 2a8:	16 95       	lsr	r17
 2aa:	07 95       	ror	r16
 2ac:	f7 94       	ror	r15
 2ae:	e7 94       	ror	r14
 2b0:	9a 95       	dec	r25
 2b2:	01 f4       	brne	.+0      	; 0x2b4 <_Z4tonehjm+0x2b4>
 2b4:	08 94       	sec
 2b6:	e1 08       	sbc	r14, r1
 2b8:	f1 08       	sbc	r15, r1
 2ba:	01 09       	sbc	r16, r1
 2bc:	11 09       	sbc	r17, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 2be:	55 20       	and	r5, r5
 2c0:	01 f0       	breq	.+0      	; 0x2c2 <_Z4tonehjm+0x2c2>
 2c2:	87 e0       	ldi	r24, 0x07	; 7
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <_Z4tonehjm+0x2c6>
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_Z4tonehjm+0x2ca>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 2cc:	55 20       	and	r5, r5
 2ce:	01 f4       	brne	.+0      	; 0x2d0 <_Z4tonehjm+0x2d0>
      {
        TCCR0B = prescalarbits;
 2d0:	85 bd       	out	0x25, r24	; 37
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_Z4tonehjm+0x2d4>
 2d4:	82 e0       	ldi	r24, 0x02	; 2
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
 2d6:	80 93 b1 00 	sts	0x00B1, r24
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <_Z4tonehjm+0x2dc>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
 2dc:	51 01       	movw	r10, r2
 2de:	cc 24       	eor	r12, r12
 2e0:	dd 24       	eor	r13, r13
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	72 e1       	ldi	r23, 0x12	; 18
 2e6:	8a e7       	ldi	r24, 0x7A	; 122
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a6 01       	movw	r20, r12
 2ec:	95 01       	movw	r18, r10
 2ee:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2f2:	79 01       	movw	r14, r18
 2f4:	8a 01       	movw	r16, r20
 2f6:	08 94       	sec
 2f8:	e1 08       	sbc	r14, r1
 2fa:	f1 08       	sbc	r15, r1
 2fc:	01 09       	sbc	r16, r1
 2fe:	11 09       	sbc	r17, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	e8 16       	cp	r14, r24
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	f8 06       	cpc	r15, r24
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	08 07       	cpc	r16, r24
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	18 07       	cpc	r17, r24
 310:	00 f4       	brcc	.+0      	; 0x312 <_Z4tonehjm+0x312>
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	00 c0       	rjmp	.+0      	; 0x316 <_Z4tonehjm+0x316>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
 316:	68 e4       	ldi	r22, 0x48	; 72
 318:	78 ee       	ldi	r23, 0xE8	; 232
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	a6 01       	movw	r20, r12
 320:	95 01       	movw	r18, r10
 322:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 326:	79 01       	movw	r14, r18
 328:	8a 01       	movw	r16, r20
 32a:	08 94       	sec
 32c:	e1 08       	sbc	r14, r1
 32e:	f1 08       	sbc	r15, r1
 330:	01 09       	sbc	r16, r1
 332:	11 09       	sbc	r17, r1
 334:	93 e0       	ldi	r25, 0x03	; 3
        prescalarbits = 0b011;
      }

      if (_timer == 1)
 336:	a1 e0       	ldi	r26, 0x01	; 1
 338:	5a 16       	cp	r5, r26
 33a:	01 f4       	brne	.+0      	; 0x33c <_Z4tonehjm+0x33c>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 33c:	80 91 81 00 	lds	r24, 0x0081
 340:	88 7f       	andi	r24, 0xF8	; 248
 342:	98 2b       	or	r25, r24
 344:	90 93 81 00 	sts	0x0081, r25

    }
    

    // Calculate the toggle count
    if (duration > 0)
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	ab 81       	ldd	r26, Y+3	; 0x03
 34e:	bc 81       	ldd	r27, Y+4	; 0x04
 350:	00 97       	sbiw	r24, 0x00	; 0
 352:	a1 05       	cpc	r26, r1
 354:	b1 05       	cpc	r27, r1
 356:	01 f4       	brne	.+0      	; 0x358 <_Z4tonehjm+0x358>
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	9f ef       	ldi	r25, 0xFF	; 255
 35c:	af ef       	ldi	r26, 0xFF	; 255
 35e:	bf ef       	ldi	r27, 0xFF	; 255
 360:	00 c0       	rjmp	.+0      	; 0x362 <_Z4tonehjm+0x362>
    {
      toggle_count = 2 * frequency * duration / 1000;
 362:	22 0c       	add	r2, r2
 364:	33 1c       	adc	r3, r3
 366:	b1 01       	movw	r22, r2
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	29 81       	ldd	r18, Y+1	; 0x01
 36e:	3a 81       	ldd	r19, Y+2	; 0x02
 370:	4b 81       	ldd	r20, Y+3	; 0x03
 372:	5c 81       	ldd	r21, Y+4	; 0x04
 374:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 378:	28 ee       	ldi	r18, 0xE8	; 232
 37a:	33 e0       	ldi	r19, 0x03	; 3
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 384:	c9 01       	movw	r24, r18
 386:	da 01       	movw	r26, r20
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
 388:	e1 e0       	ldi	r30, 0x01	; 1
 38a:	5e 16       	cp	r5, r30
 38c:	01 f0       	breq	.+0      	; 0x38e <_Z4tonehjm+0x38e>
 38e:	f2 e0       	ldi	r31, 0x02	; 2
 390:	5f 16       	cp	r5, r31
 392:	01 f0       	breq	.+0      	; 0x394 <_Z4tonehjm+0x394>
 394:	55 20       	and	r5, r5
 396:	01 f4       	brne	.+0      	; 0x398 <_Z4tonehjm+0x398>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
 398:	e7 bc       	out	0x27, r14	; 39
        timer0_toggle_count = toggle_count;
 39a:	80 93 00 00 	sts	0x0000, r24
 39e:	90 93 00 00 	sts	0x0000, r25
 3a2:	a0 93 00 00 	sts	0x0000, r26
 3a6:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK0, OCIE0A, 1);
 3aa:	80 91 6e 00 	lds	r24, 0x006E
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	80 93 6e 00 	sts	0x006E, r24
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <_Z4tonehjm+0x3b6>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
 3b6:	f0 92 89 00 	sts	0x0089, r15
 3ba:	e0 92 88 00 	sts	0x0088, r14
        timer1_toggle_count = toggle_count;
 3be:	80 93 00 00 	sts	0x0000, r24
 3c2:	90 93 00 00 	sts	0x0000, r25
 3c6:	a0 93 00 00 	sts	0x0000, r26
 3ca:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK1, OCIE1A, 1);
 3ce:	80 91 6f 00 	lds	r24, 0x006F
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	80 93 6f 00 	sts	0x006F, r24
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <_Z4tonehjm+0x3da>
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
 3da:	e0 92 b3 00 	sts	0x00B3, r14
        timer2_toggle_count = toggle_count;
 3de:	80 93 00 00 	sts	0x0000, r24
 3e2:	90 93 00 00 	sts	0x0000, r25
 3e6:	a0 93 00 00 	sts	0x0000, r26
 3ea:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK2, OCIE2A, 1);
 3ee:	80 91 70 00 	lds	r24, 0x0070
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	80 93 70 00 	sts	0x0070, r24
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <_Z4tonehjm+0x3fa>
        break;
#endif

    }
  }
}
 3fa:	84 e0       	ldi	r24, 0x04	; 4
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <_Z4tonehjm+0x3fe>
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	cf 91       	pop	r28
 408:	df 91       	pop	r29
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	ff 90       	pop	r15
 410:	ef 90       	pop	r14
 412:	df 90       	pop	r13
 414:	cf 90       	pop	r12
 416:	bf 90       	pop	r11
 418:	af 90       	pop	r10
 41a:	9f 90       	pop	r9
 41c:	8f 90       	pop	r8
 41e:	7f 90       	pop	r7
 420:	6f 90       	pop	r6
 422:	5f 90       	pop	r5
 424:	3f 90       	pop	r3
 426:	2f 90       	pop	r2
 428:	08 95       	ret

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000063  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000137  00000000  00000000  00000097  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000012a  00000000  00000000  000001ce  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_str    00000113  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000000e7  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f9  00000000  00000000  0000011b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000027b  00000000  00000000  00000314  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.attachInterrupt 00000046  00000000  00000000  0000058f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.detachInterrupt 00000026  00000000  00000000  000005d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_1 0000005a  00000000  00000000  000005fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__vector_2 0000005a  00000000  00000000  00000655  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .bss.intFunc  00000004  00000000  00000000  000006af  2**0
                  ALLOC
 11 .debug_frame  00000050  00000000  00000000  000006b0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_loc    00000029  00000000  00000000  00000700  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_pubnames 00000058  00000000  00000000  00000729  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_aranges 00000038  00000000  00000000  00000781  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000007b9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_str    0000015a  00000000  00000000  000007e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <attachInterrupt+0x4>
    intFunc[interruptNum] = userFunc;
   4:	e8 2f       	mov	r30, r24
   6:	f0 e0       	ldi	r31, 0x00	; 0
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
  10:	71 83       	std	Z+1, r23	; 0x01
  12:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  14:	88 23       	and	r24, r24
  16:	01 f0       	breq	.+0      	; 0x18 <attachInterrupt+0x18>
  18:	81 30       	cpi	r24, 0x01	; 1
  1a:	01 f4       	brne	.+0      	; 0x1c <attachInterrupt+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <attachInterrupt+0x1e>
      EIMSK |= (1 << INT7);
      break;
#else
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  1e:	80 91 69 00 	lds	r24, 0x0069
  22:	8c 7f       	andi	r24, 0xFC	; 252
  24:	84 2b       	or	r24, r20
  26:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
  2a:	e8 9a       	sbi	0x1d, 0	; 29
  2c:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
  2e:	80 91 69 00 	lds	r24, 0x0069
  32:	44 0f       	add	r20, r20
  34:	55 1f       	adc	r21, r21
  36:	44 0f       	add	r20, r20
  38:	55 1f       	adc	r21, r21
  3a:	83 7f       	andi	r24, 0xF3	; 243
  3c:	84 2b       	or	r24, r20
  3e:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
  42:	e9 9a       	sbi	0x1d, 1	; 29
  44:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000000 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <detachInterrupt+0x4>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
   4:	88 23       	and	r24, r24
   6:	01 f0       	breq	.+0      	; 0x8 <detachInterrupt+0x8>
   8:	81 30       	cpi	r24, 0x01	; 1
   a:	01 f4       	brne	.+0      	; 0xc <detachInterrupt+0xc>
   c:	00 c0       	rjmp	.+0      	; 0xe <detachInterrupt+0xe>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
   e:	e8 98       	cbi	0x1d, 0	; 29
  10:	00 c0       	rjmp	.+0      	; 0x12 <detachInterrupt+0x12>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
  12:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
  14:	e8 2f       	mov	r30, r24
  16:	f0 e0       	ldi	r31, 0x00	; 0
  18:	ee 0f       	add	r30, r30
  1a:	ff 1f       	adc	r31, r31
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	89 2b       	or	r24, r25
  2c:	01 f0       	breq	.+0      	; 0x2e <__vector_1+0x2e>
    intFunc[EXTERNAL_INT_0]();
  2e:	e0 91 00 00 	lds	r30, 0x0000
  32:	f0 91 00 00 	lds	r31, 0x0000
  36:	09 95       	icall
}
  38:	ff 91       	pop	r31
  3a:	ef 91       	pop	r30
  3c:	bf 91       	pop	r27
  3e:	af 91       	pop	r26
  40:	9f 91       	pop	r25
  42:	8f 91       	pop	r24
  44:	7f 91       	pop	r23
  46:	6f 91       	pop	r22
  48:	5f 91       	pop	r21
  4a:	4f 91       	pop	r20
  4c:	3f 91       	pop	r19
  4e:	2f 91       	pop	r18
  50:	0f 90       	pop	r0
  52:	0f be       	out	0x3f, r0	; 63
  54:	0f 90       	pop	r0
  56:	1f 90       	pop	r1
  58:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:

SIGNAL(INT1_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	89 2b       	or	r24, r25
  2c:	01 f0       	breq	.+0      	; 0x2e <__vector_2+0x2e>
    intFunc[EXTERNAL_INT_1]();
  2e:	e0 91 00 00 	lds	r30, 0x0000
  32:	f0 91 00 00 	lds	r31, 0x0000
  36:	09 95       	icall
}
  38:	ff 91       	pop	r31
  3a:	ef 91       	pop	r30
  3c:	bf 91       	pop	r27
  3e:	af 91       	pop	r26
  40:	9f 91       	pop	r25
  42:	8f 91       	pop	r24
  44:	7f 91       	pop	r23
  46:	6f 91       	pop	r22
  48:	5f 91       	pop	r21
  4a:	4f 91       	pop	r20
  4c:	3f 91       	pop	r19
  4e:	2f 91       	pop	r18
  50:	0f 90       	pop	r0
  52:	0f be       	out	0x3f, r0	; 63
  54:	0f 90       	pop	r0
  56:	1f 90       	pop	r1
  58:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 0000009f  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b1  00000000  00000000  000000d3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000016b  00000000  00000000  00000284  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._Z3maplllll 00000092  00000000  00000000  000003ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z8makeWordj 00000002  00000000  00000000  00000481  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._Z8makeWordhh 0000000e  00000000  00000000  00000483  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._Z6randoml 00000044  00000000  00000000  00000491  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z6randomll 0000003c  00000000  00000000  000004d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._Z10randomSeedj 00000010  00000000  00000000  00000511  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .debug_frame  00000070  00000000  00000000  00000524  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_loc    00000248  00000000  00000000  00000594  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_pubnames 00000059  00000000  00000000  000007dc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_aranges 00000048  00000000  00000000  00000835  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  0000087d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 17 .debug_str    0000012e  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._Z3maplllll:

00000000 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	3b 01       	movw	r6, r22
  2a:	4c 01       	movw	r8, r24
  2c:	19 01       	movw	r2, r18
  2e:	2a 01       	movw	r4, r20
  30:	6d 89       	ldd	r22, Y+21	; 0x15
  32:	7e 89       	ldd	r23, Y+22	; 0x16
  34:	8f 89       	ldd	r24, Y+23	; 0x17
  36:	98 8d       	ldd	r25, Y+24	; 0x18
  38:	6a 19       	sub	r22, r10
  3a:	7b 09       	sbc	r23, r11
  3c:	8c 09       	sbc	r24, r12
  3e:	9d 09       	sbc	r25, r13
  40:	62 1a       	sub	r6, r18
  42:	73 0a       	sbc	r7, r19
  44:	84 0a       	sbc	r8, r20
  46:	95 0a       	sbc	r9, r21
  48:	a4 01       	movw	r20, r8
  4a:	93 01       	movw	r18, r6
  4c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  50:	e2 18       	sub	r14, r2
  52:	f3 08       	sbc	r15, r3
  54:	04 09       	sbc	r16, r4
  56:	15 09       	sbc	r17, r5
  58:	a8 01       	movw	r20, r16
  5a:	97 01       	movw	r18, r14
  5c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  60:	2a 0d       	add	r18, r10
  62:	3b 1d       	adc	r19, r11
  64:	4c 1d       	adc	r20, r12
  66:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
  68:	b9 01       	movw	r22, r18
  6a:	ca 01       	movw	r24, r20
  6c:	cf 91       	pop	r28
  6e:	df 91       	pop	r29
  70:	1f 91       	pop	r17
  72:	0f 91       	pop	r16
  74:	ff 90       	pop	r15
  76:	ef 90       	pop	r14
  78:	df 90       	pop	r13
  7a:	cf 90       	pop	r12
  7c:	bf 90       	pop	r11
  7e:	af 90       	pop	r10
  80:	9f 90       	pop	r9
  82:	8f 90       	pop	r8
  84:	7f 90       	pop	r7
  86:	6f 90       	pop	r6
  88:	5f 90       	pop	r5
  8a:	4f 90       	pop	r4
  8c:	3f 90       	pop	r3
  8e:	2f 90       	pop	r2
  90:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

00000000 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
   0:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

00000000 <_Z8makeWordhh>:
   0:	70 e0       	ldi	r23, 0x00	; 0
   2:	38 2f       	mov	r19, r24
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	62 2b       	or	r22, r18
   8:	73 2b       	or	r23, r19
   a:	cb 01       	movw	r24, r22
   c:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000000 <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	8c 01       	movw	r16, r24
{
  if (howbig == 0) {
   c:	61 15       	cp	r22, r1
   e:	71 05       	cpc	r23, r1
  10:	81 05       	cpc	r24, r1
  12:	91 05       	cpc	r25, r1
  14:	01 f4       	brne	.+0      	; 0x16 <_Z6randoml+0x16>
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	30 e0       	ldi	r19, 0x00	; 0
  1a:	40 e0       	ldi	r20, 0x00	; 0
  1c:	50 e0       	ldi	r21, 0x00	; 0
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_Z6randoml+0x20>
    return 0;
  }
  return random() % howbig;
  20:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  24:	a8 01       	movw	r20, r16
  26:	97 01       	movw	r18, r14
  28:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  2c:	ac 01       	movw	r20, r24
  2e:	cb 01       	movw	r24, r22
  30:	da 01       	movw	r26, r20
  32:	9c 01       	movw	r18, r24
  34:	ad 01       	movw	r20, r26
}
  36:	b9 01       	movw	r22, r18
  38:	ca 01       	movw	r24, r20
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	ff 90       	pop	r15
  40:	ef 90       	pop	r14
  42:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000000 <_Z6randomll>:

long random(long howsmall, long howbig)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	8c 01       	movw	r16, r24
{
  if (howsmall >= howbig) {
   c:	62 17       	cp	r22, r18
   e:	73 07       	cpc	r23, r19
  10:	84 07       	cpc	r24, r20
  12:	95 07       	cpc	r25, r21
  14:	04 f4       	brge	.+0      	; 0x16 <_Z6randomll+0x16>
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
  16:	26 1b       	sub	r18, r22
  18:	37 0b       	sbc	r19, r23
  1a:	48 0b       	sbc	r20, r24
  1c:	59 0b       	sbc	r21, r25
  1e:	ca 01       	movw	r24, r20
  20:	b9 01       	movw	r22, r18
  22:	0e 94 00 00 	call	0	; 0x0 <_Z6randomll>
  26:	e6 0e       	add	r14, r22
  28:	f7 1e       	adc	r15, r23
  2a:	08 1f       	adc	r16, r24
  2c:	19 1f       	adc	r17, r25
}
  2e:	b7 01       	movw	r22, r14
  30:	c8 01       	movw	r24, r16
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	ff 90       	pop	r15
  38:	ef 90       	pop	r14
  3a:	08 95       	ret

Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
   0:	00 97       	sbiw	r24, 0x00	; 0
   2:	01 f0       	breq	.+0      	; 0x4 <_Z10randomSeedj+0x4>
    srandom(seed);
   4:	bc 01       	movw	r22, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
   e:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .debug_abbrev 00000343  00000000  00000000  00000035  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000021c5  00000000  00000000  00000378  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00001125  00000000  00000000  0000253d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZNK6String6charAtEj 00000022  00000000  00000000  00003662  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6String9setCharAtEjc 0000001a  00000000  00000000  00003684  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6StringixEj 0000002a  00000000  00000000  0000369e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZNK6StringixEj 00000022  00000000  00000000  000036c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6String7replaceEcc 0000001e  00000000  00000000  000036ea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZNK6String5toIntEv 00000022  00000000  00000000  00003708  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6String4trimEv 000000b6  00000000  00000000  0000372a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  000037e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  00003808  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000078  00000000  00000000  00003830  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZNK6String11lastIndexOfERKS_j 0000009c  00000000  00000000  000038a8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZNK6String11lastIndexOfERKS_ 0000001c  00000000  00000000  00003944  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZNK6String7indexOfERKS_j 0000003c  00000000  00000000  00003960  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZNK6String7indexOfERKS_ 0000000a  00000000  00000000  0000399c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZNK6String11lastIndexOfEcj 0000006e  00000000  00000000  000039a6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZNK6String11lastIndexOfEc 00000010  00000000  00000000  00003a14  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZNK6String7indexOfEcj 0000003c  00000000  00000000  00003a24  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZNK6String7indexOfEc 0000000a  00000000  00000000  00003a60  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZNK6String8getBytesEPhjj 0000005a  00000000  00000000  00003a6a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZNK6String8endsWithERKS_ 00000044  00000000  00000000  00003ac4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZNK6String6equalsEPKc 00000046  00000000  00000000  00003b08  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZNK6String9compareToERKS_ 00000066  00000000  00000000  00003b4e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  00003bb4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  00003bc4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  00003bd6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  00003be8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZNK6String6equalsERKS_ 0000002c  00000000  00000000  00003bf6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZNK6String10startsWithERKS_j 00000046  00000000  00000000  00003c22  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZNK6String10startsWithERKS_ 00000026  00000000  00000000  00003c68  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  00003c8e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6String7replaceERKS_S1_ 0000020a  00000000  00000000  00003cc2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN6String7reserveEj 00000038  00000000  00000000  00003ecc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN6String6concatEPKcj 0000005a  00000000  00000000  00003f04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN6String6concatEm 00000064  00000000  00000000  00003f5e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZN6String6concatEl 00000064  00000000  00000000  00003fc2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN6String6concatEj 0000005c  00000000  00000000  00004026  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN6String6concatEi 00000062  00000000  00000000  00004082  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN6String6concatEh 00000058  00000000  00000000  000040e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN6String6concatEc 00000026  00000000  00000000  0000413c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZN6String6concatEPKc 00000020  00000000  00000000  00004162  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZN6String6concatERKS_ 00000010  00000000  00000000  00004182  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZN6String10invalidateEv 00000024  00000000  00000000  00004192  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZplRK15StringSumHelperm 00000022  00000000  00000000  000041b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZplRK15StringSumHelperl 00000022  00000000  00000000  000041d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZplRK15StringSumHelperj 00000022  00000000  00000000  000041fa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZplRK15StringSumHelperi 00000022  00000000  00000000  0000421c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZplRK15StringSumHelperh 00000022  00000000  00000000  0000423e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZplRK15StringSumHelperc 00000022  00000000  00000000  00004260  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZplRK15StringSumHelperPKc 00000038  00000000  00000000  00004282  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZplRK15StringSumHelperRK6String 0000002c  00000000  00000000  000042ba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  000042e6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZN6StringC1EPKc 00000034  00000000  00000000  00004328  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZN6StringC2EPKc 00000034  00000000  00000000  0000435c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZN6StringaSEPKc 00000032  00000000  00000000  00004390  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZN6StringC1Emh 00000064  00000000  00000000  000043c2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZN6StringC2Emh 00000064  00000000  00000000  00004426  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZN6StringC1Elh 00000064  00000000  00000000  0000448a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZN6StringC2Elh 00000064  00000000  00000000  000044ee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZN6StringC1Ejh 00000062  00000000  00000000  00004552  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZN6StringC2Ejh 00000062  00000000  00000000  000045b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZN6StringC1Eih 00000062  00000000  00000000  00004616  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6StringC2Eih 00000062  00000000  00000000  00004678  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZN6StringC1Ehh 00000064  00000000  00000000  000046da  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .text._ZN6StringC2Ehh 00000064  00000000  00000000  0000473e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 70 .text._ZN6StringC1Ec 00000032  00000000  00000000  000047a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 71 .text._ZN6StringC2Ec 00000032  00000000  00000000  000047d4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 72 .text._ZNK6String9substringEjj 0000008e  00000000  00000000  00004806  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 73 .text._ZNK6String9substringEj 00000018  00000000  00000000  00004894  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 74 .text._ZN6StringaSERKS_ 0000002e  00000000  00000000  000048ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 75 .text._ZN6StringC1ERKS_ 00000016  00000000  00000000  000048da  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 76 .text._ZN6StringC2ERKS_ 00000016  00000000  00000000  000048f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 77 .text._ZN6StringD1Ev 0000000c  00000000  00000000  00004906  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 78 .text._ZN6StringD2Ev 0000000c  00000000  00000000  00004912  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 79 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  0000491e  2**0
                  ALLOC
 80 .debug_frame  000004a0  00000000  00000000  00004920  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 81 .debug_loc    00001f05  00000000  00000000  00004dc0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 82 .debug_pubnames 000005bf  00000000  00000000  00006cc5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 83 .debug_aranges 00000260  00000000  00000000  00007284  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 84 .debug_ranges 00000270  00000000  00000000  000074e4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 85 .debug_str    000009a8  00000000  00000000  00007754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZNK6String6charAtEj:

00000000 <_ZNK6String6charAtEj>:

/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
   0:	fc 01       	movw	r30, r24
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6String6charAtEj+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6charAtEj+0x16>
	return buffer[index];
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}
  20:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

00000000 <_ZN6String9setCharAtEjc>:

void String::setCharAt(unsigned int loc, char c) 
   0:	fc 01       	movw	r30, r24
{
	if (loc < len) buffer[loc] = c;
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6String9setCharAtEjc+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	e6 0f       	add	r30, r22
  14:	f7 1f       	adc	r31, r23
  16:	40 83       	st	Z, r20
  18:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

00000000 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
   0:	fc 01       	movw	r30, r24
   2:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   4:	84 81       	ldd	r24, Z+4	; 0x04
   6:	95 81       	ldd	r25, Z+5	; 0x05
   8:	68 17       	cp	r22, r24
   a:	79 07       	cpc	r23, r25
   c:	00 f4       	brcc	.+0      	; 0xe <_ZN6StringixEj+0xe>
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN6StringixEj+0x18>
		dummy_writable_char = 0;
  18:	10 92 00 00 	sts	0x0000, r1
  1c:	60 e0       	ldi	r22, 0x00	; 0
  1e:	70 e0       	ldi	r23, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringixEj+0x22>
		return dummy_writable_char;
	}
	return buffer[index];
  22:	62 0f       	add	r22, r18
  24:	73 1f       	adc	r23, r19
}
  26:	cb 01       	movw	r24, r22
  28:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

00000000 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
   0:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6StringixEj+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6StringixEj+0x16>
	return buffer[index];
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
}
  20:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

00000000 <_ZN6String7replaceEcc>:

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
   0:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
   2:	01 90       	ld	r0, Z+
   4:	f0 81       	ld	r31, Z
   6:	e0 2d       	mov	r30, r0
   8:	30 97       	sbiw	r30, 0x00	; 0
   a:	01 f4       	brne	.+0      	; 0xc <_ZN6String7replaceEcc+0xc>
   c:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
   e:	86 17       	cp	r24, r22
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String7replaceEcc+0x12>
  12:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
  14:	31 96       	adiw	r30, 0x01	; 1
  16:	80 81       	ld	r24, Z
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String7replaceEcc+0x1c>
  1c:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

00000000 <_ZNK6String5toIntEv>:

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
   0:	fc 01       	movw	r30, r24
{
	if (buffer) return atol(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f4       	brne	.+0      	; 0xa <_ZNK6String5toIntEv+0xa>
   a:	20 e0       	ldi	r18, 0x00	; 0
   c:	30 e0       	ldi	r19, 0x00	; 0
   e:	40 e0       	ldi	r20, 0x00	; 0
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZNK6String5toIntEv+0x14>
  14:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String5toIntEv>
  18:	9b 01       	movw	r18, r22
  1a:	ac 01       	movw	r20, r24
	return 0;
}
  1c:	b9 01       	movw	r22, r18
  1e:	ca 01       	movw	r24, r20
  20:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

00000000 <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
{
	if (!buffer || len == 0) return;
  12:	dc 01       	movw	r26, r24
  14:	ed 90       	ld	r14, X+
  16:	fc 90       	ld	r15, X
  18:	11 97       	sbiw	r26, 0x01	; 1
  1a:	e1 14       	cp	r14, r1
  1c:	f1 04       	cpc	r15, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6String4trimEv+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6String4trimEv+0x22>
  22:	14 96       	adiw	r26, 0x04	; 4
  24:	cd 91       	ld	r28, X+
  26:	dc 91       	ld	r29, X
  28:	15 97       	sbiw	r26, 0x05	; 5
  2a:	20 97       	sbiw	r28, 0x00	; 0
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6String4trimEv+0x2e>
  2e:	87 01       	movw	r16, r14
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN6String4trimEv+0x32>
	char *begin = buffer;
	while (isspace(*begin)) begin++;
  32:	0f 5f       	subi	r16, 0xFF	; 255
  34:	1f 4f       	sbci	r17, 0xFF	; 255
  36:	f8 01       	movw	r30, r16
  38:	80 81       	ld	r24, Z
  3a:	99 27       	eor	r25, r25
  3c:	87 fd       	sbrc	r24, 7
  3e:	90 95       	com	r25
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  44:	89 2b       	or	r24, r25
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String4trimEv+0x48>
	char *end = buffer + len - 1;
  48:	21 97       	sbiw	r28, 0x01	; 1
  4a:	ce 0d       	add	r28, r14
  4c:	df 1d       	adc	r29, r15
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN6String4trimEv+0x50>
	while (isspace(*end) && end >= begin) end--;
  50:	21 97       	sbiw	r28, 0x01	; 1
  52:	88 81       	ld	r24, Y
  54:	99 27       	eor	r25, r25
  56:	87 fd       	sbrc	r24, 7
  58:	90 95       	com	r25
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  5e:	89 2b       	or	r24, r25
  60:	01 f0       	breq	.+0      	; 0x62 <_ZN6String4trimEv+0x62>
  62:	c0 17       	cp	r28, r16
  64:	d1 07       	cpc	r29, r17
  66:	00 f4       	brcc	.+0      	; 0x68 <_ZN6String4trimEv+0x68>
	len = end + 1 - begin;
  68:	fe 01       	movw	r30, r28
  6a:	31 96       	adiw	r30, 0x01	; 1
  6c:	e0 1b       	sub	r30, r16
  6e:	f1 0b       	sbc	r31, r17
  70:	d6 01       	movw	r26, r12
  72:	15 96       	adiw	r26, 0x05	; 5
  74:	fc 93       	st	X, r31
  76:	ee 93       	st	-X, r30
  78:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
  7a:	2d 91       	ld	r18, X+
  7c:	3c 91       	ld	r19, X
  7e:	20 17       	cp	r18, r16
  80:	31 07       	cpc	r19, r17
  82:	00 f4       	brcc	.+0      	; 0x84 <_ZN6String4trimEv+0x84>
  84:	c9 01       	movw	r24, r18
  86:	b8 01       	movw	r22, r16
  88:	af 01       	movw	r20, r30
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
	buffer[len] = 0;
  8e:	d6 01       	movw	r26, r12
  90:	ed 91       	ld	r30, X+
  92:	fc 91       	ld	r31, X
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	14 96       	adiw	r26, 0x04	; 4
  98:	8d 91       	ld	r24, X+
  9a:	9c 91       	ld	r25, X
  9c:	15 97       	sbiw	r26, 0x05	; 5
  9e:	e8 0f       	add	r30, r24
  a0:	f9 1f       	adc	r31, r25
  a2:	10 82       	st	Z, r1
}
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	1f 91       	pop	r17
  aa:	0f 91       	pop	r16
  ac:	ff 90       	pop	r15
  ae:	ef 90       	pop	r14
  b0:	df 90       	pop	r13
  b2:	cf 90       	pop	r12
  b4:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

00000000 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toUpperCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toUpperCaseEv+0x10>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toUpperCaseEv>
  1a:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toUpperCaseEv+0x22>
		*p = toupper(*p);
	}
}
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String11toLowerCaseEv:

00000000 <_ZN6String11toLowerCaseEv>:
			index--;
		}
	}
}

void String::toLowerCase(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toLowerCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toLowerCaseEv+0x10>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toLowerCaseEv>
  1a:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toLowerCaseEv+0x22>
		*p = tolower(*p);
	}
}
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

00000000 <_ZNK6String16equalsIgnoreCaseERKS_>:
unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	db 01       	movw	r26, r22
{
	if (this == &s2) return 1;
  10:	86 17       	cp	r24, r22
  12:	97 07       	cpc	r25, r23
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
	if (len != s2.len) return 0;
  16:	24 81       	ldd	r18, Z+4	; 0x04
  18:	35 81       	ldd	r19, Z+5	; 0x05
  1a:	14 96       	adiw	r26, 0x04	; 4
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X
  20:	15 97       	sbiw	r26, 0x05	; 5
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String16equalsIgnoreCaseERKS_+0x28>
	if (len == 0) return 1;
  28:	23 2b       	or	r18, r19
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String16equalsIgnoreCaseERKS_+0x2c>
	const char *p1 = buffer;
  2c:	e0 80       	ld	r14, Z
  2e:	f1 80       	ldd	r15, Z+1	; 0x01
	const char *p2 = s2.buffer;
  30:	cd 91       	ld	r28, X+
  32:	dc 91       	ld	r29, X
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZNK6String16equalsIgnoreCaseERKS_+0x36>
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
  36:	99 27       	eor	r25, r25
  38:	87 fd       	sbrc	r24, 7
  3a:	90 95       	com	r25
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  40:	8c 01       	movw	r16, r24
  42:	88 81       	ld	r24, Y
  44:	99 27       	eor	r25, r25
  46:	87 fd       	sbrc	r24, 7
  48:	90 95       	com	r25
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  4e:	08 17       	cp	r16, r24
  50:	19 07       	cpc	r17, r25
  52:	01 f4       	brne	.+0      	; 0x54 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
  54:	08 94       	sec
  56:	e1 1c       	adc	r14, r1
  58:	f1 1c       	adc	r15, r1
  5a:	21 96       	adiw	r28, 0x01	; 1
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
  5c:	f7 01       	movw	r30, r14
  5e:	80 81       	ld	r24, Z
  60:	88 23       	and	r24, r24
  62:	01 f4       	brne	.+0      	; 0x64 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
  68:	80 e0       	ldi	r24, 0x00	; 0
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

00000000 <_ZNK6String11lastIndexOfERKS_j>:
int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	fc 01       	movw	r30, r24
  16:	5b 01       	movw	r10, r22
  18:	7a 01       	movw	r14, r20
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
  1a:	db 01       	movw	r26, r22
  1c:	14 96       	adiw	r26, 0x04	; 4
  1e:	2d 91       	ld	r18, X+
  20:	3c 91       	ld	r19, X
  22:	15 97       	sbiw	r26, 0x05	; 5
  24:	21 15       	cp	r18, r1
  26:	31 05       	cpc	r19, r1
  28:	01 f0       	breq	.+0      	; 0x2a <_ZNK6String11lastIndexOfERKS_j+0x2a>
  2a:	84 81       	ldd	r24, Z+4	; 0x04
  2c:	95 81       	ldd	r25, Z+5	; 0x05
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <_ZNK6String11lastIndexOfERKS_j+0x32>
  32:	82 17       	cp	r24, r18
  34:	93 07       	cpc	r25, r19
  36:	00 f0       	brcs	.+0      	; 0x38 <_ZNK6String11lastIndexOfERKS_j+0x38>
	if (fromIndex >= len) fromIndex = len - 1;
  38:	48 17       	cp	r20, r24
  3a:	59 07       	cpc	r21, r25
  3c:	00 f0       	brcs	.+0      	; 0x3e <_ZNK6String11lastIndexOfERKS_j+0x3e>
  3e:	7c 01       	movw	r14, r24
  40:	08 94       	sec
  42:	e1 08       	sbc	r14, r1
  44:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
  46:	00 81       	ld	r16, Z
  48:	11 81       	ldd	r17, Z+1	; 0x01
  4a:	c8 01       	movw	r24, r16
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	df ef       	ldi	r29, 0xFF	; 255
  50:	68 01       	movw	r12, r16
  52:	ce 0c       	add	r12, r14
  54:	df 1c       	adc	r13, r15
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZNK6String11lastIndexOfERKS_j+0x58>
		p = strstr(p, s2.buffer);
  58:	f5 01       	movw	r30, r10
  5a:	60 81       	ld	r22, Z
  5c:	71 81       	ldd	r23, Z+1	; 0x01
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_j>
  62:	9c 01       	movw	r18, r24
		if (!p) break;
  64:	00 97       	sbiw	r24, 0x00	; 0
  66:	01 f0       	breq	.+0      	; 0x68 <_ZNK6String11lastIndexOfERKS_j+0x68>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
  68:	80 1b       	sub	r24, r16
  6a:	91 0b       	sbc	r25, r17
  6c:	e8 16       	cp	r14, r24
  6e:	f9 06       	cpc	r15, r25
  70:	00 f0       	brcs	.+0      	; 0x72 <_ZNK6String11lastIndexOfERKS_j+0x72>
  72:	ec 01       	movw	r28, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
  74:	c9 01       	movw	r24, r18
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	c8 16       	cp	r12, r24
  7a:	d9 06       	cpc	r13, r25
  7c:	00 f4       	brcc	.+0      	; 0x7e <_ZNK6String11lastIndexOfERKS_j+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZNK6String11lastIndexOfERKS_j+0x80>
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
  84:	ce 01       	movw	r24, r28
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	bf 90       	pop	r11
  98:	af 90       	pop	r10
  9a:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

00000000 <_ZNK6String11lastIndexOfERKS_>:
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	return lastIndexOf(s2, len - s2.len);
   4:	44 81       	ldd	r20, Z+4	; 0x04
   6:	55 81       	ldd	r21, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	48 1b       	sub	r20, r24
  12:	59 0b       	sbc	r21, r25
  14:	cf 01       	movw	r24, r30
  16:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_>
}
  1a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_j:

00000000 <_ZNK6String7indexOfERKS_j>:
int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	db 01       	movw	r26, r22
{
	if (fromIndex >= len) return -1;
   8:	84 81       	ldd	r24, Z+4	; 0x04
   a:	95 81       	ldd	r25, Z+5	; 0x05
   c:	48 17       	cp	r20, r24
   e:	59 07       	cpc	r21, r25
  10:	00 f4       	brcc	.+0      	; 0x12 <_ZNK6String7indexOfERKS_j+0x12>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
  12:	c0 81       	ld	r28, Z
  14:	d1 81       	ldd	r29, Z+1	; 0x01
  16:	6d 91       	ld	r22, X+
  18:	7c 91       	ld	r23, X
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_j>
  24:	9c 01       	movw	r18, r24
	if (found == NULL) return -1;
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZNK6String7indexOfERKS_j+0x2a>
  2a:	2f ef       	ldi	r18, 0xFF	; 255
  2c:	3f ef       	ldi	r19, 0xFF	; 255
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
  30:	2c 1b       	sub	r18, r28
  32:	3d 0b       	sbc	r19, r29
}
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

00000000 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_>
}
   8:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

00000000 <_ZNK6String11lastIndexOfEcj>:
int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
{
	if (fromIndex >= len || fromIndex < 0) return -1;
  10:	8c 81       	ldd	r24, Y+4	; 0x04
  12:	9d 81       	ldd	r25, Y+5	; 0x05
  14:	48 17       	cp	r20, r24
  16:	59 07       	cpc	r21, r25
  18:	00 f4       	brcc	.+0      	; 0x1a <_ZNK6String11lastIndexOfEcj+0x1a>
	char tempchar = buffer[fromIndex + 1];
  1a:	7a 01       	movw	r14, r20
  1c:	08 94       	sec
  1e:	e1 1c       	adc	r14, r1
  20:	f1 1c       	adc	r15, r1
  22:	e8 81       	ld	r30, Y
  24:	f9 81       	ldd	r31, Y+1	; 0x01
  26:	ee 0d       	add	r30, r14
  28:	ff 1d       	adc	r31, r15
  2a:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
  2c:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
  2e:	08 81       	ld	r16, Y
  30:	19 81       	ldd	r17, Y+1	; 0x01
  32:	77 27       	eor	r23, r23
  34:	67 fd       	sbrc	r22, 7
  36:	70 95       	com	r23
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEcj>
  3e:	9c 01       	movw	r18, r24
	buffer[fromIndex + 1] = tempchar;
  40:	0e 0d       	add	r16, r14
  42:	1f 1d       	adc	r17, r15
  44:	f8 01       	movw	r30, r16
  46:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZNK6String11lastIndexOfEcj+0x4c>
  4c:	ef ef       	ldi	r30, 0xFF	; 255
  4e:	ff ef       	ldi	r31, 0xFF	; 255
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZNK6String11lastIndexOfEcj+0x52>
	return temp - buffer;
  52:	88 81       	ld	r24, Y
  54:	99 81       	ldd	r25, Y+1	; 0x01
  56:	f9 01       	movw	r30, r18
  58:	e8 1b       	sub	r30, r24
  5a:	f9 0b       	sbc	r31, r25
}
  5c:	cf 01       	movw	r24, r30
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

00000000 <_ZNK6String11lastIndexOfEc>:
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
   0:	fc 01       	movw	r30, r24
{
	return lastIndexOf(theChar, len - 1);
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	41 50       	subi	r20, 0x01	; 1
   8:	50 40       	sbci	r21, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEc>
}
   e:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

00000000 <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
   6:	84 81       	ldd	r24, Z+4	; 0x04
   8:	95 81       	ldd	r25, Z+5	; 0x05
   a:	48 17       	cp	r20, r24
   c:	59 07       	cpc	r21, r25
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZNK6String7indexOfEcj+0x10>
	const char* temp = strchr(buffer + fromIndex, ch);
  10:	c0 81       	ld	r28, Z
  12:	d1 81       	ldd	r29, Z+1	; 0x01
  14:	77 27       	eor	r23, r23
  16:	67 fd       	sbrc	r22, 7
  18:	70 95       	com	r23
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEcj>
  24:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZNK6String7indexOfEcj+0x2a>
  2a:	2f ef       	ldi	r18, 0xFF	; 255
  2c:	3f ef       	ldi	r19, 0xFF	; 255
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
  30:	2c 1b       	sub	r18, r28
  32:	3d 0b       	sbc	r19, r29
}
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

00000000 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEc>
}
   8:	08 95       	ret

Disassembly of section .text._ZNK6String8getBytesEPhjj:

00000000 <_ZNK6String8getBytesEPhjj>:
{
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	8b 01       	movw	r16, r22
{
	if (!bufsize || !buf) return;
   c:	41 15       	cp	r20, r1
   e:	51 05       	cpc	r21, r1
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String8getBytesEPhjj+0x12>
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZNK6String8getBytesEPhjj+0x18>
	if (index >= len) {
  18:	84 81       	ldd	r24, Z+4	; 0x04
  1a:	95 81       	ldd	r25, Z+5	; 0x05
  1c:	28 17       	cp	r18, r24
  1e:	39 07       	cpc	r19, r25
  20:	00 f0       	brcs	.+0      	; 0x22 <_ZNK6String8getBytesEPhjj+0x22>
		buf[0] = 0;
  22:	fb 01       	movw	r30, r22
  24:	10 82       	st	Z, r1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZNK6String8getBytesEPhjj+0x28>
		return;
	}
	unsigned int n = bufsize - 1;
  28:	41 50       	subi	r20, 0x01	; 1
  2a:	50 40       	sbci	r21, 0x00	; 0
  2c:	ec 01       	movw	r28, r24
  2e:	c2 1b       	sub	r28, r18
  30:	d3 0b       	sbc	r29, r19
  32:	4c 17       	cp	r20, r28
  34:	5d 07       	cpc	r21, r29
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZNK6String8getBytesEPhjj+0x38>
  38:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
  3a:	60 81       	ld	r22, Z
  3c:	71 81       	ldd	r23, Z+1	; 0x01
  3e:	62 0f       	add	r22, r18
  40:	73 1f       	adc	r23, r19
  42:	c8 01       	movw	r24, r16
  44:	ae 01       	movw	r20, r28
  46:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8getBytesEPhjj>
	buf[n] = 0;
  4a:	c0 0f       	add	r28, r16
  4c:	d1 1f       	adc	r29, r17
  4e:	18 82       	st	Y, r1
}
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

00000000 <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	4d 91       	ld	r20, X+
   c:	5c 91       	ld	r21, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	24 17       	cp	r18, r20
  12:	35 07       	cpc	r19, r21
  14:	00 f0       	brcs	.+0      	; 0x16 <_ZNK6String8endsWithERKS_+0x16>
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZNK6String8endsWithERKS_+0x1e>
  1e:	6d 91       	ld	r22, X+
  20:	7c 91       	ld	r23, X
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String8endsWithERKS_+0x28>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
  28:	24 1b       	sub	r18, r20
  2a:	35 0b       	sbc	r19, r21
  2c:	82 0f       	add	r24, r18
  2e:	93 1f       	adc	r25, r19
  30:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8endsWithERKS_>
  34:	9c 01       	movw	r18, r24
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	23 2b       	or	r18, r19
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZNK6String8endsWithERKS_+0x3c>
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	08 95       	ret
  40:	80 e0       	ldi	r24, 0x00	; 0
}
  42:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

00000000 <_ZNK6String6equalsEPKc>:
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
   0:	dc 01       	movw	r26, r24
   2:	fb 01       	movw	r30, r22
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
   4:	14 96       	adiw	r26, 0x04	; 4
   6:	8d 91       	ld	r24, X+
   8:	9c 91       	ld	r25, X
   a:	15 97       	sbiw	r26, 0x05	; 5
   c:	89 2b       	or	r24, r25
   e:	01 f4       	brne	.+0      	; 0x10 <_ZNK6String6equalsEPKc+0x10>
  10:	61 15       	cp	r22, r1
  12:	71 05       	cpc	r23, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6equalsEPKc+0x16>
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	80 81       	ld	r24, Z
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZNK6String6equalsEPKc+0x1c>
  1c:	0d 90       	ld	r0, X+
  1e:	bc 91       	ld	r27, X
  20:	a0 2d       	mov	r26, r0
	if (cstr == NULL) return buffer[0] == 0;
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String6equalsEPKc+0x28>
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	8c 91       	ld	r24, X
  2c:	88 23       	and	r24, r24
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZNK6String6equalsEPKc+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZNK6String6equalsEPKc+0x32>
	return strcmp(buffer, cstr) == 0;
  32:	cd 01       	movw	r24, r26
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsEPKc>
  38:	9c 01       	movw	r18, r24
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	23 2b       	or	r18, r19
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZNK6String6equalsEPKc+0x40>
  40:	91 e0       	ldi	r25, 0x01	; 1
}
  42:	89 2f       	mov	r24, r25
  44:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

00000000 <_ZNK6String9compareToERKS_>:

/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	9c 01       	movw	r18, r24
   6:	fb 01       	movw	r30, r22
{
	if (!buffer || !s.buffer) {
   8:	ec 01       	movw	r28, r24
   a:	a8 81       	ld	r26, Y
   c:	b9 81       	ldd	r27, Y+1	; 0x01
   e:	10 97       	sbiw	r26, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String9compareToERKS_+0x12>
  12:	60 81       	ld	r22, Z
  14:	71 81       	ldd	r23, Z+1	; 0x01
  16:	61 15       	cp	r22, r1
  18:	71 05       	cpc	r23, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
  1c:	c0 81       	ld	r28, Z
  1e:	d1 81       	ldd	r29, Z+1	; 0x01
  20:	20 97       	sbiw	r28, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZNK6String9compareToERKS_+0x24>
  24:	84 81       	ldd	r24, Z+4	; 0x04
  26:	95 81       	ldd	r25, Z+5	; 0x05
  28:	89 2b       	or	r24, r25
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String9compareToERKS_+0x2c>
  2c:	88 81       	ld	r24, Y
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	22 27       	eor	r18, r18
  32:	33 27       	eor	r19, r19
  34:	28 1b       	sub	r18, r24
  36:	39 0b       	sbc	r19, r25
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZNK6String9compareToERKS_+0x3a>
		if (buffer && len > 0) return *(unsigned char *)buffer;
  3a:	10 97       	sbiw	r26, 0x00	; 0
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZNK6String9compareToERKS_+0x3e>
  3e:	f9 01       	movw	r30, r18
  40:	84 81       	ldd	r24, Z+4	; 0x04
  42:	95 81       	ldd	r25, Z+5	; 0x05
  44:	89 2b       	or	r24, r25
  46:	01 f0       	breq	.+0      	; 0x48 <_ZNK6String9compareToERKS_+0x48>
  48:	8c 91       	ld	r24, X
  4a:	28 2f       	mov	r18, r24
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZNK6String9compareToERKS_+0x50>
		return 0;
	}
	return strcmp(buffer, s.buffer);
  50:	cd 01       	movw	r24, r26
  52:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9compareToERKS_>
  56:	9c 01       	movw	r18, r24
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZNK6String9compareToERKS_+0x5a>
  5a:	20 e0       	ldi	r18, 0x00	; 0
  5c:	30 e0       	ldi	r19, 0x00	; 0
}
  5e:	c9 01       	movw	r24, r18
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

00000000 <_ZNK6StringgeERKS_>:
	return compareTo(rhs) <= 0;
}

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgeERKS_>
   4:	89 2f       	mov	r24, r25
   6:	80 95       	com	r24
}
   8:	88 1f       	adc	r24, r24
   a:	88 27       	eor	r24, r24
   c:	88 1f       	adc	r24, r24
   e:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

00000000 <_ZNK6StringleERKS_>:
	return compareTo(rhs) > 0;
}

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringleERKS_>
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f0       	brlt	.+0      	; 0xc <_ZNK6StringleERKS_+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
}
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

00000000 <_ZNK6StringgtERKS_>:
	return compareTo(rhs) < 0;
}

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgtERKS_>
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f4       	brge	.+0      	; 0xc <_ZNK6StringgtERKS_+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
}
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

00000000 <_ZNK6StringltERKS_>:
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringltERKS_>
}
   4:	89 2f       	mov	r24, r25
   6:	88 1f       	adc	r24, r24
   8:	88 27       	eor	r24, r24
   a:	88 1f       	adc	r24, r24
   c:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

00000000 <_ZNK6String6equalsERKS_>:
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	return (len == s2.len && compareTo(s2) == 0);
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	28 17       	cp	r18, r24
  12:	39 07       	cpc	r19, r25
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6equalsERKS_+0x16>
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZNK6String6equalsERKS_+0x1a>
  1a:	cf 01       	movw	r24, r30
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsERKS_>
  20:	20 e0       	ldi	r18, 0x00	; 0
  22:	89 2b       	or	r24, r25
  24:	01 f4       	brne	.+0      	; 0x26 <_ZNK6String6equalsERKS_+0x26>
  26:	21 e0       	ldi	r18, 0x01	; 1
}
  28:	82 2f       	mov	r24, r18
  2a:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

00000000 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   4:	14 96       	adiw	r26, 0x04	; 4
   6:	2d 91       	ld	r18, X+
   8:	3c 91       	ld	r19, X
   a:	15 97       	sbiw	r26, 0x05	; 5
   c:	84 81       	ldd	r24, Z+4	; 0x04
   e:	95 81       	ldd	r25, Z+5	; 0x05
  10:	82 1b       	sub	r24, r18
  12:	93 0b       	sbc	r25, r19
  14:	84 17       	cp	r24, r20
  16:	95 07       	cpc	r25, r21
  18:	00 f0       	brcs	.+0      	; 0x1a <_ZNK6String10startsWithERKS_j+0x1a>
  1a:	80 81       	ld	r24, Z
  1c:	91 81       	ldd	r25, Z+1	; 0x01
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZNK6String10startsWithERKS_j+0x22>
  22:	6d 91       	ld	r22, X+
  24:	7c 91       	ld	r23, X
  26:	61 15       	cp	r22, r1
  28:	71 05       	cpc	r23, r1
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String10startsWithERKS_j+0x2c>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
  2c:	84 0f       	add	r24, r20
  2e:	95 1f       	adc	r25, r21
  30:	a9 01       	movw	r20, r18
  32:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_j>
  36:	9c 01       	movw	r18, r24
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	23 2b       	or	r18, r19
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZNK6String10startsWithERKS_j+0x3e>
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	08 95       	ret
  42:	80 e0       	ldi	r24, 0x00	; 0
}
  44:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

00000000 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	28 17       	cp	r18, r24
  12:	39 07       	cpc	r19, r25
  14:	00 f4       	brcc	.+0      	; 0x16 <_ZNK6String10startsWithERKS_+0x16>
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	08 95       	ret
	return startsWith(s2, 0);
  1a:	cf 01       	movw	r24, r30
  1c:	40 e0       	ldi	r20, 0x00	; 0
  1e:	50 e0       	ldi	r21, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_>
}
  24:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000000 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c:	6f 5f       	subi	r22, 0xFF	; 255
   e:	7f 4f       	sbci	r23, 0xFF	; 255
  10:	88 81       	ld	r24, Y
  12:	99 81       	ldd	r25, Y+1	; 0x01
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String12changeBufferEj>
	if (newbuffer) {
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String12changeBufferEj+0x1c>
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN6String12changeBufferEj+0x20>
		buffer = newbuffer;
  20:	99 83       	std	Y+1, r25	; 0x01
  22:	88 83       	st	Y, r24
		capacity = maxStrLen;
  24:	1b 83       	std	Y+3, r17	; 0x03
  26:	0a 83       	std	Y+2, r16	; 0x02
  28:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

00000000 <_ZN6String7replaceERKS_S1_>:
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	5c 01       	movw	r10, r24
  26:	2b 01       	movw	r4, r22
  28:	4a 01       	movw	r8, r20
{
	if (len == 0 || find.len == 0) return;
  2a:	dc 01       	movw	r26, r24
  2c:	14 96       	adiw	r26, 0x04	; 4
  2e:	0d 91       	ld	r16, X+
  30:	1c 91       	ld	r17, X
  32:	15 97       	sbiw	r26, 0x05	; 5
  34:	01 15       	cp	r16, r1
  36:	11 05       	cpc	r17, r1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String7replaceERKS_S1_+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6String7replaceERKS_S1_+0x3c>
  3c:	fb 01       	movw	r30, r22
  3e:	c4 80       	ldd	r12, Z+4	; 0x04
  40:	d5 80       	ldd	r13, Z+5	; 0x05
  42:	c1 14       	cp	r12, r1
  44:	d1 04       	cpc	r13, r1
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String7replaceERKS_S1_+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6String7replaceERKS_S1_+0x4a>
	int diff = replace.len - find.len;
  4a:	da 01       	movw	r26, r20
  4c:	14 96       	adiw	r26, 0x04	; 4
  4e:	6d 90       	ld	r6, X+
  50:	7c 90       	ld	r7, X
  52:	15 97       	sbiw	r26, 0x05	; 5
  54:	6c 18       	sub	r6, r12
  56:	7d 08       	sbc	r7, r13
	char *readFrom = buffer;
  58:	fc 01       	movw	r30, r24
  5a:	e0 80       	ld	r14, Z
  5c:	f1 80       	ldd	r15, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
  5e:	61 14       	cp	r6, r1
  60:	71 04       	cpc	r7, r1
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN6String7replaceERKS_S1_+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN6String7replaceERKS_S1_+0x66>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
  66:	d4 01       	movw	r26, r8
  68:	6c 91       	ld	r22, X
  6a:	11 96       	adiw	r26, 0x01	; 1
  6c:	7c 91       	ld	r23, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	14 96       	adiw	r26, 0x04	; 4
  72:	4d 91       	ld	r20, X+
  74:	5c 91       	ld	r21, X
  76:	15 97       	sbiw	r26, 0x05	; 5
  78:	8c 2f       	mov	r24, r28
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			readFrom = foundAt + replace.len;
  7e:	f4 01       	movw	r30, r8
  80:	e4 80       	ldd	r14, Z+4	; 0x04
  82:	f5 80       	ldd	r15, Z+5	; 0x05
  84:	ec 0e       	add	r14, r28
  86:	fd 1e       	adc	r15, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
  88:	d2 01       	movw	r26, r4
  8a:	6d 91       	ld	r22, X+
  8c:	7c 91       	ld	r23, X
  8e:	c7 01       	movw	r24, r14
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  94:	ec 01       	movw	r28, r24
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	01 f4       	brne	.+0      	; 0x9a <_ZN6String7replaceERKS_S1_+0x9a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_ZN6String7replaceERKS_S1_+0x9c>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
  9c:	77 fe       	sbrs	r7, 7
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6String7replaceERKS_S1_+0xa0>
  a0:	67 01       	movw	r12, r14
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN6String7replaceERKS_S1_+0xa4>
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
  a4:	fb 01       	movw	r30, r22
  a6:	20 80       	ld	r2, Z
  a8:	31 80       	ldd	r3, Z+1	; 0x01
  aa:	e8 01       	movw	r28, r16
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN6String7replaceERKS_S1_+0xae>
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
  ae:	8e 01       	movw	r16, r28
  b0:	0e 19       	sub	r16, r14
  b2:	1f 09       	sbc	r17, r15
			memcpy(writeTo, readFrom, n);
  b4:	c6 01       	movw	r24, r12
  b6:	b7 01       	movw	r22, r14
  b8:	a8 01       	movw	r20, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			writeTo += n;
  be:	0c 0d       	add	r16, r12
  c0:	1d 1d       	adc	r17, r13
			memcpy(writeTo, replace.buffer, replace.len);
  c2:	d4 01       	movw	r26, r8
  c4:	6c 91       	ld	r22, X
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	7c 91       	ld	r23, X
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	14 96       	adiw	r26, 0x04	; 4
  ce:	4d 91       	ld	r20, X+
  d0:	5c 91       	ld	r21, X
  d2:	15 97       	sbiw	r26, 0x05	; 5
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			writeTo += replace.len;
  da:	f4 01       	movw	r30, r8
  dc:	c4 80       	ldd	r12, Z+4	; 0x04
  de:	d5 80       	ldd	r13, Z+5	; 0x05
  e0:	c0 0e       	add	r12, r16
  e2:	d1 1e       	adc	r13, r17
			readFrom = foundAt + find.len;
  e4:	d2 01       	movw	r26, r4
  e6:	14 96       	adiw	r26, 0x04	; 4
  e8:	ed 90       	ld	r14, X+
  ea:	fc 90       	ld	r15, X
  ec:	15 97       	sbiw	r26, 0x05	; 5
  ee:	ec 0e       	add	r14, r28
  f0:	fd 1e       	adc	r15, r29
			len += diff;
  f2:	f5 01       	movw	r30, r10
  f4:	84 81       	ldd	r24, Z+4	; 0x04
  f6:	95 81       	ldd	r25, Z+5	; 0x05
  f8:	86 0d       	add	r24, r6
  fa:	97 1d       	adc	r25, r7
  fc:	95 83       	std	Z+5, r25	; 0x05
  fe:	84 83       	std	Z+4, r24	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 100:	d2 01       	movw	r26, r4
 102:	6d 91       	ld	r22, X+
 104:	7c 91       	ld	r23, X
 106:	c7 01       	movw	r24, r14
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 10c:	ec 01       	movw	r28, r24
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	01 f4       	brne	.+0      	; 0x112 <_ZN6String7replaceERKS_S1_+0x112>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
 112:	c6 01       	movw	r24, r12
 114:	b7 01       	movw	r22, r14
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_ZN6String7replaceERKS_S1_+0x11c>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
 11c:	7b 01       	movw	r14, r22
 11e:	ec 0c       	add	r14, r12
 120:	fd 1c       	adc	r15, r13
			size += diff;
 122:	c6 0d       	add	r28, r6
 124:	d7 1d       	adc	r29, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 126:	c7 01       	movw	r24, r14
 128:	b1 01       	movw	r22, r2
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 12e:	bc 01       	movw	r22, r24
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	01 f4       	brne	.+0      	; 0x134 <_ZN6String7replaceERKS_S1_+0x134>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
 134:	c0 17       	cp	r28, r16
 136:	d1 07       	cpc	r29, r17
 138:	01 f4       	brne	.+0      	; 0x13a <_ZN6String7replaceERKS_S1_+0x13a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_ZN6String7replaceERKS_S1_+0x13c>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
 13c:	f5 01       	movw	r30, r10
 13e:	82 81       	ldd	r24, Z+2	; 0x02
 140:	93 81       	ldd	r25, Z+3	; 0x03
 142:	8c 17       	cp	r24, r28
 144:	9d 07       	cpc	r25, r29
 146:	00 f0       	brcs	.+0      	; 0x148 <_ZN6String7replaceERKS_S1_+0x148>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_ZN6String7replaceERKS_S1_+0x14a>
 14a:	c5 01       	movw	r24, r10
 14c:	be 01       	movw	r22, r28
 14e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 152:	88 23       	and	r24, r24
 154:	01 f4       	brne	.+0      	; 0x156 <_ZN6String7replaceERKS_S1_+0x156>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN6String7replaceERKS_S1_+0x158>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 158:	c5 01       	movw	r24, r10
 15a:	b2 01       	movw	r22, r4
 15c:	a9 01       	movw	r20, r18
 15e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 162:	ec 01       	movw	r28, r24
 164:	97 fd       	sbrc	r25, 7
 166:	00 c0       	rjmp	.+0      	; 0x168 <_ZN6String7replaceERKS_S1_+0x168>
			readFrom = buffer + index + find.len;
 168:	d5 01       	movw	r26, r10
 16a:	6d 91       	ld	r22, X+
 16c:	7c 91       	ld	r23, X
 16e:	11 97       	sbiw	r26, 0x01	; 1
 170:	f2 01       	movw	r30, r4
 172:	84 81       	ldd	r24, Z+4	; 0x04
 174:	95 81       	ldd	r25, Z+5	; 0x05
 176:	8c 0f       	add	r24, r28
 178:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 17a:	68 0f       	add	r22, r24
 17c:	79 1f       	adc	r23, r25
 17e:	14 96       	adiw	r26, 0x04	; 4
 180:	4d 91       	ld	r20, X+
 182:	5c 91       	ld	r21, X
 184:	15 97       	sbiw	r26, 0x05	; 5
 186:	48 1b       	sub	r20, r24
 188:	59 0b       	sbc	r21, r25
 18a:	cb 01       	movw	r24, r22
 18c:	86 0d       	add	r24, r6
 18e:	97 1d       	adc	r25, r7
 190:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			len += diff;
 194:	d5 01       	movw	r26, r10
 196:	14 96       	adiw	r26, 0x04	; 4
 198:	8d 91       	ld	r24, X+
 19a:	9c 91       	ld	r25, X
 19c:	15 97       	sbiw	r26, 0x05	; 5
 19e:	86 0d       	add	r24, r6
 1a0:	97 1d       	adc	r25, r7
 1a2:	15 96       	adiw	r26, 0x05	; 5
 1a4:	9c 93       	st	X, r25
 1a6:	8e 93       	st	-X, r24
 1a8:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
 1aa:	ed 91       	ld	r30, X+
 1ac:	fc 91       	ld	r31, X
 1ae:	11 97       	sbiw	r26, 0x01	; 1
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
 1b6:	2d 91       	ld	r18, X+
 1b8:	3c 91       	ld	r19, X
 1ba:	2c 0f       	add	r18, r28
 1bc:	3d 1f       	adc	r19, r29
 1be:	f4 01       	movw	r30, r8
 1c0:	60 81       	ld	r22, Z
 1c2:	71 81       	ldd	r23, Z+1	; 0x01
 1c4:	44 81       	ldd	r20, Z+4	; 0x04
 1c6:	55 81       	ldd	r21, Z+5	; 0x05
 1c8:	c9 01       	movw	r24, r18
 1ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			index--;
 1ce:	9e 01       	movw	r18, r28
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_ZN6String7replaceERKS_S1_+0x1d2>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
 1d2:	d5 01       	movw	r26, r10
 1d4:	14 96       	adiw	r26, 0x04	; 4
 1d6:	2d 91       	ld	r18, X+
 1d8:	3c 91       	ld	r19, X
 1da:	15 97       	sbiw	r26, 0x05	; 5
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 1e0:	37 ff       	sbrs	r19, 7
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_ZN6String7replaceERKS_S1_+0x1e4>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	9f 90       	pop	r9
 1fa:	8f 90       	pop	r8
 1fc:	7f 90       	pop	r7
 1fe:	6f 90       	pop	r6
 200:	5f 90       	pop	r5
 202:	4f 90       	pop	r4
 204:	3f 90       	pop	r3
 206:	2f 90       	pop	r2
 208:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000000 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	89 2b       	or	r24, r25
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String7reserveEj+0xe>
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	9b 81       	ldd	r25, Y+3	; 0x03
  12:	86 17       	cp	r24, r22
  14:	97 07       	cpc	r25, r23
  16:	00 f4       	brcc	.+0      	; 0x18 <_ZN6String7reserveEj+0x18>
	if (changeBuffer(size)) {
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7reserveEj>
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String7reserveEj+0x22>
		if (len == 0) buffer[0] = 0;
  22:	8c 81       	ldd	r24, Y+4	; 0x04
  24:	9d 81       	ldd	r25, Y+5	; 0x05
  26:	89 2b       	or	r24, r25
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6String7reserveEj+0x2a>
  2a:	e8 81       	ld	r30, Y
  2c:	f9 81       	ldd	r31, Y+1	; 0x01
  2e:	10 82       	st	Z, r1
  30:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKcj:

00000000 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
  10:	6c 81       	ldd	r22, Y+4	; 0x04
  12:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
  14:	e1 14       	cp	r14, r1
  16:	f1 04       	cpc	r15, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6String6concatEPKcj+0x1a>
	if (length == 0) return 1;
  1a:	41 15       	cp	r20, r1
  1c:	51 05       	cpc	r21, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6String6concatEPKcj+0x20>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
  20:	8a 01       	movw	r16, r20
  22:	06 0f       	add	r16, r22
  24:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6String6concatEPKcj+0x30>
	strcpy(buffer + len, cstr);
  30:	88 81       	ld	r24, Y
  32:	99 81       	ldd	r25, Y+1	; 0x01
  34:	2c 81       	ldd	r18, Y+4	; 0x04
  36:	3d 81       	ldd	r19, Y+5	; 0x05
  38:	82 0f       	add	r24, r18
  3a:	93 1f       	adc	r25, r19
  3c:	b7 01       	movw	r22, r14
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
	len = newlen;
  42:	1d 83       	std	Y+5, r17	; 0x05
  44:	0c 83       	std	Y+4, r16	; 0x04
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6String6concatEPKcj+0x4a>
	return 1;
  4a:	80 e0       	ldi	r24, 0x00	; 0
}
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

00000000 <_ZN6String6concatEm>:
	char buf[12];
	ltoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned long num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2b 97       	sbiw	r28, 0x0b	; 11
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
{
	char buf[11];
	ultoa(num, buf, 10);
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
	return concat(buf, strlen(buf));
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEm+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	e0 1b       	sub	r30, r16
  3e:	f1 0b       	sbc	r31, r17
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	af 01       	movw	r20, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
}
  4a:	2b 96       	adiw	r28, 0x0b	; 11
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

00000000 <_ZN6String6concatEl>:
	char buf[6];
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2c 97       	sbiw	r28, 0x0c	; 12
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
{
	char buf[12];
	ltoa(num, buf, 10);
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
	return concat(buf, strlen(buf));
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEl+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	e0 1b       	sub	r30, r16
  3e:	f1 0b       	sbc	r31, r17
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	af 01       	movw	r20, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
}
  4a:	2c 96       	adiw	r28, 0x0c	; 12
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

00000000 <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEj+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEj+0x10>
  10:	00 d0       	rcall	.+0      	; 0x12 <_ZN6String6concatEj+0x12>
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
  16:	7c 01       	movw	r14, r24
  18:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
  1a:	8e 01       	movw	r16, r28
  1c:	0f 5f       	subi	r16, 0xFF	; 255
  1e:	1f 4f       	sbci	r17, 0xFF	; 255
  20:	b8 01       	movw	r22, r16
  22:	4a e0       	ldi	r20, 0x0A	; 10
  24:	50 e0       	ldi	r21, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
	return concat(buf, strlen(buf));
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEj+0x32>
  32:	31 97       	sbiw	r30, 0x01	; 1
  34:	e0 1b       	sub	r30, r16
  36:	f1 0b       	sbc	r31, r17
  38:	c7 01       	movw	r24, r14
  3a:	b8 01       	movw	r22, r16
  3c:	af 01       	movw	r20, r30
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
}
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

00000000 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	27 97       	sbiw	r28, 0x07	; 7
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
  20:	8e 01       	movw	r16, r28
  22:	0f 5f       	subi	r16, 0xFF	; 255
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	b8 01       	movw	r22, r16
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
	return concat(buf, strlen(buf));
  30:	f8 01       	movw	r30, r16
  32:	01 90       	ld	r0, Z+
  34:	00 20       	and	r0, r0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6String6concatEi+0x38>
  38:	31 97       	sbiw	r30, 0x01	; 1
  3a:	e0 1b       	sub	r30, r16
  3c:	f1 0b       	sbc	r31, r17
  3e:	c7 01       	movw	r24, r14
  40:	b8 01       	movw	r22, r16
  42:	af 01       	movw	r20, r30
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
}
  48:	27 96       	adiw	r28, 0x07	; 7
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

00000000 <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEh+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEh+0x10>
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	8e 01       	movw	r16, r28
  1c:	0f 5f       	subi	r16, 0xFF	; 255
  1e:	1f 4f       	sbci	r17, 0xFF	; 255
  20:	b8 01       	movw	r22, r16
  22:	4a e0       	ldi	r20, 0x0A	; 10
  24:	50 e0       	ldi	r21, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
	return concat(buf, strlen(buf));
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEh+0x32>
  32:	31 97       	sbiw	r30, 0x01	; 1
  34:	e0 1b       	sub	r30, r16
  36:	f1 0b       	sbc	r31, r17
  38:	c7 01       	movw	r24, r14
  3a:	b8 01       	movw	r22, r16
  3c:	af 01       	movw	r20, r30
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
}
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	ff 90       	pop	r15
  54:	ef 90       	pop	r14
  56:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

00000000 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String6concatEc+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
   a:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
   c:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
   e:	be 01       	movw	r22, r28
  10:	6f 5f       	subi	r22, 0xFF	; 255
  12:	7f 4f       	sbci	r23, 0xFF	; 255
  14:	41 e0       	ldi	r20, 0x01	; 1
  16:	50 e0       	ldi	r21, 0x00	; 0
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEc>
}
  1c:	0f 90       	pop	r0
  1e:	0f 90       	pop	r0
  20:	cf 91       	pop	r28
  22:	df 91       	pop	r29
  24:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKc:

00000000 <_ZN6String6concatEPKc>:
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	01 f4       	brne	.+0      	; 0x6 <_ZN6String6concatEPKc+0x6>
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	08 95       	ret
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   a:	db 01       	movw	r26, r22
   c:	0d 90       	ld	r0, X+
   e:	00 20       	and	r0, r0
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String6concatEPKc+0x12>
  12:	11 97       	sbiw	r26, 0x01	; 1
  14:	a6 1b       	sub	r26, r22
  16:	b7 0b       	sbc	r27, r23
  18:	ad 01       	movw	r20, r26
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKc>
}
  1e:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

00000000 <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
   0:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
   2:	60 81       	ld	r22, Z
   4:	71 81       	ldd	r23, Z+1	; 0x01
   6:	44 81       	ldd	r20, Z+4	; 0x04
   8:	55 81       	ldd	r21, Z+5	; 0x05
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatERKS_>
}
   e:	08 95       	ret

Disassembly of section .text._ZN6String10invalidateEv:

00000000 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String10invalidateEv+0xe>
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String10invalidateEv>
	buffer = NULL;
  12:	19 82       	std	Y+1, r1	; 0x01
  14:	18 82       	st	Y, r1
	capacity = len = 0;
  16:	1d 82       	std	Y+5, r1	; 0x05
  18:	1c 82       	std	Y+4, r1	; 0x04
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	1a 82       	std	Y+2, r1	; 0x02
}
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

00000000 <_ZplRK15StringSumHelperm>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperm+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

00000000 <_ZplRK15StringSumHelperl>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperl+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

00000000 <_ZplRK15StringSumHelperj>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperj+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

00000000 <_ZplRK15StringSumHelperi>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperi+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

00000000 <_ZplRK15StringSumHelperh>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperh+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

00000000 <_ZplRK15StringSumHelperc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperc+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

00000000 <_ZplRK15StringSumHelperPKc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   8:	61 15       	cp	r22, r1
   a:	71 05       	cpc	r23, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZplRK15StringSumHelperPKc+0xe>
   e:	db 01       	movw	r26, r22
  10:	0d 90       	ld	r0, X+
  12:	00 20       	and	r0, r0
  14:	01 f4       	brne	.+0      	; 0x16 <_ZplRK15StringSumHelperPKc+0x16>
  16:	11 97       	sbiw	r26, 0x01	; 1
  18:	a6 1b       	sub	r26, r22
  1a:	b7 0b       	sbc	r27, r23
  1c:	ad 01       	movw	r20, r26
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  22:	88 23       	and	r24, r24
  24:	01 f4       	brne	.+0      	; 0x26 <_ZplRK15StringSumHelperPKc+0x26>
  26:	81 2f       	mov	r24, r17
  28:	90 2f       	mov	r25, r16
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
	return a;
}
  2e:	81 2f       	mov	r24, r17
  30:	90 2f       	mov	r25, r16
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

00000000 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   a:	60 81       	ld	r22, Z
   c:	71 81       	ldd	r23, Z+1	; 0x01
   e:	44 81       	ldd	r20, Z+4	; 0x04
  10:	55 81       	ldd	r21, Z+5	; 0x05
  12:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  16:	88 23       	and	r24, r24
  18:	01 f4       	brne	.+0      	; 0x1a <_ZplRK15StringSumHelperRK6String+0x1a>
  1a:	81 2f       	mov	r24, r17
  1c:	90 2f       	mov	r25, r16
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
	return a;
}
  22:	81 2f       	mov	r24, r17
  24:	90 2f       	mov	r25, r16
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000000 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
  12:	ba 01       	movw	r22, r20
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String4copyEPKcj+0x1c>
		invalidate();
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4copyEPKcj+0x24>
		return *this;
	}
	len = length;
  24:	1d 83       	std	Y+5, r17	; 0x05
  26:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
  28:	88 81       	ld	r24, Y
  2a:	99 81       	ldd	r25, Y+1	; 0x01
  2c:	b7 01       	movw	r22, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
	return *this;
}
  32:	ce 01       	movw	r24, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN6StringC1EPKc:

00000000 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   6:	19 82       	std	Y+1, r1	; 0x01
   8:	18 82       	st	Y, r1
	capacity = 0;
   a:	1b 82       	std	Y+3, r1	; 0x03
   c:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
   e:	1d 82       	std	Y+5, r1	; 0x05
  10:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
  12:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6StringC1EPKc+0x1a>
  1a:	db 01       	movw	r26, r22
  1c:	0d 90       	ld	r0, X+
  1e:	00 20       	and	r0, r0
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6StringC1EPKc+0x22>
  22:	11 97       	sbiw	r26, 0x01	; 1
  24:	a6 1b       	sub	r26, r22
  26:	b7 0b       	sbc	r27, r23
  28:	ad 01       	movw	r20, r26
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000000 <_ZN6StringC2EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   6:	19 82       	std	Y+1, r1	; 0x01
   8:	18 82       	st	Y, r1
	capacity = 0;
   a:	1b 82       	std	Y+3, r1	; 0x03
   c:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
   e:	1d 82       	std	Y+5, r1	; 0x05
  10:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
  12:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6StringC2EPKc+0x1a>
  1a:	db 01       	movw	r26, r22
  1c:	0d 90       	ld	r0, X+
  1e:	00 20       	and	r0, r0
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6StringC2EPKc+0x22>
  22:	11 97       	sbiw	r26, 0x01	; 1
  24:	a6 1b       	sub	r26, r22
  26:	b7 0b       	sbc	r27, r23
  28:	ad 01       	movw	r20, r26
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2EPKc>
}
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZN6StringaSEPKc:

00000000 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
   8:	61 15       	cp	r22, r1
   a:	71 05       	cpc	r23, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSEPKc+0xe>
   e:	db 01       	movw	r26, r22
  10:	0d 90       	ld	r0, X+
  12:	00 20       	and	r0, r0
  14:	01 f4       	brne	.+0      	; 0x16 <_ZN6StringaSEPKc+0x16>
  16:	11 97       	sbiw	r26, 0x01	; 1
  18:	a6 1b       	sub	r26, r22
  1a:	b7 0b       	sbc	r27, r23
  1c:	ad 01       	movw	r20, r26
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6StringaSEPKc+0x24>
	else invalidate();
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
	
	return *this;
}
  28:	81 2f       	mov	r24, r17
  2a:	90 2f       	mov	r25, r16
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	08 95       	ret

Disassembly of section .text._ZN6StringC1Emh:

00000000 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
	capacity = 0;
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2c:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
}
  4a:	a1 96       	adiw	r28, 0x21	; 33
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

00000000 <_ZN6StringC2Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
	capacity = 0;
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2c:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
}
  4a:	a1 96       	adiw	r28, 0x21	; 33
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC1Elh:

00000000 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a2 97       	sbiw	r28, 0x22	; 34
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
	capacity = 0;
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2c:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
}
  4a:	a2 96       	adiw	r28, 0x22	; 34
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

00000000 <_ZN6StringC2Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a2 97       	sbiw	r28, 0x22	; 34
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
	capacity = 0;
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2c:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
}
  4a:	a2 96       	adiw	r28, 0x22	; 34
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ejh:

00000000 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	61 97       	sbiw	r28, 0x11	; 17
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
	*this = buf;
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
}
  48:	61 96       	adiw	r28, 0x11	; 17
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

00000000 <_ZN6StringC2Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	61 97       	sbiw	r28, 0x11	; 17
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
	*this = buf;
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
}
  48:	61 96       	adiw	r28, 0x11	; 17
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC1Eih:

00000000 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	62 97       	sbiw	r28, 0x12	; 18
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
	*this = buf;
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
}
  48:	62 96       	adiw	r28, 0x12	; 18
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

00000000 <_ZN6StringC2Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	62 97       	sbiw	r28, 0x12	; 18
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
	*this = buf;
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
}
  48:	62 96       	adiw	r28, 0x12	; 18
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ehh:

00000000 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	b7 01       	movw	r22, r14
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
}
  4a:	29 96       	adiw	r28, 0x09	; 9
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

00000000 <_ZN6StringC2Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	b7 01       	movw	r22, r14
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
}
  4a:	29 96       	adiw	r28, 0x09	; 9
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ec:

00000000 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC1Ec+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   c:	11 82       	std	Z+1, r1	; 0x01
   e:	10 82       	st	Z, r1
	capacity = 0;
  10:	13 82       	std	Z+3, r1	; 0x03
  12:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  14:	15 82       	std	Z+5, r1	; 0x05
  16:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  18:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
  1a:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
  1c:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
  1e:	be 01       	movw	r22, r28
  20:	6f 5f       	subi	r22, 0xFF	; 255
  22:	7f 4f       	sbci	r23, 0xFF	; 255
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
}
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	cf 91       	pop	r28
  2e:	df 91       	pop	r29
  30:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

00000000 <_ZN6StringC2Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC2Ec+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   c:	11 82       	std	Z+1, r1	; 0x01
   e:	10 82       	st	Z, r1
	capacity = 0;
  10:	13 82       	std	Z+3, r1	; 0x03
  12:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  14:	15 82       	std	Z+5, r1	; 0x05
  16:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  18:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
  1a:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
  1c:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
  1e:	be 01       	movw	r22, r28
  20:	6f 5f       	subi	r22, 0xFF	; 255
  22:	7f 4f       	sbci	r23, 0xFF	; 255
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ec>
}
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	cf 91       	pop	r28
  2e:	df 91       	pop	r29
  30:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEjj:

00000000 <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	08 2f       	mov	r16, r24
  14:	b9 2e       	mov	r11, r25
  16:	6b 01       	movw	r12, r22
  18:	7a 01       	movw	r14, r20
  1a:	e9 01       	movw	r28, r18
{
	if (left > right) {
  1c:	24 17       	cp	r18, r20
  1e:	35 07       	cpc	r19, r21
  20:	00 f4       	brcc	.+0      	; 0x22 <_ZNK6String9substringEjj+0x22>
  22:	ea 01       	movw	r28, r20
  24:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
  26:	80 2f       	mov	r24, r16
  28:	9b 2d       	mov	r25, r11
  2a:	60 e0       	ldi	r22, 0x00	; 0
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
	if (left > len) return out;
  32:	d6 01       	movw	r26, r12
  34:	14 96       	adiw	r26, 0x04	; 4
  36:	8d 91       	ld	r24, X+
  38:	9c 91       	ld	r25, X
  3a:	15 97       	sbiw	r26, 0x05	; 5
  3c:	8e 15       	cp	r24, r14
  3e:	9f 05       	cpc	r25, r15
  40:	00 f0       	brcs	.+0      	; 0x42 <_ZNK6String9substringEjj+0x42>
  42:	8c 17       	cp	r24, r28
  44:	9d 07       	cpc	r25, r29
  46:	00 f4       	brcc	.+0      	; 0x48 <_ZNK6String9substringEjj+0x48>
  48:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
  4a:	d6 01       	movw	r26, r12
  4c:	ed 91       	ld	r30, X+
  4e:	fc 91       	ld	r31, X
  50:	11 97       	sbiw	r26, 0x01	; 1
  52:	ec 0f       	add	r30, r28
  54:	fd 1f       	adc	r31, r29
  56:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
  58:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
  5a:	6d 91       	ld	r22, X+
  5c:	7c 91       	ld	r23, X
  5e:	6e 0d       	add	r22, r14
  60:	7f 1d       	adc	r23, r15
  62:	80 2f       	mov	r24, r16
  64:	9b 2d       	mov	r25, r11
  66:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
	buffer[right] = temp;  //restore character
  6a:	d6 01       	movw	r26, r12
  6c:	ed 91       	ld	r30, X+
  6e:	fc 91       	ld	r31, X
  70:	ec 0f       	add	r30, r28
  72:	fd 1f       	adc	r31, r29
  74:	10 83       	st	Z, r17
	return out;
}
  76:	80 2f       	mov	r24, r16
  78:	9b 2d       	mov	r25, r11
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	ef 90       	pop	r14
  86:	df 90       	pop	r13
  88:	cf 90       	pop	r12
  8a:	bf 90       	pop	r11
  8c:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEj:

00000000 <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	fb 01       	movw	r30, r22
{
	return substring(left, len);
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEj>
}
  10:	c8 01       	movw	r24, r16
  12:	1f 91       	pop	r17
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

00000000 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
   8:	86 17       	cp	r24, r22
   a:	97 07       	cpc	r25, r23
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSERKS_+0xe>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6StringaSERKS_+0x18>
  18:	44 81       	ldd	r20, Z+4	; 0x04
  1a:	55 81       	ldd	r21, Z+5	; 0x05
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringaSERKS_+0x22>
	else invalidate();
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
	
	return *this;
}
  26:	ce 01       	movw	r24, r28
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text._ZN6StringC1ERKS_:

00000000 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
   0:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
	capacity = 0;
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
   e:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1ERKS_>
}
  14:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00000000 <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
   0:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
	capacity = 0;
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
   e:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2ERKS_>
}
  14:	08 95       	ret

Disassembly of section .text._ZN6StringD1Ev:

00000000 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD1Ev>
}
   a:	08 95       	ret

Disassembly of section .text._ZN6StringD2Ev:

00000000 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD2Ev>
}
   a:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 0000007a  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014b  00000000  00000000  000000ae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000001c1  00000000  00000000  000001f9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.main    0000001e  00000000  00000000  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .debug_frame  00000020  00000000  00000000  000003d8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_pubnames 0000001b  00000000  00000000  000003f8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_aranges 00000020  00000000  00000000  00000413  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000433  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    00000102  00000000  00000000  0000044b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.main:

00000000 <main>:
#include <Arduino.h>

int main(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
{
	init();
   4:	0e 94 00 00 	call	0	; 0x0 <main>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
   8:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   c:	c0 e0       	ldi	r28, 0x00	; 0
   e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  10:	0e 94 00 00 	call	0	; 0x0 <main>
		if (serialEventRun) serialEventRun();
  14:	20 97       	sbiw	r28, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <main+0x18>
  18:	0e 94 00 00 	call	0	; 0x0 <main>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <__zero_reg__+0x1d>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000000dd  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013b  00000000  00000000  00000111  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000001c4  00000000  00000000  0000024c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.__cxa_guard_acquire 00000014  00000000  00000000  00000410  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__cxa_guard_release 00000008  00000000  00000000  00000424  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.__cxa_guard_abort 00000002  00000000  00000000  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.__cxa_pure_virtual 00000002  00000000  00000000  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._ZdlPv  00000006  00000000  00000000  00000430  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._Znwj   00000006  00000000  00000000  00000436  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .debug_frame  00000070  00000000  00000000  0000043c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_loc    00000080  00000000  00000000  000004ac  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_pubnames 00000094  00000000  00000000  0000052c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_aranges 00000048  00000000  00000000  000005c0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  00000608  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 17 .debug_str    00000116  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.__cxa_guard_acquire:

00000000 <__cxa_guard_acquire>:
void operator delete(void * ptr)
{
  free(ptr);
} 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   0:	fc 01       	movw	r30, r24
   2:	20 e0       	ldi	r18, 0x00	; 0
   4:	30 e0       	ldi	r19, 0x00	; 0
   6:	80 81       	ld	r24, Z
   8:	88 23       	and	r24, r24
   a:	01 f4       	brne	.+0      	; 0xc <__cxa_guard_acquire+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
   e:	30 e0       	ldi	r19, 0x00	; 0
  10:	c9 01       	movw	r24, r18
  12:	08 95       	ret

Disassembly of section .text.__cxa_guard_release:

00000000 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   0:	fc 01       	movw	r30, r24
   2:	81 e0       	ldi	r24, 0x01	; 1
   4:	80 83       	st	Z, r24
   6:	08 95       	ret

Disassembly of section .text.__cxa_guard_abort:

00000000 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
   0:	08 95       	ret

Disassembly of section .text.__cxa_pure_virtual:

00000000 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
   0:	08 95       	ret

Disassembly of section .text._ZdlPv:

00000000 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZdlPv>
} 
   4:	08 95       	ret

Disassembly of section .text._Znwj:

00000000 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
   0:	0e 94 00 00 	call	0	; 0x0 <_Znwj>
}
   4:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 0000017d  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000319  00000000  00000000  000001b1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000407  00000000  00000000  000004ca  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.__vector_16 00000090  00000000  00000000  000008d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.millis  0000001c  00000000  00000000  00000961  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.micros  0000004c  00000000  00000000  0000097d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.delay   000000b2  00000000  00000000  000009c9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.delayMicroseconds 00000014  00000000  00000000  00000a7b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.init    00000076  00000000  00000000  00000a8f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .bss.timer0_overflow_count 00000004  00000000  00000000  00000b05  2**0
                  ALLOC
 13 .bss.timer0_millis 00000004  00000000  00000000  00000b05  2**0
                  ALLOC
 14 .bss.timer0_fract 00000001  00000000  00000000  00000b05  2**0
                  ALLOC
 15 .debug_frame  00000070  00000000  00000000  00000b08  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_loc    0000016d  00000000  00000000  00000b78  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 17 .debug_pubnames 0000008d  00000000  00000000  00000ce5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 18 .debug_aranges 00000048  00000000  00000000  00000d72  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 19 .debug_ranges 00000040  00000000  00000000  00000dba  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 20 .debug_str    0000016f  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.__vector_16:

00000000 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
  14:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  16:	80 91 00 00 	lds	r24, 0x0000
  1a:	90 91 00 00 	lds	r25, 0x0000
  1e:	a0 91 00 00 	lds	r26, 0x0000
  22:	b0 91 00 00 	lds	r27, 0x0000
	unsigned char f = timer0_fract;
  26:	30 91 00 00 	lds	r19, 0x0000

	m += MILLIS_INC;
  2a:	01 96       	adiw	r24, 0x01	; 1
  2c:	a1 1d       	adc	r26, r1
  2e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
  30:	23 2f       	mov	r18, r19
  32:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
  34:	2d 37       	cpi	r18, 0x7D	; 125
  36:	00 f0       	brcs	.+0      	; 0x38 <__vector_16+0x38>
		f -= FRACT_MAX;
  38:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
  3a:	01 96       	adiw	r24, 0x01	; 1
  3c:	a1 1d       	adc	r26, r1
  3e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
  40:	20 93 00 00 	sts	0x0000, r18
	timer0_millis = m;
  44:	80 93 00 00 	sts	0x0000, r24
  48:	90 93 00 00 	sts	0x0000, r25
  4c:	a0 93 00 00 	sts	0x0000, r26
  50:	b0 93 00 00 	sts	0x0000, r27
	timer0_overflow_count++;
  54:	80 91 00 00 	lds	r24, 0x0000
  58:	90 91 00 00 	lds	r25, 0x0000
  5c:	a0 91 00 00 	lds	r26, 0x0000
  60:	b0 91 00 00 	lds	r27, 0x0000
  64:	01 96       	adiw	r24, 0x01	; 1
  66:	a1 1d       	adc	r26, r1
  68:	b1 1d       	adc	r27, r1
  6a:	80 93 00 00 	sts	0x0000, r24
  6e:	90 93 00 00 	sts	0x0000, r25
  72:	a0 93 00 00 	sts	0x0000, r26
  76:	b0 93 00 00 	sts	0x0000, r27
}
  7a:	bf 91       	pop	r27
  7c:	af 91       	pop	r26
  7e:	9f 91       	pop	r25
  80:	8f 91       	pop	r24
  82:	3f 91       	pop	r19
  84:	2f 91       	pop	r18
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

Disassembly of section .text.millis:

00000000 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
   0:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
   2:	f8 94       	cli
	m = timer0_millis;
   4:	20 91 00 00 	lds	r18, 0x0000
   8:	30 91 00 00 	lds	r19, 0x0000
   c:	40 91 00 00 	lds	r20, 0x0000
  10:	50 91 00 00 	lds	r21, 0x0000
	SREG = oldSREG;
  14:	8f bf       	out	0x3f, r24	; 63

	return m;
}
  16:	b9 01       	movw	r22, r18
  18:	ca 01       	movw	r24, r20
  1a:	08 95       	ret

Disassembly of section .text.micros:

00000000 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
   0:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
   2:	f8 94       	cli
	m = timer0_overflow_count;
   4:	20 91 00 00 	lds	r18, 0x0000
   8:	30 91 00 00 	lds	r19, 0x0000
   c:	40 91 00 00 	lds	r20, 0x0000
  10:	50 91 00 00 	lds	r21, 0x0000
#if defined(TCNT0)
	t = TCNT0;
  14:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
  16:	a8 9b       	sbis	0x15, 0	; 21
  18:	00 c0       	rjmp	.+0      	; 0x1a <micros+0x1a>
  1a:	8f 3f       	cpi	r24, 0xFF	; 255
  1c:	01 f0       	breq	.+0      	; 0x1e <micros+0x1e>
		m++;
  1e:	2f 5f       	subi	r18, 0xFF	; 255
  20:	3f 4f       	sbci	r19, 0xFF	; 255
  22:	4f 4f       	sbci	r20, 0xFF	; 255
  24:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
  26:	9f bf       	out	0x3f, r25	; 63
  28:	54 2f       	mov	r21, r20
  2a:	43 2f       	mov	r20, r19
  2c:	32 2f       	mov	r19, r18
  2e:	22 27       	eor	r18, r18
  30:	28 0f       	add	r18, r24
  32:	31 1d       	adc	r19, r1
  34:	41 1d       	adc	r20, r1
  36:	51 1d       	adc	r21, r1
  38:	82 e0       	ldi	r24, 0x02	; 2
  3a:	22 0f       	add	r18, r18
  3c:	33 1f       	adc	r19, r19
  3e:	44 1f       	adc	r20, r20
  40:	55 1f       	adc	r21, r21
  42:	8a 95       	dec	r24
  44:	01 f4       	brne	.+0      	; 0x46 <micros+0x46>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
  46:	b9 01       	movw	r22, r18
  48:	ca 01       	movw	r24, r20
  4a:	08 95       	ret

Disassembly of section .text.delay:

00000000 <delay>:

void delay(unsigned long ms)
{
   0:	9b 01       	movw	r18, r22
   2:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
   4:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
   6:	f8 94       	cli
	m = timer0_overflow_count;
   8:	80 91 00 00 	lds	r24, 0x0000
   c:	90 91 00 00 	lds	r25, 0x0000
  10:	a0 91 00 00 	lds	r26, 0x0000
  14:	b0 91 00 00 	lds	r27, 0x0000
#if defined(TCNT0)
	t = TCNT0;
  18:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
  1a:	a8 9b       	sbis	0x15, 0	; 21
  1c:	00 c0       	rjmp	.+0      	; 0x1e <delay+0x1e>
  1e:	6f 3f       	cpi	r22, 0xFF	; 255
  20:	01 f0       	breq	.+0      	; 0x22 <delay+0x22>
		m++;
  22:	01 96       	adiw	r24, 0x01	; 1
  24:	a1 1d       	adc	r26, r1
  26:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
  28:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
  2a:	ba 2f       	mov	r27, r26
  2c:	a9 2f       	mov	r26, r25
  2e:	98 2f       	mov	r25, r24
  30:	88 27       	eor	r24, r24
  32:	86 0f       	add	r24, r22
  34:	91 1d       	adc	r25, r1
  36:	a1 1d       	adc	r26, r1
  38:	b1 1d       	adc	r27, r1
  3a:	62 e0       	ldi	r22, 0x02	; 2
  3c:	88 0f       	add	r24, r24
  3e:	99 1f       	adc	r25, r25
  40:	aa 1f       	adc	r26, r26
  42:	bb 1f       	adc	r27, r27
  44:	6a 95       	dec	r22
  46:	01 f4       	brne	.+0      	; 0x48 <delay+0x48>
  48:	bc 01       	movw	r22, r24
  4a:	00 c0       	rjmp	.+0      	; 0x4c <delay+0x4c>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
  4c:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
  4e:	f8 94       	cli
	m = timer0_overflow_count;
  50:	80 91 00 00 	lds	r24, 0x0000
  54:	90 91 00 00 	lds	r25, 0x0000
  58:	a0 91 00 00 	lds	r26, 0x0000
  5c:	b0 91 00 00 	lds	r27, 0x0000
#if defined(TCNT0)
	t = TCNT0;
  60:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
  62:	a8 9b       	sbis	0x15, 0	; 21
  64:	00 c0       	rjmp	.+0      	; 0x66 <delay+0x66>
  66:	ef 3f       	cpi	r30, 0xFF	; 255
  68:	01 f0       	breq	.+0      	; 0x6a <delay+0x6a>
		m++;
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	a1 1d       	adc	r26, r1
  6e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
  70:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
  72:	ba 2f       	mov	r27, r26
  74:	a9 2f       	mov	r26, r25
  76:	98 2f       	mov	r25, r24
  78:	88 27       	eor	r24, r24
  7a:	8e 0f       	add	r24, r30
  7c:	91 1d       	adc	r25, r1
  7e:	a1 1d       	adc	r26, r1
  80:	b1 1d       	adc	r27, r1
  82:	e2 e0       	ldi	r30, 0x02	; 2
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	aa 1f       	adc	r26, r26
  8a:	bb 1f       	adc	r27, r27
  8c:	ea 95       	dec	r30
  8e:	01 f4       	brne	.+0      	; 0x90 <delay+0x90>
  90:	86 1b       	sub	r24, r22
  92:	97 0b       	sbc	r25, r23
  94:	88 5e       	subi	r24, 0xE8	; 232
  96:	93 40       	sbci	r25, 0x03	; 3
  98:	00 f0       	brcs	.+0      	; 0x9a <delay+0x9a>
			ms--;
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	30 40       	sbci	r19, 0x00	; 0
  9e:	40 40       	sbci	r20, 0x00	; 0
  a0:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
  a2:	68 51       	subi	r22, 0x18	; 24
  a4:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
  a6:	21 15       	cp	r18, r1
  a8:	31 05       	cpc	r19, r1
  aa:	41 05       	cpc	r20, r1
  ac:	51 05       	cpc	r21, r1
  ae:	01 f4       	brne	.+0      	; 0xb0 <delay+0xb0>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
  b0:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

00000000 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
   0:	01 97       	sbiw	r24, 0x01	; 1
   2:	01 f0       	breq	.+0      	; 0x4 <delayMicroseconds+0x4>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
   4:	88 0f       	add	r24, r24
   6:	99 1f       	adc	r25, r25
   8:	88 0f       	add	r24, r24
   a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
   c:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
   e:	01 97       	sbiw	r24, 0x01	; 1
  10:	01 f4       	brne	.+0      	; 0x12 <delayMicroseconds+0x12>
  12:	08 95       	ret

Disassembly of section .text.init:

00000000 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	84 b5       	in	r24, 0x24	; 36
   4:	82 60       	ori	r24, 0x02	; 2
   6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
   8:	84 b5       	in	r24, 0x24	; 36
   a:	81 60       	ori	r24, 0x01	; 1
   c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	85 b5       	in	r24, 0x25	; 37
  10:	82 60       	ori	r24, 0x02	; 2
  12:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
  14:	85 b5       	in	r24, 0x25	; 37
  16:	81 60       	ori	r24, 0x01	; 1
  18:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	ee e6       	ldi	r30, 0x6E	; 110
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	80 81       	ld	r24, Z
  20:	81 60       	ori	r24, 0x01	; 1
  22:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	e1 e8       	ldi	r30, 0x81	; 129
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	80 81       	ld	r24, Z
  2c:	82 60       	ori	r24, 0x02	; 2
  2e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	80 81       	ld	r24, Z
  32:	81 60       	ori	r24, 0x01	; 1
  34:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	e0 e8       	ldi	r30, 0x80	; 128
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 81       	ld	r24, Z
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	e1 eb       	ldi	r30, 0xB1	; 177
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	80 81       	ld	r24, Z
  46:	84 60       	ori	r24, 0x04	; 4
  48:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	e0 eb       	ldi	r30, 0xB0	; 176
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	81 60       	ori	r24, 0x01	; 1
  52:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
  54:	ea e7       	ldi	r30, 0x7A	; 122
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	84 60       	ori	r24, 0x04	; 4
  5c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
  5e:	80 81       	ld	r24, Z
  60:	82 60       	ori	r24, 0x02	; 2
  62:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
  64:	80 81       	ld	r24, Z
  66:	81 60       	ori	r24, 0x01	; 1
  68:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
  6a:	80 81       	ld	r24, Z
  6c:	80 68       	ori	r24, 0x80	; 128
  6e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
  70:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
  74:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000117  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000228  00000000  00000000  0000014b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000002b9  00000000  00000000  00000373  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.analogReference 00000006  00000000  00000000  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogRead 00000044  00000000  00000000  00000632  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.analogWrite 000000c0  00000000  00000000  00000676  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .data.analog_reference 00000001  00000000  00000000  00000736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .debug_frame  00000040  00000000  00000000  00000738  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_loc    0000013a  00000000  00000000  00000778  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_pubnames 0000005a  00000000  00000000  000008b2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_aranges 00000030  00000000  00000000  0000090c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_ranges 00000028  00000000  00000000  0000093c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_str    0000016d  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.analogReference:

00000000 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   0:	80 93 00 00 	sts	0x0000, r24
}
   4:	08 95       	ret

Disassembly of section .text.analogRead:

00000000 <analogRead>:

int analogRead(uint8_t pin)
{
   0:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
   2:	8e 30       	cpi	r24, 0x0E	; 14
   4:	00 f0       	brcs	.+0      	; 0x6 <analogRead+0x6>
   6:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
   8:	97 70       	andi	r25, 0x07	; 7
   a:	80 91 00 00 	lds	r24, 0x0000
   e:	82 95       	swap	r24
  10:	88 0f       	add	r24, r24
  12:	88 0f       	add	r24, r24
  14:	80 7c       	andi	r24, 0xC0	; 192
  16:	89 2b       	or	r24, r25
  18:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
  1c:	80 91 7a 00 	lds	r24, 0x007A
  20:	80 64       	ori	r24, 0x40	; 64
  22:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
  26:	80 91 7a 00 	lds	r24, 0x007A
  2a:	86 fd       	sbrc	r24, 6
  2c:	00 c0       	rjmp	.+0      	; 0x2e <analogRead+0x2e>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
  2e:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
  32:	40 91 79 00 	lds	r20, 0x0079
  36:	94 2f       	mov	r25, r20
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	28 2b       	or	r18, r24
  3e:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
  40:	c9 01       	movw	r24, r18
  42:	08 95       	ret

Disassembly of section .text.analogWrite:

00000000 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	18 2f       	mov	r17, r24
   8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	61 e0       	ldi	r22, 0x01	; 1
   c:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
	if (val == 0)
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <analogWrite+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
  16:	cf 3f       	cpi	r28, 0xFF	; 255
  18:	d1 05       	cpc	r29, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <analogWrite+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <analogWrite+0x1e>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
  1e:	e1 2f       	mov	r30, r17
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	e0 50       	subi	r30, 0x00	; 0
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	84 91       	lpm	r24, Z+
  28:	83 30       	cpi	r24, 0x03	; 3
  2a:	01 f0       	breq	.+0      	; 0x2c <analogWrite+0x2c>
  2c:	84 30       	cpi	r24, 0x04	; 4
  2e:	00 f4       	brcc	.+0      	; 0x30 <analogWrite+0x30>
  30:	81 30       	cpi	r24, 0x01	; 1
  32:	01 f0       	breq	.+0      	; 0x34 <analogWrite+0x34>
  34:	82 30       	cpi	r24, 0x02	; 2
  36:	01 f4       	brne	.+0      	; 0x38 <analogWrite+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <analogWrite+0x3a>
  3a:	86 30       	cpi	r24, 0x06	; 6
  3c:	01 f0       	breq	.+0      	; 0x3e <analogWrite+0x3e>
  3e:	87 30       	cpi	r24, 0x07	; 7
  40:	01 f0       	breq	.+0      	; 0x42 <analogWrite+0x42>
  42:	84 30       	cpi	r24, 0x04	; 4
  44:	01 f4       	brne	.+0      	; 0x46 <analogWrite+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <analogWrite+0x48>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
  48:	84 b5       	in	r24, 0x24	; 36
  4a:	80 68       	ori	r24, 0x80	; 128
  4c:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
  4e:	c7 bd       	out	0x27, r28	; 39
  50:	00 c0       	rjmp	.+0      	; 0x52 <analogWrite+0x52>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
  52:	84 b5       	in	r24, 0x24	; 36
  54:	80 62       	ori	r24, 0x20	; 32
  56:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
  58:	c8 bd       	out	0x28, r28	; 40
  5a:	00 c0       	rjmp	.+0      	; 0x5c <analogWrite+0x5c>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
  5c:	80 91 80 00 	lds	r24, 0x0080
  60:	80 68       	ori	r24, 0x80	; 128
  62:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
  66:	d0 93 89 00 	sts	0x0089, r29
  6a:	c0 93 88 00 	sts	0x0088, r28
  6e:	00 c0       	rjmp	.+0      	; 0x70 <analogWrite+0x70>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
  70:	80 91 80 00 	lds	r24, 0x0080
  74:	80 62       	ori	r24, 0x20	; 32
  76:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
  7a:	d0 93 8b 00 	sts	0x008B, r29
  7e:	c0 93 8a 00 	sts	0x008A, r28
  82:	00 c0       	rjmp	.+0      	; 0x84 <analogWrite+0x84>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
  84:	80 91 b0 00 	lds	r24, 0x00B0
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
  8e:	c0 93 b3 00 	sts	0x00B3, r28
  92:	00 c0       	rjmp	.+0      	; 0x94 <analogWrite+0x94>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
  94:	80 91 b0 00 	lds	r24, 0x00B0
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
  9e:	c0 93 b4 00 	sts	0x00B4, r28
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <analogWrite+0xa4>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
  a4:	c0 38       	cpi	r28, 0x80	; 128
  a6:	d1 05       	cpc	r29, r1
  a8:	04 f4       	brge	.+0      	; 0xaa <analogWrite+0xaa>
					digitalWrite(pin, LOW);
  aa:	81 2f       	mov	r24, r17
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <analogWrite+0xb0>
				} else {
					digitalWrite(pin, HIGH);
  b0:	81 2f       	mov	r24, r17
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
				}
		}
	}
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	1f 91       	pop	r17
  be:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000177  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000539  00000000  00000000  000001ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000033b  00000000  00000000  000006e4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.pinMode 0000004c  00000000  00000000  00000a1f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.digitalWrite 000000a8  00000000  00000000  00000a6b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.digitalRead 000000a6  00000000  00000000  00000b13  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data 0000005a  00000000  00000000  00000bb9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_frame  00000040  00000000  00000000  00000c14  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_loc    000000dc  00000000  00000000  00000c54  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_pubnames 000000da  00000000  00000000  00000d30  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_aranges 00000030  00000000  00000000  00000e0a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_ranges 00000028  00000000  00000000  00000e3a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_str    000001da  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.pinMode:

00000000 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
   0:	48 2f       	mov	r20, r24
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	ca 01       	movw	r24, r20
   6:	80 50       	subi	r24, 0x00	; 0
   8:	90 40       	sbci	r25, 0x00	; 0
   a:	fc 01       	movw	r30, r24
   c:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
   e:	40 50       	subi	r20, 0x00	; 0
  10:	50 40       	sbci	r21, 0x00	; 0
  12:	fa 01       	movw	r30, r20
  14:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
  16:	88 23       	and	r24, r24
  18:	01 f0       	breq	.+0      	; 0x1a <pinMode+0x1a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  1a:	e8 2f       	mov	r30, r24
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	ee 0f       	add	r30, r30
  20:	ff 1f       	adc	r31, r31
  22:	e0 50       	subi	r30, 0x00	; 0
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	a5 91       	lpm	r26, Z+
  28:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
  2a:	66 23       	and	r22, r22
  2c:	01 f4       	brne	.+0      	; 0x2e <pinMode+0x2e>
		uint8_t oldSREG = SREG;
  2e:	9f b7       	in	r25, 0x3f	; 63
                cli();
  30:	f8 94       	cli
		*reg &= ~bit;
  32:	8c 91       	ld	r24, X
  34:	20 95       	com	r18
  36:	82 23       	and	r24, r18
  38:	8c 93       	st	X, r24
		SREG = oldSREG;
  3a:	9f bf       	out	0x3f, r25	; 63
  3c:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
  3e:	9f b7       	in	r25, 0x3f	; 63
                cli();
  40:	f8 94       	cli
		*reg |= bit;
  42:	8c 91       	ld	r24, X
  44:	82 2b       	or	r24, r18
  46:	8c 93       	st	X, r24
		SREG = oldSREG;
  48:	9f bf       	out	0x3f, r25	; 63
  4a:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000000 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
   0:	48 2f       	mov	r20, r24
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	ca 01       	movw	r24, r20
   6:	80 50       	subi	r24, 0x00	; 0
   8:	90 40       	sbci	r25, 0x00	; 0
   a:	fc 01       	movw	r30, r24
   c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
   e:	ca 01       	movw	r24, r20
  10:	80 50       	subi	r24, 0x00	; 0
  12:	90 40       	sbci	r25, 0x00	; 0
  14:	fc 01       	movw	r30, r24
  16:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
  18:	40 50       	subi	r20, 0x00	; 0
  1a:	50 40       	sbci	r21, 0x00	; 0
  1c:	fa 01       	movw	r30, r20
  1e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
  20:	33 23       	and	r19, r19
  22:	01 f4       	brne	.+0      	; 0x24 <digitalWrite+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <digitalWrite+0x26>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  26:	22 23       	and	r18, r18
  28:	01 f0       	breq	.+0      	; 0x2a <digitalWrite+0x2a>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
  2a:	23 30       	cpi	r18, 0x03	; 3
  2c:	01 f0       	breq	.+0      	; 0x2e <digitalWrite+0x2e>
  2e:	24 30       	cpi	r18, 0x04	; 4
  30:	00 f4       	brcc	.+0      	; 0x32 <digitalWrite+0x32>
  32:	21 30       	cpi	r18, 0x01	; 1
  34:	01 f0       	breq	.+0      	; 0x36 <digitalWrite+0x36>
  36:	22 30       	cpi	r18, 0x02	; 2
  38:	01 f4       	brne	.+0      	; 0x3a <digitalWrite+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <digitalWrite+0x3c>
  3c:	26 30       	cpi	r18, 0x06	; 6
  3e:	01 f0       	breq	.+0      	; 0x40 <digitalWrite+0x40>
  40:	27 30       	cpi	r18, 0x07	; 7
  42:	01 f0       	breq	.+0      	; 0x44 <digitalWrite+0x44>
  44:	24 30       	cpi	r18, 0x04	; 4
  46:	01 f4       	brne	.+0      	; 0x48 <digitalWrite+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <digitalWrite+0x4a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  4a:	80 91 80 00 	lds	r24, 0x0080
  4e:	8f 77       	andi	r24, 0x7F	; 127
  50:	00 c0       	rjmp	.+0      	; 0x52 <digitalWrite+0x52>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  52:	80 91 80 00 	lds	r24, 0x0080
  56:	8f 7d       	andi	r24, 0xDF	; 223
  58:	80 93 80 00 	sts	0x0080, r24
  5c:	00 c0       	rjmp	.+0      	; 0x5e <digitalWrite+0x5e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  5e:	84 b5       	in	r24, 0x24	; 36
  60:	8f 77       	andi	r24, 0x7F	; 127
  62:	00 c0       	rjmp	.+0      	; 0x64 <digitalWrite+0x64>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  64:	84 b5       	in	r24, 0x24	; 36
  66:	8f 7d       	andi	r24, 0xDF	; 223
  68:	84 bd       	out	0x24, r24	; 36
  6a:	00 c0       	rjmp	.+0      	; 0x6c <digitalWrite+0x6c>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  6c:	80 91 b0 00 	lds	r24, 0x00B0
  70:	8f 77       	andi	r24, 0x7F	; 127
  72:	00 c0       	rjmp	.+0      	; 0x74 <digitalWrite+0x74>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  74:	80 91 b0 00 	lds	r24, 0x00B0
  78:	8f 7d       	andi	r24, 0xDF	; 223
  7a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
  7e:	e3 2f       	mov	r30, r19
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	ee 0f       	add	r30, r30
  84:	ff 1f       	adc	r31, r31
  86:	e0 50       	subi	r30, 0x00	; 0
  88:	f0 40       	sbci	r31, 0x00	; 0
  8a:	a5 91       	lpm	r26, Z+
  8c:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
  8e:	2f b7       	in	r18, 0x3f	; 63
	cli();
  90:	f8 94       	cli

	if (val == LOW) {
  92:	66 23       	and	r22, r22
  94:	01 f4       	brne	.+0      	; 0x96 <digitalWrite+0x96>
		*out &= ~bit;
  96:	8c 91       	ld	r24, X
  98:	90 95       	com	r25
  9a:	89 23       	and	r24, r25
  9c:	00 c0       	rjmp	.+0      	; 0x9e <digitalWrite+0x9e>
	} else {
		*out |= bit;
  9e:	8c 91       	ld	r24, X
  a0:	89 2b       	or	r24, r25
  a2:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
  a4:	2f bf       	out	0x3f, r18	; 63
  a6:	08 95       	ret

Disassembly of section .text.digitalRead:

00000000 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
   0:	68 2f       	mov	r22, r24
   2:	70 e0       	ldi	r23, 0x00	; 0
   4:	cb 01       	movw	r24, r22
   6:	80 50       	subi	r24, 0x00	; 0
   8:	90 40       	sbci	r25, 0x00	; 0
   a:	fc 01       	movw	r30, r24
   c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
   e:	cb 01       	movw	r24, r22
  10:	80 50       	subi	r24, 0x00	; 0
  12:	90 40       	sbci	r25, 0x00	; 0
  14:	fc 01       	movw	r30, r24
  16:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
  18:	60 50       	subi	r22, 0x00	; 0
  1a:	70 40       	sbci	r23, 0x00	; 0
  1c:	fb 01       	movw	r30, r22
  1e:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
  20:	99 23       	and	r25, r25
  22:	01 f4       	brne	.+0      	; 0x24 <digitalRead+0x24>
  24:	20 e0       	ldi	r18, 0x00	; 0
  26:	30 e0       	ldi	r19, 0x00	; 0
  28:	00 c0       	rjmp	.+0      	; 0x2a <digitalRead+0x2a>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  2a:	22 23       	and	r18, r18
  2c:	01 f0       	breq	.+0      	; 0x2e <digitalRead+0x2e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
  2e:	23 30       	cpi	r18, 0x03	; 3
  30:	01 f0       	breq	.+0      	; 0x32 <digitalRead+0x32>
  32:	24 30       	cpi	r18, 0x04	; 4
  34:	00 f4       	brcc	.+0      	; 0x36 <digitalRead+0x36>
  36:	21 30       	cpi	r18, 0x01	; 1
  38:	01 f0       	breq	.+0      	; 0x3a <digitalRead+0x3a>
  3a:	22 30       	cpi	r18, 0x02	; 2
  3c:	01 f4       	brne	.+0      	; 0x3e <digitalRead+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <digitalRead+0x40>
  40:	26 30       	cpi	r18, 0x06	; 6
  42:	01 f0       	breq	.+0      	; 0x44 <digitalRead+0x44>
  44:	27 30       	cpi	r18, 0x07	; 7
  46:	01 f0       	breq	.+0      	; 0x48 <digitalRead+0x48>
  48:	24 30       	cpi	r18, 0x04	; 4
  4a:	01 f4       	brne	.+0      	; 0x4c <digitalRead+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <digitalRead+0x4e>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  4e:	80 91 80 00 	lds	r24, 0x0080
  52:	8f 77       	andi	r24, 0x7F	; 127
  54:	00 c0       	rjmp	.+0      	; 0x56 <digitalRead+0x56>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  56:	80 91 80 00 	lds	r24, 0x0080
  5a:	8f 7d       	andi	r24, 0xDF	; 223
  5c:	80 93 80 00 	sts	0x0080, r24
  60:	00 c0       	rjmp	.+0      	; 0x62 <digitalRead+0x62>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  62:	84 b5       	in	r24, 0x24	; 36
  64:	8f 77       	andi	r24, 0x7F	; 127
  66:	00 c0       	rjmp	.+0      	; 0x68 <digitalRead+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  68:	84 b5       	in	r24, 0x24	; 36
  6a:	8f 7d       	andi	r24, 0xDF	; 223
  6c:	84 bd       	out	0x24, r24	; 36
  6e:	00 c0       	rjmp	.+0      	; 0x70 <digitalRead+0x70>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  70:	80 91 b0 00 	lds	r24, 0x00B0
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	00 c0       	rjmp	.+0      	; 0x78 <digitalRead+0x78>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  78:	80 91 b0 00 	lds	r24, 0x00B0
  7c:	8f 7d       	andi	r24, 0xDF	; 223
  7e:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
  82:	89 2f       	mov	r24, r25
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	80 50       	subi	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	a5 91       	lpm	r26, Z+
  92:	b4 91       	lpm	r27, Z+
  94:	8c 91       	ld	r24, X
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	84 23       	and	r24, r20
  9c:	01 f0       	breq	.+0      	; 0x9e <digitalRead+0x9e>
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
  a2:	c9 01       	movw	r24, r18
  a4:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000000f8  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002e6  00000000  00000000  0000012c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000224  00000000  00000000  00000412  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.pulseIn 0000013a  00000000  00000000  00000636  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .debug_frame  00000020  00000000  00000000  00000770  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_loc    00000258  00000000  00000000  00000790  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubnames 0000001e  00000000  00000000  000009e8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  00000a06  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000a26  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_str    00000194  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  18:	a8 2f       	mov	r26, r24
  1a:	b0 e0       	ldi	r27, 0x00	; 0
  1c:	cd 01       	movw	r24, r26
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	fc 01       	movw	r30, r24
  24:	84 90       	lpm	r8, Z+
	uint8_t port = digitalPinToPort(pin);
  26:	a0 50       	subi	r26, 0x00	; 0
  28:	b0 40       	sbci	r27, 0x00	; 0
  2a:	fd 01       	movw	r30, r26
  2c:	d4 90       	lpm	r13, Z+
	uint8_t stateMask = (state ? bit : 0);
  2e:	66 23       	and	r22, r22
  30:	01 f4       	brne	.+0      	; 0x32 <pulseIn+0x32>
  32:	99 24       	eor	r9, r9
  34:	00 c0       	rjmp	.+0      	; 0x36 <pulseIn+0x36>
  36:	98 2c       	mov	r9, r8
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  38:	ca 01       	movw	r24, r20
  3a:	b9 01       	movw	r22, r18
  3c:	20 e8       	ldi	r18, 0x80	; 128
  3e:	3e e3       	ldi	r19, 0x3E	; 62
  40:	40 e0       	ldi	r20, 0x00	; 0
  42:	50 e0       	ldi	r21, 0x00	; 0
  44:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  48:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  4c:	79 01       	movw	r14, r18
  4e:	8a 01       	movw	r16, r20
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  50:	6d 2d       	mov	r22, r13
  52:	70 e0       	ldi	r23, 0x00	; 0
  54:	66 0f       	add	r22, r22
  56:	77 1f       	adc	r23, r23
  58:	60 50       	subi	r22, 0x00	; 0
  5a:	70 40       	sbci	r23, 0x00	; 0
  5c:	aa 24       	eor	r10, r10
  5e:	bb 24       	eor	r11, r11
  60:	65 01       	movw	r12, r10
  62:	fb 01       	movw	r30, r22
  64:	a5 91       	lpm	r26, Z+
  66:	b4 91       	lpm	r27, Z+
  68:	00 c0       	rjmp	.+0      	; 0x6a <pulseIn+0x6a>
		if (numloops++ == maxloops)
  6a:	ae 14       	cp	r10, r14
  6c:	bf 04       	cpc	r11, r15
  6e:	c0 06       	cpc	r12, r16
  70:	d1 06       	cpc	r13, r17
  72:	01 f4       	brne	.+0      	; 0x74 <pulseIn+0x74>
  74:	00 c0       	rjmp	.+0      	; 0x76 <pulseIn+0x76>
  76:	08 94       	sec
  78:	a1 1c       	adc	r10, r1
  7a:	b1 1c       	adc	r11, r1
  7c:	c1 1c       	adc	r12, r1
  7e:	d1 1c       	adc	r13, r1
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  80:	8c 91       	ld	r24, X
  82:	88 21       	and	r24, r8
  84:	89 15       	cp	r24, r9
  86:	01 f0       	breq	.+0      	; 0x88 <pulseIn+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <pulseIn+0x8a>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
  8a:	ae 14       	cp	r10, r14
  8c:	bf 04       	cpc	r11, r15
  8e:	c0 06       	cpc	r12, r16
  90:	d1 06       	cpc	r13, r17
  92:	01 f4       	brne	.+0      	; 0x94 <pulseIn+0x94>
  94:	00 c0       	rjmp	.+0      	; 0x96 <pulseIn+0x96>
  96:	08 94       	sec
  98:	a1 1c       	adc	r10, r1
  9a:	b1 1c       	adc	r11, r1
  9c:	c1 1c       	adc	r12, r1
  9e:	d1 1c       	adc	r13, r1
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <pulseIn+0xa2>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
  a2:	fb 01       	movw	r30, r22
  a4:	a5 91       	lpm	r26, Z+
  a6:	b4 91       	lpm	r27, Z+
  a8:	8c 91       	ld	r24, X
  aa:	88 21       	and	r24, r8
  ac:	89 15       	cp	r24, r9
  ae:	01 f4       	brne	.+0      	; 0xb0 <pulseIn+0xb0>
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  b8:	fb 01       	movw	r30, r22
  ba:	c5 91       	lpm	r28, Z+
  bc:	d4 91       	lpm	r29, Z+
  be:	00 c0       	rjmp	.+0      	; 0xc0 <pulseIn+0xc0>
		if (numloops++ == maxloops)
  c0:	da 01       	movw	r26, r20
  c2:	c9 01       	movw	r24, r18
  c4:	8a 0d       	add	r24, r10
  c6:	9b 1d       	adc	r25, r11
  c8:	ac 1d       	adc	r26, r12
  ca:	bd 1d       	adc	r27, r13
  cc:	8e 15       	cp	r24, r14
  ce:	9f 05       	cpc	r25, r15
  d0:	a0 07       	cpc	r26, r16
  d2:	b1 07       	cpc	r27, r17
  d4:	01 f0       	breq	.+0      	; 0xd6 <pulseIn+0xd6>
			return 0;
		width++;
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	4f 4f       	sbci	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  de:	88 81       	ld	r24, Y
  e0:	88 21       	and	r24, r8
  e2:	89 15       	cp	r24, r9
  e4:	01 f0       	breq	.+0      	; 0xe6 <pulseIn+0xe6>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
  e6:	ca 01       	movw	r24, r20
  e8:	b9 01       	movw	r22, r18
  ea:	28 e0       	ldi	r18, 0x08	; 8
  ec:	32 e5       	ldi	r19, 0x52	; 82
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  f6:	60 58       	subi	r22, 0x80	; 128
  f8:	71 4c       	sbci	r23, 0xC1	; 193
  fa:	8f 4f       	sbci	r24, 0xFF	; 255
  fc:	9f 4f       	sbci	r25, 0xFF	; 255
  fe:	20 e8       	ldi	r18, 0x80	; 128
 100:	3e e3       	ldi	r19, 0x3E	; 62
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 10a:	c9 01       	movw	r24, r18
 10c:	da 01       	movw	r26, r20
 10e:	9c 01       	movw	r18, r24
 110:	ad 01       	movw	r20, r26
 112:	00 c0       	rjmp	.+0      	; 0x114 <pulseIn+0x114>
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	50 e0       	ldi	r21, 0x00	; 0
}
 11c:	b9 01       	movw	r22, r18
 11e:	ca 01       	movw	r24, r20
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	bf 90       	pop	r11
 132:	af 90       	pop	r10
 134:	9f 90       	pop	r9
 136:	8f 90       	pop	r8
 138:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000000cf  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e3  00000000  00000000  00000103  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000241  00000000  00000000  000002e6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.shiftOut 00000084  00000000  00000000  00000527  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.shiftIn 00000080  00000000  00000000  000005ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .debug_frame  00000030  00000000  00000000  0000062c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_loc    000000f5  00000000  00000000  0000065c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_pubnames 0000002b  00000000  00000000  00000751  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_aranges 00000028  00000000  00000000  0000077c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000007a4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_str    00000127  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.shiftOut:

00000000 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	e8 2e       	mov	r14, r24
  14:	f6 2e       	mov	r15, r22
  16:	b4 2e       	mov	r11, r20
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	02 2f       	mov	r16, r18
  1e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
  20:	87 e0       	ldi	r24, 0x07	; 7
  22:	c8 2e       	mov	r12, r24
  24:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  26:	bb 20       	and	r11, r11
  28:	01 f4       	brne	.+0      	; 0x2a <shiftOut+0x2a>
			digitalWrite(dataPin, !!(val & (1 << i)));
  2a:	b6 01       	movw	r22, r12
  2c:	6c 1b       	sub	r22, r28
  2e:	7d 0b       	sbc	r23, r29
  30:	c8 01       	movw	r24, r16
  32:	00 c0       	rjmp	.+0      	; 0x34 <shiftOut+0x34>
  34:	95 95       	asr	r25
  36:	87 95       	ror	r24
  38:	6a 95       	dec	r22
  3a:	02 f4       	brpl	.+0      	; 0x3c <shiftOut+0x3c>
  3c:	bc 01       	movw	r22, r24
  3e:	00 c0       	rjmp	.+0      	; 0x40 <shiftOut+0x40>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  40:	b8 01       	movw	r22, r16
  42:	0c 2e       	mov	r0, r28
  44:	00 c0       	rjmp	.+0      	; 0x46 <shiftOut+0x46>
  46:	75 95       	asr	r23
  48:	67 95       	ror	r22
  4a:	0a 94       	dec	r0
  4c:	02 f4       	brpl	.+0      	; 0x4e <shiftOut+0x4e>
  4e:	61 70       	andi	r22, 0x01	; 1
  50:	8e 2d       	mov	r24, r14
  52:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
			
		digitalWrite(clockPin, HIGH);
  56:	8f 2d       	mov	r24, r15
  58:	61 e0       	ldi	r22, 0x01	; 1
  5a:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
		digitalWrite(clockPin, LOW);		
  5e:	8f 2d       	mov	r24, r15
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  66:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  68:	9f ef       	ldi	r25, 0xFF	; 255
  6a:	cf 3f       	cpi	r28, 0xFF	; 255
  6c:	d9 07       	cpc	r29, r25
  6e:	01 f4       	brne	.+0      	; 0x70 <shiftOut+0x70>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	ff 90       	pop	r15
  7a:	ef 90       	pop	r14
  7c:	df 90       	pop	r13
  7e:	cf 90       	pop	r12
  80:	bf 90       	pop	r11
  82:	08 95       	ret

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	f8 2e       	mov	r15, r24
  12:	06 2f       	mov	r16, r22
  14:	e4 2e       	mov	r14, r20
  16:	10 e0       	ldi	r17, 0x00	; 0
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
  1c:	97 e0       	ldi	r25, 0x07	; 7
  1e:	c9 2e       	mov	r12, r25
  20:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
  22:	80 2f       	mov	r24, r16
  24:	61 e0       	ldi	r22, 0x01	; 1
  26:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
  2a:	ee 20       	and	r14, r14
  2c:	01 f4       	brne	.+0      	; 0x2e <shiftIn+0x2e>
			value |= digitalRead(dataPin) << i;
  2e:	8f 2d       	mov	r24, r15
  30:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  34:	96 01       	movw	r18, r12
  36:	2c 1b       	sub	r18, r28
  38:	3d 0b       	sbc	r19, r29
  3a:	00 c0       	rjmp	.+0      	; 0x3c <shiftIn+0x3c>
  3c:	88 0f       	add	r24, r24
  3e:	99 1f       	adc	r25, r25
  40:	2a 95       	dec	r18
  42:	02 f4       	brpl	.+0      	; 0x44 <shiftIn+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <shiftIn+0x46>
		else
			value |= digitalRead(dataPin) << (7 - i);
  46:	8f 2d       	mov	r24, r15
  48:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  4c:	0c 2e       	mov	r0, r28
  4e:	00 c0       	rjmp	.+0      	; 0x50 <shiftIn+0x50>
  50:	88 0f       	add	r24, r24
  52:	99 1f       	adc	r25, r25
  54:	0a 94       	dec	r0
  56:	02 f4       	brpl	.+0      	; 0x58 <shiftIn+0x58>
  58:	18 2b       	or	r17, r24
		digitalWrite(clockPin, LOW);
  5a:	80 2f       	mov	r24, r16
  5c:	60 e0       	ldi	r22, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  62:	21 97       	sbiw	r28, 0x01	; 1

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	cf 3f       	cpi	r28, 0xFF	; 255
  68:	d8 07       	cpc	r29, r24
  6a:	01 f4       	brne	.+0      	; 0x6c <shiftIn+0x6c>
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
}
  6c:	81 2f       	mov	r24, r17
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	08 95       	ret
